{"ast":null,"code":"import axios from 'axios';\nimport { API_BASE_URL } from \"./constants/url\";\n\nclass RequestService {\n  constructor() {\n    this.get = (url, isAuthRequired = false, contentType = \"application/json\") => {\n      return createRequest(\"GET\", url, null, isAuthRequired, contentType);\n    };\n\n    this.post = (url, body, isAuthRequired = false, contentType = \"application/json\") => {\n      return createRequest(\"POST\", url, body, isAuthRequired, contentType);\n    };\n\n    this.put = (url, body, isAuthRequired = false, contentType = \"application/json\") => {\n      return createRequest(\"PUT\", url, body, isAuthRequired, contentType);\n    };\n\n    this.delete = (url, isAuthRequired = false, contentType = \"application/json\") => {\n      return createRequest(\"DELETE\", url, null, isAuthRequired, contentType);\n    };\n  }\n\n}\n\nconst createRequest = (method, url, body, isAuthRequired, contentType) => {\n  return axios({\n    method: method,\n    url: API_BASE_URL + url,\n    data: body,\n    headers: setHeader(isAuthRequired, contentType)\n  });\n};\n\nconst setHeader = (isAuthRequired, contentType) => {\n  if (isAuthRequired) {\n    axios.defaults.headers.common[\"Authorization\"] = localStorage.getItem(\"token\");\n  } else {\n    delete axios.defaults.headers.common['Authorization'];\n  }\n\n  axios.defaults.headers.common[\"Content-Type\"] = contentType;\n};\n\nexport default new RequestService();","map":{"version":3,"sources":["C:/Users/HP/Desktop/project/ecommerce-spring-reactjs-master/frontend/src/utils/request-service.tsx"],"names":["axios","API_BASE_URL","RequestService","get","url","isAuthRequired","contentType","createRequest","post","body","put","delete","method","data","headers","setHeader","defaults","common","localStorage","getItem"],"mappings":"AACA,OAAOA,KAAP,MAA4B,OAA5B;AAEA,SAAQC,YAAR,QAA2B,iBAA3B;;AAEA,MAAMC,cAAN,CAAqB;AAAA;AAAA,SAEjBC,GAFiB,GAEX,CAACC,GAAD,EAAcC,cAAuB,GAAG,KAAxC,EAA+CC,WAAmB,GAAG,kBAArE,KAA4F;AAC9F,aAAOC,aAAa,CAAC,KAAD,EAAQH,GAAR,EAAa,IAAb,EAAmBC,cAAnB,EAAmCC,WAAnC,CAApB;AACH,KAJgB;;AAAA,SAMjBE,IANiB,GAMV,CAACJ,GAAD,EAAcK,IAAd,EAAyBJ,cAAuB,GAAG,KAAnD,EAA0DC,WAAmB,GAAG,kBAAhF,KAAuG;AAC1G,aAAOC,aAAa,CAAC,MAAD,EAASH,GAAT,EAAcK,IAAd,EAAoBJ,cAApB,EAAoCC,WAApC,CAApB;AACH,KARgB;;AAAA,SAUjBI,GAViB,GAUX,CAACN,GAAD,EAAcK,IAAd,EAAyBJ,cAAuB,GAAG,KAAnD,EAA0DC,WAAmB,GAAG,kBAAhF,KAAuG;AACzG,aAAOC,aAAa,CAAC,KAAD,EAAQH,GAAR,EAAaK,IAAb,EAAmBJ,cAAnB,EAAmCC,WAAnC,CAApB;AACH,KAZgB;;AAAA,SAcjBK,MAdiB,GAcR,CAACP,GAAD,EAAcC,cAAuB,GAAG,KAAxC,EAA+CC,WAAmB,GAAG,kBAArE,KAA4F;AACjG,aAAOC,aAAa,CAAC,QAAD,EAAWH,GAAX,EAAgB,IAAhB,EAAsBC,cAAtB,EAAsCC,WAAtC,CAApB;AACH,KAhBgB;AAAA;;AAAA;;AAmBrB,MAAMC,aAAa,GAAG,CAACK,MAAD,EAAiBR,GAAjB,EAA8BK,IAA9B,EAAyCJ,cAAzC,EAAkEC,WAAlE,KAA0F;AAC5G,SAAON,KAAK,CAAC;AACTY,IAAAA,MAAM,EAAEA,MADC;AAETR,IAAAA,GAAG,EAAEH,YAAY,GAAGG,GAFX;AAGTS,IAAAA,IAAI,EAAEJ,IAHG;AAITK,IAAAA,OAAO,EAAEC,SAAS,CAACV,cAAD,EAAiBC,WAAjB;AAJT,GAAD,CAAZ;AAMH,CAPD;;AASA,MAAMS,SAAS,GAAG,CAACV,cAAD,EAA0BC,WAA1B,KAAkD;AAChE,MAAID,cAAJ,EAAoB;AAChBL,IAAAA,KAAK,CAACgB,QAAN,CAAeF,OAAf,CAAuBG,MAAvB,CAA8B,eAA9B,IAAiDC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAjD;AACH,GAFD,MAEO;AACH,WAAOnB,KAAK,CAACgB,QAAN,CAAeF,OAAf,CAAuBG,MAAvB,CAA8B,eAA9B,CAAP;AACH;;AACDjB,EAAAA,KAAK,CAACgB,QAAN,CAAeF,OAAf,CAAuBG,MAAvB,CAA8B,cAA9B,IAAgDX,WAAhD;AACH,CAPD;;AASA,eAAe,IAAIJ,cAAJ,EAAf","sourcesContent":["import React from 'react';\nimport axios, {Method} from 'axios';\n\nimport {API_BASE_URL} from \"./constants/url\";\n\nclass RequestService {\n\n    get = (url: string, isAuthRequired: boolean = false, contentType: string = \"application/json\") => {\n        return createRequest(\"GET\", url, null, isAuthRequired, contentType);\n    };\n\n    post = (url: string, body: any, isAuthRequired: boolean = false, contentType: string = \"application/json\") => {\n        return createRequest(\"POST\", url, body, isAuthRequired, contentType);\n    };\n\n    put = (url: string, body: any, isAuthRequired: boolean = false, contentType: string = \"application/json\") => {\n        return createRequest(\"PUT\", url, body, isAuthRequired, contentType);\n    };\n\n    delete = (url: string, isAuthRequired: boolean = false, contentType: string = \"application/json\") => {\n        return createRequest(\"DELETE\", url, null, isAuthRequired, contentType);\n    };\n}\n\nconst createRequest = (method: Method, url: string, body: any, isAuthRequired: boolean, contentType: string) => {\n    return axios({\n        method: method,\n        url: API_BASE_URL + url,\n        data: body,\n        headers: setHeader(isAuthRequired, contentType)\n    });\n};\n\nconst setHeader = (isAuthRequired: boolean, contentType: string) => {\n    if (isAuthRequired) {\n        axios.defaults.headers.common[\"Authorization\"] = localStorage.getItem(\"token\");\n    } else {\n        delete axios.defaults.headers.common['Authorization']\n    }\n    axios.defaults.headers.common[\"Content-Type\"] = contentType\n};\n\nexport default new RequestService();\n"]},"metadata":{},"sourceType":"module"}