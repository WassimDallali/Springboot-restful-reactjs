{"ast":null,"code":"import devAssert from \"../jsutils/devAssert.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nvar NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/**\n * Upholds the spec rules about naming.\n */\n\nexport function assertValidName(name) {\n  var error = isValidNameError(name);\n\n  if (error) {\n    throw error;\n  }\n\n  return name;\n}\n/**\n * Returns an Error if a name is invalid.\n */\n\nexport function isValidNameError(name) {\n  typeof name === 'string' || devAssert(0, 'Expected name to be a string.');\n\n  if (name.length > 1 && name[0] === '_' && name[1] === '_') {\n    return new GraphQLError(\"Name \\\"\".concat(name, \"\\\" must not begin with \\\"__\\\", which is reserved by GraphQL introspection.\"));\n  }\n\n  if (!NAME_RX.test(name)) {\n    return new GraphQLError(\"Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \\\"\".concat(name, \"\\\" does not.\"));\n  }\n}","map":{"version":3,"sources":["C:/Users/HP/Desktop/project/ecommerce-spring-reactjs-master/frontend/node_modules/graphql/utilities/assertValidName.mjs"],"names":["devAssert","GraphQLError","NAME_RX","assertValidName","name","error","isValidNameError","length","concat","test"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,0BAAtB;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,IAAIC,OAAO,GAAG,0BAAd;AACA;AACA;AACA;;AAEA,OAAO,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;AACpC,MAAIC,KAAK,GAAGC,gBAAgB,CAACF,IAAD,CAA5B;;AAEA,MAAIC,KAAJ,EAAW;AACT,UAAMA,KAAN;AACD;;AAED,SAAOD,IAAP;AACD;AACD;AACA;AACA;;AAEA,OAAO,SAASE,gBAAT,CAA0BF,IAA1B,EAAgC;AACrC,SAAOA,IAAP,KAAgB,QAAhB,IAA4BJ,SAAS,CAAC,CAAD,EAAI,+BAAJ,CAArC;;AAEA,MAAII,IAAI,CAACG,MAAL,GAAc,CAAd,IAAmBH,IAAI,CAAC,CAAD,CAAJ,KAAY,GAA/B,IAAsCA,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAtD,EAA2D;AACzD,WAAO,IAAIH,YAAJ,CAAiB,UAAUO,MAAV,CAAiBJ,IAAjB,EAAuB,4EAAvB,CAAjB,CAAP;AACD;;AAED,MAAI,CAACF,OAAO,CAACO,IAAR,CAAaL,IAAb,CAAL,EAAyB;AACvB,WAAO,IAAIH,YAAJ,CAAiB,qDAAqDO,MAArD,CAA4DJ,IAA5D,EAAkE,cAAlE,CAAjB,CAAP;AACD;AACF","sourcesContent":["import devAssert from \"../jsutils/devAssert.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nvar NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/**\n * Upholds the spec rules about naming.\n */\n\nexport function assertValidName(name) {\n  var error = isValidNameError(name);\n\n  if (error) {\n    throw error;\n  }\n\n  return name;\n}\n/**\n * Returns an Error if a name is invalid.\n */\n\nexport function isValidNameError(name) {\n  typeof name === 'string' || devAssert(0, 'Expected name to be a string.');\n\n  if (name.length > 1 && name[0] === '_' && name[1] === '_') {\n    return new GraphQLError(\"Name \\\"\".concat(name, \"\\\" must not begin with \\\"__\\\", which is reserved by GraphQL introspection.\"));\n  }\n\n  if (!NAME_RX.test(name)) {\n    return new GraphQLError(\"Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \\\"\".concat(name, \"\\\" does not.\"));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}