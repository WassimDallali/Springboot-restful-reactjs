{"ast":null,"code":"import { getPerfumes, fetchPerfumesByQuerySuccess, fetchPerfumeByQuerySuccess, fetchPerfumesByFilterParamsSuccess, fetchPerfumesByGenderSuccess, fetchPerfumesByPerfumerSuccess, fetchPerfumeSuccess, loadingPerfume } from \"../actions/perfume-actions\";\nimport { gePerfumesByIdsQuery, getAllPerfumesByQuery, getPerfumeByQuery } from \"../../utils/graphql-query/perfume-query\";\nimport RequestService from '../../utils/request-service';\nexport const fetchPerfumes = () => async dispatch => {\n  dispatch(loadingPerfume());\n  const response = await RequestService.get(\"/perfumes\");\n  dispatch(getPerfumes(response.data));\n};\nexport const fetchPerfume = id => async dispatch => {\n  dispatch(loadingPerfume());\n  const response = await RequestService.get(\"/perfumes/\" + id);\n  dispatch(fetchPerfumeSuccess(response.data));\n};\nexport const fetchPerfumesByIds = ids => async dispatch => {\n  dispatch(loadingPerfume());\n  const response = await RequestService.post(\"/perfumes/ids\", ids);\n  dispatch(getPerfumes(response.data));\n};\nexport const fetchPerfumesByFilterParams = filter => async dispatch => {\n  dispatch(loadingPerfume());\n  const response = await RequestService.post(\"/perfumes/search\", filter);\n  dispatch(fetchPerfumesByFilterParamsSuccess(response.data));\n};\nexport const fetchPerfumesByGender = gender => async dispatch => {\n  dispatch(loadingPerfume());\n  const response = await RequestService.post(\"/perfumes/search/gender\", gender);\n  dispatch(fetchPerfumesByGenderSuccess(response.data));\n};\nexport const fetchPerfumesByPerfumer = perfumer => async dispatch => {\n  dispatch(loadingPerfume());\n  const response = await RequestService.post(\"/perfumes/search/perfumer\", perfumer);\n  dispatch(fetchPerfumesByPerfumerSuccess(response.data));\n};\nexport const fetchPerfumeReviewsWS = response => async dispatch => {\n  dispatch(fetchPerfumeSuccess(response));\n}; // GraphQL thunks\n\nexport const fetchPerfumesByQuery = () => async dispatch => {\n  dispatch(loadingPerfume());\n  const response = await RequestService.post(\"/perfumes/graphql/perfumes\", {\n    query: getAllPerfumesByQuery\n  });\n  dispatch(fetchPerfumesByQuerySuccess(response.data.data.perfumes));\n};\nexport const fetchPerfumeByQuery = id => async dispatch => {\n  dispatch(loadingPerfume());\n  const response = await RequestService.post(\"/perfumes/graphql/perfume\", {\n    query: getPerfumeByQuery(id)\n  });\n  dispatch(fetchPerfumeByQuerySuccess(response.data.data.perfume));\n};\nexport const fetchPerfumesByIdsQuery = ids => async dispatch => {\n  dispatch(loadingPerfume());\n  const response = await RequestService.post(\"/perfumes/graphql/ids\", {\n    query: gePerfumesByIdsQuery(ids)\n  });\n  dispatch(fetchPerfumesByQuerySuccess(response.data.data.perfumesIds));\n};","map":{"version":3,"sources":["C:/Users/HP/Desktop/project/ecommerce-spring-reactjs-master/frontend/src/redux/thunks/perfume-thunks.ts"],"names":["getPerfumes","fetchPerfumesByQuerySuccess","fetchPerfumeByQuerySuccess","fetchPerfumesByFilterParamsSuccess","fetchPerfumesByGenderSuccess","fetchPerfumesByPerfumerSuccess","fetchPerfumeSuccess","loadingPerfume","gePerfumesByIdsQuery","getAllPerfumesByQuery","getPerfumeByQuery","RequestService","fetchPerfumes","dispatch","response","get","data","fetchPerfume","id","fetchPerfumesByIds","ids","post","fetchPerfumesByFilterParams","filter","fetchPerfumesByGender","gender","fetchPerfumesByPerfumer","perfumer","fetchPerfumeReviewsWS","fetchPerfumesByQuery","query","perfumes","fetchPerfumeByQuery","perfume","fetchPerfumesByIdsQuery","perfumesIds"],"mappings":"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","sourcesContent":["import {Dispatch} from \"redux\";\n\nimport {\n    getPerfumes,\n    fetchPerfumesByQuerySuccess,\n    fetchPerfumeByQuerySuccess,\n    fetchPerfumesByFilterParamsSuccess,\n    fetchPerfumesByGenderSuccess,\n    fetchPerfumesByPerfumerSuccess,\n    fetchPerfumeSuccess,\n    loadingPerfume\n} from \"../actions/perfume-actions\";\nimport {FilterParamsType, Perfume} from \"../../types/types\";\nimport {gePerfumesByIdsQuery, getAllPerfumesByQuery, getPerfumeByQuery} from \"../../utils/graphql-query/perfume-query\";\nimport RequestService from '../../utils/request-service';\n\nexport const fetchPerfumes = () => async (dispatch: Dispatch) => {\n    dispatch(loadingPerfume());\n    const response = await RequestService.get(\"/perfumes\");\n    dispatch(getPerfumes(response.data));\n};\n\nexport const fetchPerfume = (id: string) => async (dispatch: Dispatch) => {\n    dispatch(loadingPerfume());\n    const response = await RequestService.get(\"/perfumes/\" + id);\n    dispatch(fetchPerfumeSuccess(response.data));\n};\n\nexport const fetchPerfumesByIds = (ids: Array<number>) => async (dispatch: Dispatch) => {\n    dispatch(loadingPerfume());\n    const response = await RequestService.post(\"/perfumes/ids\", ids);\n    dispatch(getPerfumes(response.data));\n};\n\nexport const fetchPerfumesByFilterParams = (filter: FilterParamsType) => async (dispatch: Dispatch) => {\n    dispatch(loadingPerfume());\n    const response = await RequestService.post(\"/perfumes/search\", filter);\n    dispatch(fetchPerfumesByFilterParamsSuccess(response.data));\n};\n\nexport const fetchPerfumesByGender = (gender: { perfumeGender: string }) => async (dispatch: Dispatch) => {\n    dispatch(loadingPerfume());\n    const response = await RequestService.post(\"/perfumes/search/gender\", gender);\n    dispatch(fetchPerfumesByGenderSuccess(response.data));\n};\n\nexport const fetchPerfumesByPerfumer = (perfumer: { perfumer: string }) => async (dispatch: Dispatch) => {\n    dispatch(loadingPerfume());\n    const response = await RequestService.post(\"/perfumes/search/perfumer\", perfumer);\n    dispatch(fetchPerfumesByPerfumerSuccess(response.data));\n};\n\nexport const fetchPerfumeReviewsWS = (response: Perfume) => async (dispatch: Dispatch) => {\n    dispatch(fetchPerfumeSuccess(response));\n};\n\n// GraphQL thunks\nexport const fetchPerfumesByQuery = () => async (dispatch: Dispatch) => {\n    dispatch(loadingPerfume());\n    const response = await RequestService.post(\"/perfumes/graphql/perfumes\", {query: getAllPerfumesByQuery});\n    dispatch(fetchPerfumesByQuerySuccess(response.data.data.perfumes));\n};\n\nexport const fetchPerfumeByQuery = (id: string) => async (dispatch: Dispatch) => {\n    dispatch(loadingPerfume());\n    const response = await RequestService.post(\"/perfumes/graphql/perfume\", {query: getPerfumeByQuery(id)});\n    dispatch(fetchPerfumeByQuerySuccess(response.data.data.perfume));\n};\n\nexport const fetchPerfumesByIdsQuery = (ids: Array<number>) => async (dispatch: Dispatch) => {\n    dispatch(loadingPerfume());\n    const response = await RequestService.post(\"/perfumes/graphql/ids\", {query: gePerfumesByIdsQuery(ids)});\n    dispatch(fetchPerfumesByQuerySuccess(response.data.data.perfumesIds));\n};\n"]},"metadata":{},"sourceType":"module"}