{"ast":null,"code":"import inspect from \"../jsutils/inspect.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { GraphQLList, GraphQLNonNull } from \"../type/definition.mjs\";\n/**\n * Given a Schema and an AST node describing a type, return a GraphQLType\n * definition which applies to that type. For example, if provided the parsed\n * AST node for `[User]`, a GraphQLList instance will be returned, containing\n * the type called \"User\" found in the schema. If a type called \"User\" is not\n * found in the schema, then undefined will be returned.\n */\n\n/* eslint-disable no-redeclare */\n\nexport function typeFromAST(schema, typeNode) {\n  /* eslint-enable no-redeclare */\n  var innerType;\n\n  if (typeNode.kind === Kind.LIST_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && new GraphQLList(innerType);\n  }\n\n  if (typeNode.kind === Kind.NON_NULL_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && new GraphQLNonNull(innerType);\n  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n  if (typeNode.kind === Kind.NAMED_TYPE) {\n    return schema.getType(typeNode.name.value);\n  } // istanbul ignore next (Not reachable. All possible type nodes have been considered)\n\n\n  false || invariant(0, 'Unexpected type node: ' + inspect(typeNode));\n}","map":{"version":3,"sources":["C:/Users/HP/Desktop/project/ecommerce-spring-reactjs-master/frontend/node_modules/graphql/utilities/typeFromAST.mjs"],"names":["inspect","invariant","Kind","GraphQLList","GraphQLNonNull","typeFromAST","schema","typeNode","innerType","kind","LIST_TYPE","type","NON_NULL_TYPE","NAMED_TYPE","getType","name","value"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,wBAApB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,SAASC,IAAT,QAAqB,uBAArB;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,wBAA5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAO,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,QAA7B,EAAuC;AAC5C;AACA,MAAIC,SAAJ;;AAEA,MAAID,QAAQ,CAACE,IAAT,KAAkBP,IAAI,CAACQ,SAA3B,EAAsC;AACpCF,IAAAA,SAAS,GAAGH,WAAW,CAACC,MAAD,EAASC,QAAQ,CAACI,IAAlB,CAAvB;AACA,WAAOH,SAAS,IAAI,IAAIL,WAAJ,CAAgBK,SAAhB,CAApB;AACD;;AAED,MAAID,QAAQ,CAACE,IAAT,KAAkBP,IAAI,CAACU,aAA3B,EAA0C;AACxCJ,IAAAA,SAAS,GAAGH,WAAW,CAACC,MAAD,EAASC,QAAQ,CAACI,IAAlB,CAAvB;AACA,WAAOH,SAAS,IAAI,IAAIJ,cAAJ,CAAmBI,SAAnB,CAApB;AACD,GAZ2C,CAY1C;;;AAGF,MAAID,QAAQ,CAACE,IAAT,KAAkBP,IAAI,CAACW,UAA3B,EAAuC;AACrC,WAAOP,MAAM,CAACQ,OAAP,CAAeP,QAAQ,CAACQ,IAAT,CAAcC,KAA7B,CAAP;AACD,GAjB2C,CAiB1C;;;AAGF,WAASf,SAAS,CAAC,CAAD,EAAI,2BAA2BD,OAAO,CAACO,QAAD,CAAtC,CAAlB;AACD","sourcesContent":["import inspect from \"../jsutils/inspect.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { GraphQLList, GraphQLNonNull } from \"../type/definition.mjs\";\n/**\n * Given a Schema and an AST node describing a type, return a GraphQLType\n * definition which applies to that type. For example, if provided the parsed\n * AST node for `[User]`, a GraphQLList instance will be returned, containing\n * the type called \"User\" found in the schema. If a type called \"User\" is not\n * found in the schema, then undefined will be returned.\n */\n\n/* eslint-disable no-redeclare */\n\nexport function typeFromAST(schema, typeNode) {\n  /* eslint-enable no-redeclare */\n  var innerType;\n\n  if (typeNode.kind === Kind.LIST_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && new GraphQLList(innerType);\n  }\n\n  if (typeNode.kind === Kind.NON_NULL_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && new GraphQLNonNull(innerType);\n  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n  if (typeNode.kind === Kind.NAMED_TYPE) {\n    return schema.getType(typeNode.name.value);\n  } // istanbul ignore next (Not reachable. All possible type nodes have been considered)\n\n\n  false || invariant(0, 'Unexpected type node: ' + inspect(typeNode));\n}\n"]},"metadata":{},"sourceType":"module"}