{"ast":null,"code":"import { isReference, isField, DeepMerger, resultKeyNameFromField, shouldInclude } from \"../../utilities/index.js\";\nexport var hasOwn = Object.prototype.hasOwnProperty;\nexport function getTypenameFromStoreObject(store, objectOrReference) {\n  return isReference(objectOrReference) ? store.get(objectOrReference.__ref, \"__typename\") : objectOrReference && objectOrReference.__typename;\n}\nexport var TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;\nexport function fieldNameFromStoreName(storeFieldName) {\n  var match = storeFieldName.match(TypeOrFieldNameRegExp);\n  return match ? match[0] : storeFieldName;\n}\nexport function selectionSetMatchesResult(selectionSet, result, variables) {\n  if (result && typeof result === \"object\") {\n    return Array.isArray(result) ? result.every(function (item) {\n      return selectionSetMatchesResult(selectionSet, item, variables);\n    }) : selectionSet.selections.every(function (field) {\n      if (isField(field) && shouldInclude(field, variables)) {\n        var key = resultKeyNameFromField(field);\n        return hasOwn.call(result, key) && (!field.selectionSet || selectionSetMatchesResult(field.selectionSet, result[key], variables));\n      }\n\n      return true;\n    });\n  }\n\n  return false;\n}\nexport function storeValueIsStoreObject(value) {\n  return value !== null && typeof value === \"object\" && !isReference(value) && !Array.isArray(value);\n}\nexport function makeProcessedFieldsMerger() {\n  return new DeepMerger();\n}","map":{"version":3,"sources":["../../../src/cache/inmemory/helpers.ts"],"names":[],"mappings":"AAGA,SAEE,WAFF,EAKE,OALF,EAME,UANF,EAOE,sBAPF,EAQE,aARF,QASO,0BATP;AAWA,OAAO,IAAM,MAAM,GAAG,MAAM,CAAC,SAAP,CAAiB,cAAhC;AAEP,OAAM,SAAU,0BAAV,CACJ,KADI,EAEJ,iBAFI,EAEsC;AAE1C,SAAO,WAAW,CAAC,iBAAD,CAAX,GACH,KAAK,CAAC,GAAN,CAAU,iBAAiB,CAAC,KAA5B,EAAmC,YAAnC,CADG,GAEH,iBAAiB,IAAI,iBAAiB,CAAC,UAF3C;AAGD;AAED,OAAO,IAAM,qBAAqB,GAAG,oBAA9B;AAEP,OAAM,SAAU,sBAAV,CAAiC,cAAjC,EAAuD;AAC3D,MAAM,KAAK,GAAG,cAAc,CAAC,KAAf,CAAqB,qBAArB,CAAd;AACA,SAAO,KAAK,GAAG,KAAK,CAAC,CAAD,CAAR,GAAc,cAA1B;AACD;AAED,OAAM,SAAU,yBAAV,CACJ,YADI,EAEJ,MAFI,EAGJ,SAHI,EAG2B;AAE/B,MAAI,MAAM,IAAI,OAAO,MAAP,KAAkB,QAAhC,EAA0C;AACxC,WAAO,KAAK,CAAC,OAAN,CAAc,MAAd,IACH,MAAM,CAAC,KAAP,CAAa,UAAA,IAAA,EAAI;AAAI,aAAA,yBAAyB,CAAC,YAAD,EAAe,IAAf,EAAzB,SAAyB,CAAzB;AAAwD,KAA7E,CADG,GAEH,YAAY,CAAC,UAAb,CAAwB,KAAxB,CAA8B,UAAA,KAAA,EAAK;AACnC,UAAI,OAAO,CAAC,KAAD,CAAP,IAAkB,aAAa,CAAC,KAAD,EAAQ,SAAR,CAAnC,EAAuD;AACrD,YAAM,GAAG,GAAG,sBAAsB,CAAC,KAAD,CAAlC;AACA,eAAO,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,GAApB,MACJ,CAAC,KAAK,CAAC,YAAP,IACA,yBAAyB,CAAC,KAAK,CAAC,YAAP,EAAqB,MAAM,CAAC,GAAD,CAA3B,EAAkC,SAAlC,CAFrB,CAAP;AAGD;;AAMD,aAAO,IAAP;AACD,KAbC,CAFJ;AAgBD;;AACD,SAAO,KAAP;AACD;AAED,OAAM,SAAU,uBAAV,CACJ,KADI,EACa;AAEjB,SAAO,KAAK,KAAK,IAAV,IACL,OAAO,KAAP,KAAiB,QADZ,IAEL,CAAC,WAAW,CAAC,KAAD,CAFP,IAGL,CAAC,KAAK,CAAC,OAAN,CAAc,KAAd,CAHH;AAID;AAED,OAAM,SAAU,yBAAV,GAAmC;AACvC,SAAO,IAAI,UAAJ,EAAP;AACD","sourcesContent":["import { SelectionSetNode } from 'graphql';\n\nimport { NormalizedCache } from './types';\nimport {\n  Reference,\n  isReference,\n  StoreValue,\n  StoreObject,\n  isField,\n  DeepMerger,\n  resultKeyNameFromField,\n  shouldInclude,\n} from '../../utilities';\n\nexport const hasOwn = Object.prototype.hasOwnProperty;\n\nexport function getTypenameFromStoreObject(\n  store: NormalizedCache,\n  objectOrReference: StoreObject | Reference,\n): string | undefined {\n  return isReference(objectOrReference)\n    ? store.get(objectOrReference.__ref, \"__typename\") as string\n    : objectOrReference && objectOrReference.__typename;\n}\n\nexport const TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;\n\nexport function fieldNameFromStoreName(storeFieldName: string): string {\n  const match = storeFieldName.match(TypeOrFieldNameRegExp);\n  return match ? match[0] : storeFieldName;\n}\n\nexport function selectionSetMatchesResult(\n  selectionSet: SelectionSetNode,\n  result: Record<string, any>,\n  variables?: Record<string, any>,\n): boolean {\n  if (result && typeof result === \"object\") {\n    return Array.isArray(result)\n      ? result.every(item => selectionSetMatchesResult(selectionSet, item, variables))\n      : selectionSet.selections.every(field => {\n        if (isField(field) && shouldInclude(field, variables)) {\n          const key = resultKeyNameFromField(field);\n          return hasOwn.call(result, key) &&\n            (!field.selectionSet ||\n             selectionSetMatchesResult(field.selectionSet, result[key], variables));\n        }\n        // If the selection has been skipped with @skip(true) or\n        // @include(false), it should not count against the matching. If\n        // the selection is not a field, it must be a fragment (inline or\n        // named). We will determine if selectionSetMatchesResult for that\n        // fragment when we get to it, so for now we return true.\n        return true;\n      });\n  }\n  return false;\n}\n\nexport function storeValueIsStoreObject(\n  value: StoreValue,\n): value is StoreObject {\n  return value !== null &&\n    typeof value === \"object\" &&\n    !isReference(value) &&\n    !Array.isArray(value);\n}\n\nexport function makeProcessedFieldsMerger() {\n  return new DeepMerger;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}