{"ast":null,"code":"import { addPerfumeFailure, addPerfumeSuccess, getAllUsers, getAllUsersOrders, getUserInfo, getUserOrders, reset, updatePerfumeFailure, updatePerfumeSuccess, getAllUsersByQuery, getAllUsersOrdersByQuery, getUserInfoByQuery, getUserOrdersByQuery, loadingData } from \"../actions/admin-actions\";\nimport { fetchPerfumeSuccess, getPerfumes } from \"../actions/perfume-actions\";\nimport RequestService from '../../utils/request-service';\nimport { userByQuery, usersByQuery } from \"../../utils/graphql-query/users-query\";\nimport { ordersByEmailQuery, ordersByQuery } from \"../../utils/graphql-query/orders-query\";\nexport const addPerfume = data => async dispatch => {\n  try {\n    await RequestService.post(\"/admin/add\", data, true, \"multipart/form-data\");\n    dispatch(addPerfumeSuccess());\n  } catch (error) {\n    dispatch(addPerfumeFailure(error.response.data));\n  }\n};\nexport const updatePerfume = data => async dispatch => {\n  try {\n    const response = await RequestService.post(\"/admin/edit\", data, true, \"multipart/form-data\");\n    dispatch(updatePerfumeSuccess());\n    dispatch(fetchPerfumeSuccess(response.data));\n  } catch (error) {\n    dispatch(updatePerfumeFailure(error.response.data));\n  }\n};\nexport const deletePerfume = id => async dispatch => {\n  const response = await RequestService.delete(\"/admin/delete/\" + id, true);\n  dispatch(getPerfumes(response.data));\n};\nexport const fetchAllUsersOrders = () => async dispatch => {\n  dispatch(loadingData());\n  const response = await RequestService.get(\"/admin/orders\", true);\n  dispatch(getAllUsersOrders(response.data));\n};\nexport const fetchUserOrders = email => async dispatch => {\n  const response = await RequestService.post(\"/admin/order\", {\n    email: email\n  }, true);\n  dispatch(getUserOrders(response.data));\n};\nexport const fetchAllUsers = () => async dispatch => {\n  dispatch(loadingData());\n  const response = await RequestService.get(\"/admin/user/all\", true);\n  dispatch(getAllUsers(response.data));\n};\nexport const fetchUserInfo = id => async dispatch => {\n  dispatch(loadingData());\n  const response = await RequestService.get(\"/admin/user/\" + id, true);\n  dispatch(getUserInfo(response.data));\n};\nexport const formReset = () => async dispatch => {\n  dispatch(reset());\n}; //GraphQL thunks\n\nexport const fetchUserInfoByQuery = id => async dispatch => {\n  dispatch(loadingData());\n  const response = await RequestService.post(\"/admin/graphql/user\", {\n    query: userByQuery(id)\n  }, true);\n  dispatch(getUserInfoByQuery(response.data.data.user));\n};\nexport const fetchAllUsersByQuery = () => async dispatch => {\n  dispatch(loadingData());\n  const response = await RequestService.post(\"/admin/graphql/user/all\", {\n    query: usersByQuery\n  }, true);\n  dispatch(getAllUsersByQuery(response.data.data.users));\n};\nexport const fetchAllUsersOrdersByQuery = () => async dispatch => {\n  dispatch(loadingData());\n  const response = await RequestService.post(\"/admin/graphql/orders\", {\n    query: ordersByQuery\n  }, true);\n  dispatch(getAllUsersOrdersByQuery(response.data.data.orders));\n};\nexport const fetchUserOrdersByEmailQuery = email => async dispatch => {\n  dispatch(loadingData());\n  const response = await RequestService.post(\"/admin/graphql/order\", {\n    query: ordersByEmailQuery(email)\n  }, true);\n  dispatch(getUserOrdersByQuery(response.data.data.ordersByEmail));\n};","map":{"version":3,"sources":["C:/Users/HP/Desktop/project/ecommerce-spring-reactjs-master/frontend/src/redux/thunks/admin-thunks.ts"],"names":["addPerfumeFailure","addPerfumeSuccess","getAllUsers","getAllUsersOrders","getUserInfo","getUserOrders","reset","updatePerfumeFailure","updatePerfumeSuccess","getAllUsersByQuery","getAllUsersOrdersByQuery","getUserInfoByQuery","getUserOrdersByQuery","loadingData","fetchPerfumeSuccess","getPerfumes","RequestService","userByQuery","usersByQuery","ordersByEmailQuery","ordersByQuery","addPerfume","data","dispatch","post","error","response","updatePerfume","deletePerfume","id","delete","fetchAllUsersOrders","get","fetchUserOrders","email","fetchAllUsers","fetchUserInfo","formReset","fetchUserInfoByQuery","query","user","fetchAllUsersByQuery","users","fetchAllUsersOrdersByQuery","orders","fetchUserOrdersByEmailQuery","ordersByEmail"],"mappings":"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","sourcesContent":["import {Dispatch} from \"redux\";\n\nimport {\n    addPerfumeFailure,\n    addPerfumeSuccess,\n    getAllUsers,\n    getAllUsersOrders,\n    getUserInfo,\n    getUserOrders,\n    reset,\n    updatePerfumeFailure,\n    updatePerfumeSuccess,\n    getAllUsersByQuery,\n    getAllUsersOrdersByQuery,\n    getUserInfoByQuery,\n    getUserOrdersByQuery,\n    loadingData,\n} from \"../actions/admin-actions\";\nimport {fetchPerfumeSuccess, getPerfumes} from \"../actions/perfume-actions\";\nimport RequestService from '../../utils/request-service';\nimport {userByQuery, usersByQuery} from \"../../utils/graphql-query/users-query\";\nimport {ordersByEmailQuery, ordersByQuery} from \"../../utils/graphql-query/orders-query\";\n\nexport const addPerfume = (data: FormData) => async (dispatch: Dispatch) => {\n    try {\n        await RequestService.post(\"/admin/add\", data, true, \"multipart/form-data\")\n        dispatch(addPerfumeSuccess());\n    } catch (error) {\n        dispatch(addPerfumeFailure(error.response.data));\n    }\n};\n\nexport const updatePerfume = (data: FormData) => async (dispatch: Dispatch) => {\n    try {\n        const response = await RequestService.post(\"/admin/edit\", data, true, \"multipart/form-data\");\n        dispatch(updatePerfumeSuccess());\n        dispatch(fetchPerfumeSuccess(response.data));\n    } catch (error) {\n        dispatch(updatePerfumeFailure(error.response.data));\n    }\n};\n\nexport const deletePerfume = (id?: number) => async (dispatch: Dispatch) => {\n    const response = await RequestService.delete(\"/admin/delete/\" + id, true);\n    dispatch(getPerfumes(response.data));\n};\n\nexport const fetchAllUsersOrders = () => async (dispatch: Dispatch) => {\n    dispatch(loadingData());\n    const response = await RequestService.get(\"/admin/orders\", true);\n    dispatch(getAllUsersOrders(response.data));\n};\n\nexport const fetchUserOrders = (email: string | undefined) => async (dispatch: Dispatch) => {\n    const response = await RequestService.post(\"/admin/order\", {email: email}, true);\n    dispatch(getUserOrders(response.data));\n};\n\nexport const fetchAllUsers = () => async (dispatch: Dispatch) => {\n    dispatch(loadingData());\n    const response = await RequestService.get(\"/admin/user/all\", true);\n    dispatch(getAllUsers(response.data));\n};\n\nexport const fetchUserInfo = (id: string) => async (dispatch: Dispatch) => {\n    dispatch(loadingData());\n    const response = await RequestService.get(\"/admin/user/\" + id, true);\n    dispatch(getUserInfo(response.data));\n};\n\nexport const formReset = () => async (dispatch: Dispatch) => {\n    dispatch(reset());\n};\n\n//GraphQL thunks\nexport const fetchUserInfoByQuery = (id: string) => async (dispatch: Dispatch) => {\n    dispatch(loadingData());\n    const response = await RequestService.post(\"/admin/graphql/user\", {query: userByQuery(id)}, true);\n    dispatch(getUserInfoByQuery(response.data.data.user));\n};\n\nexport const fetchAllUsersByQuery = () => async (dispatch: Dispatch) => {\n    dispatch(loadingData());\n    const response = await RequestService.post(\"/admin/graphql/user/all\", {query: usersByQuery}, true);\n    dispatch(getAllUsersByQuery(response.data.data.users));\n};\n\nexport const fetchAllUsersOrdersByQuery = () => async (dispatch: Dispatch) => {\n    dispatch(loadingData());\n    const response = await RequestService.post(\"/admin/graphql/orders\", {query: ordersByQuery}, true);\n    dispatch(getAllUsersOrdersByQuery(response.data.data.orders));\n};\n\nexport const fetchUserOrdersByEmailQuery = (email: string | undefined) => async (dispatch: Dispatch) => {\n    dispatch(loadingData());\n    const response = await RequestService.post(\"/admin/graphql/order\", {query: ordersByEmailQuery(email)}, true);\n    dispatch(getUserOrdersByQuery(response.data.data.ordersByEmail));\n};\n"]},"metadata":{},"sourceType":"module"}