{"ast":null,"code":"import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n/**\n * No undefined variables\n *\n * A GraphQL operation is only valid if all variables encountered, both directly\n * and via fragment spreads, are defined by that operation.\n */\n\nexport function NoUndefinedVariablesRule(context) {\n  var variableNameDefined = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        variableNameDefined = Object.create(null);\n      },\n      leave: function leave(operation) {\n        var usages = context.getRecursiveVariableUsages(operation);\n\n        for (var _i2 = 0; _i2 < usages.length; _i2++) {\n          var _ref2 = usages[_i2];\n          var node = _ref2.node;\n          var varName = node.name.value;\n\n          if (variableNameDefined[varName] !== true) {\n            context.reportError(new GraphQLError(operation.name ? \"Variable \\\"$\".concat(varName, \"\\\" is not defined by operation \\\"\").concat(operation.name.value, \"\\\".\") : \"Variable \\\"$\".concat(varName, \"\\\" is not defined.\"), [node, operation]));\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      variableNameDefined[node.variable.name.value] = true;\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/HP/Desktop/project/ecommerce-spring-reactjs-master/frontend/node_modules/graphql/validation/rules/NoUndefinedVariablesRule.mjs"],"names":["GraphQLError","NoUndefinedVariablesRule","context","variableNameDefined","Object","create","OperationDefinition","enter","leave","operation","usages","getRecursiveVariableUsages","_i2","length","_ref2","node","varName","name","value","reportError","concat","VariableDefinition","variable"],"mappings":"AAAA,SAASA,YAAT,QAA6B,8BAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,wBAAT,CAAkCC,OAAlC,EAA2C;AAChD,MAAIC,mBAAmB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAA1B;AACA,SAAO;AACLC,IAAAA,mBAAmB,EAAE;AACnBC,MAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtBJ,QAAAA,mBAAmB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAtB;AACD,OAHkB;AAInBG,MAAAA,KAAK,EAAE,SAASA,KAAT,CAAeC,SAAf,EAA0B;AAC/B,YAAIC,MAAM,GAAGR,OAAO,CAACS,0BAAR,CAAmCF,SAAnC,CAAb;;AAEA,aAAK,IAAIG,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGF,MAAM,CAACG,MAA/B,EAAuCD,GAAG,EAA1C,EAA8C;AAC5C,cAAIE,KAAK,GAAGJ,MAAM,CAACE,GAAD,CAAlB;AACA,cAAIG,IAAI,GAAGD,KAAK,CAACC,IAAjB;AACA,cAAIC,OAAO,GAAGD,IAAI,CAACE,IAAL,CAAUC,KAAxB;;AAEA,cAAIf,mBAAmB,CAACa,OAAD,CAAnB,KAAiC,IAArC,EAA2C;AACzCd,YAAAA,OAAO,CAACiB,WAAR,CAAoB,IAAInB,YAAJ,CAAiBS,SAAS,CAACQ,IAAV,GAAiB,eAAeG,MAAf,CAAsBJ,OAAtB,EAA+B,mCAA/B,EAAoEI,MAApE,CAA2EX,SAAS,CAACQ,IAAV,CAAeC,KAA1F,EAAiG,KAAjG,CAAjB,GAA2H,eAAeE,MAAf,CAAsBJ,OAAtB,EAA+B,oBAA/B,CAA5I,EAAkM,CAACD,IAAD,EAAON,SAAP,CAAlM,CAApB;AACD;AACF;AACF;AAhBkB,KADhB;AAmBLY,IAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BN,IAA5B,EAAkC;AACpDZ,MAAAA,mBAAmB,CAACY,IAAI,CAACO,QAAL,CAAcL,IAAd,CAAmBC,KAApB,CAAnB,GAAgD,IAAhD;AACD;AArBI,GAAP;AAuBD","sourcesContent":["import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * No undefined variables\n *\n * A GraphQL operation is only valid if all variables encountered, both directly\n * and via fragment spreads, are defined by that operation.\n */\nexport function NoUndefinedVariablesRule(context) {\n  var variableNameDefined = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        variableNameDefined = Object.create(null);\n      },\n      leave: function leave(operation) {\n        var usages = context.getRecursiveVariableUsages(operation);\n\n        for (var _i2 = 0; _i2 < usages.length; _i2++) {\n          var _ref2 = usages[_i2];\n          var node = _ref2.node;\n          var varName = node.name.value;\n\n          if (variableNameDefined[varName] !== true) {\n            context.reportError(new GraphQLError(operation.name ? \"Variable \\\"$\".concat(varName, \"\\\" is not defined by operation \\\"\").concat(operation.name.value, \"\\\".\") : \"Variable \\\"$\".concat(varName, \"\\\" is not defined.\"), [node, operation]));\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      variableNameDefined[node.variable.name.value] = true;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}