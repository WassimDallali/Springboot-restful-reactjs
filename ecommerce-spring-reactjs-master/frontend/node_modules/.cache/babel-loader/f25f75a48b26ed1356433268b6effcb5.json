{"ast":null,"code":"import inspect from \"../../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { isNonNullType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\nimport { isTypeSubTypeOf } from \"../../utilities/typeComparators.mjs\";\n/**\n * Variables passed to field arguments conform to type\n */\n\nexport function VariablesInAllowedPositionRule(context) {\n  var varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        varDefMap = Object.create(null);\n      },\n      leave: function leave(operation) {\n        var usages = context.getRecursiveVariableUsages(operation);\n\n        for (var _i2 = 0; _i2 < usages.length; _i2++) {\n          var _ref2 = usages[_i2];\n          var node = _ref2.node;\n          var type = _ref2.type;\n          var defaultValue = _ref2.defaultValue;\n          var varName = node.name.value;\n          var varDef = varDefMap[varName];\n\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            var schema = context.getSchema();\n            var varType = typeFromAST(schema, varDef.type);\n\n            if (varType && !allowedVariableUsage(schema, varType, varDef.defaultValue, type, defaultValue)) {\n              var varTypeStr = inspect(varType);\n              var typeStr = inspect(type);\n              context.reportError(new GraphQLError(\"Variable \\\"$\".concat(varName, \"\\\" of type \\\"\").concat(varTypeStr, \"\\\" used in position expecting type \\\"\").concat(typeStr, \"\\\".\"), [varDef, node]));\n            }\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    }\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\nfunction allowedVariableUsage(schema, varType, varDefaultValue, locationType, locationDefaultValue) {\n  if (isNonNullType(locationType) && !isNonNullType(varType)) {\n    var hasNonNullVariableDefaultValue = varDefaultValue != null && varDefaultValue.kind !== Kind.NULL;\n    var hasLocationDefaultValue = locationDefaultValue !== undefined;\n\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n\n    var nullableLocationType = locationType.ofType;\n    return isTypeSubTypeOf(schema, varType, nullableLocationType);\n  }\n\n  return isTypeSubTypeOf(schema, varType, locationType);\n}","map":{"version":3,"sources":["C:/Users/HP/Desktop/project/ecommerce-spring-reactjs-master/frontend/node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs"],"names":["inspect","GraphQLError","Kind","isNonNullType","typeFromAST","isTypeSubTypeOf","VariablesInAllowedPositionRule","context","varDefMap","Object","create","OperationDefinition","enter","leave","operation","usages","getRecursiveVariableUsages","_i2","length","_ref2","node","type","defaultValue","varName","name","value","varDef","schema","getSchema","varType","allowedVariableUsage","varTypeStr","typeStr","reportError","concat","VariableDefinition","variable","varDefaultValue","locationType","locationDefaultValue","hasNonNullVariableDefaultValue","kind","NULL","hasLocationDefaultValue","undefined","nullableLocationType","ofType"],"mappings":"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","sourcesContent":["import inspect from \"../../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { isNonNullType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\nimport { isTypeSubTypeOf } from \"../../utilities/typeComparators.mjs\";\n\n/**\n * Variables passed to field arguments conform to type\n */\nexport function VariablesInAllowedPositionRule(context) {\n  var varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        varDefMap = Object.create(null);\n      },\n      leave: function leave(operation) {\n        var usages = context.getRecursiveVariableUsages(operation);\n\n        for (var _i2 = 0; _i2 < usages.length; _i2++) {\n          var _ref2 = usages[_i2];\n          var node = _ref2.node;\n          var type = _ref2.type;\n          var defaultValue = _ref2.defaultValue;\n          var varName = node.name.value;\n          var varDef = varDefMap[varName];\n\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            var schema = context.getSchema();\n            var varType = typeFromAST(schema, varDef.type);\n\n            if (varType && !allowedVariableUsage(schema, varType, varDef.defaultValue, type, defaultValue)) {\n              var varTypeStr = inspect(varType);\n              var typeStr = inspect(type);\n              context.reportError(new GraphQLError(\"Variable \\\"$\".concat(varName, \"\\\" of type \\\"\").concat(varTypeStr, \"\\\" used in position expecting type \\\"\").concat(typeStr, \"\\\".\"), [varDef, node]));\n            }\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    }\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\nfunction allowedVariableUsage(schema, varType, varDefaultValue, locationType, locationDefaultValue) {\n  if (isNonNullType(locationType) && !isNonNullType(varType)) {\n    var hasNonNullVariableDefaultValue = varDefaultValue != null && varDefaultValue.kind !== Kind.NULL;\n    var hasLocationDefaultValue = locationDefaultValue !== undefined;\n\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n\n    var nullableLocationType = locationType.ofType;\n    return isTypeSubTypeOf(schema, varType, nullableLocationType);\n  }\n\n  return isTypeSubTypeOf(schema, varType, locationType);\n}\n"]},"metadata":{},"sourceType":"module"}