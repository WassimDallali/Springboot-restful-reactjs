{"ast":null,"code":"// Produce the GraphQL query recommended for a full schema introspection.\n// Accepts optional IntrospectionOptions.\nexport { getIntrospectionQuery } from \"./getIntrospectionQuery.mjs\"; // Gets the target Operation from a Document.\n\nexport { getOperationAST } from \"./getOperationAST.mjs\"; // Gets the Type for the target Operation AST.\n\nexport { getOperationRootType } from \"./getOperationRootType.mjs\"; // Convert a GraphQLSchema to an IntrospectionQuery.\n\nexport { introspectionFromSchema } from \"./introspectionFromSchema.mjs\"; // Build a GraphQLSchema from an introspection result.\n\nexport { buildClientSchema } from \"./buildClientSchema.mjs\"; // Build a GraphQLSchema from GraphQL Schema language.\n\nexport { buildASTSchema, buildSchema } from \"./buildASTSchema.mjs\"; // Extends an existing GraphQLSchema from a parsed GraphQL Schema language AST.\n\nexport { extendSchema // @deprecated: Get the description from a schema AST node and supports legacy\n// syntax for specifying descriptions - will be removed in v16.\n, getDescription } from \"./extendSchema.mjs\"; // Sort a GraphQLSchema.\n\nexport { lexicographicSortSchema } from \"./lexicographicSortSchema.mjs\"; // Print a GraphQLSchema to GraphQL Schema language.\n\nexport { printSchema, printType, printIntrospectionSchema } from \"./printSchema.mjs\"; // Create a GraphQLType from a GraphQL language AST.\n\nexport { typeFromAST } from \"./typeFromAST.mjs\"; // Create a JavaScript value from a GraphQL language AST with a type.\n\nexport { valueFromAST } from \"./valueFromAST.mjs\"; // Create a JavaScript value from a GraphQL language AST without a type.\n\nexport { valueFromASTUntyped } from \"./valueFromASTUntyped.mjs\"; // Create a GraphQL language AST from a JavaScript value.\n\nexport { astFromValue } from \"./astFromValue.mjs\"; // A helper to use within recursive-descent visitors which need to be aware of\n// the GraphQL type system.\n\nexport { TypeInfo, visitWithTypeInfo } from \"./TypeInfo.mjs\"; // Coerces a JavaScript value to a GraphQL type, or produces errors.\n\nexport { coerceInputValue } from \"./coerceInputValue.mjs\"; // Concatenates multiple AST together.\n\nexport { concatAST } from \"./concatAST.mjs\"; // Separates an AST into an AST per Operation.\n\nexport { separateOperations } from \"./separateOperations.mjs\"; // Strips characters that are not significant to the validity or execution\n// of a GraphQL document.\n\nexport { stripIgnoredCharacters } from \"./stripIgnoredCharacters.mjs\"; // Comparators for types\n\nexport { isEqualType, isTypeSubTypeOf, doTypesOverlap } from \"./typeComparators.mjs\"; // Asserts that a string is a valid GraphQL name\n\nexport { assertValidName, isValidNameError } from \"./assertValidName.mjs\"; // Compares two GraphQLSchemas and detects breaking changes.\n\nexport { BreakingChangeType, DangerousChangeType, findBreakingChanges, findDangerousChanges } from \"./findBreakingChanges.mjs\"; // @deprecated: Report all deprecated usage within a GraphQL document.\n\nexport { findDeprecatedUsages } from \"./findDeprecatedUsages.mjs\";","map":{"version":3,"sources":["C:/Users/HP/Desktop/project/ecommerce-spring-reactjs-master/frontend/node_modules/graphql/utilities/index.mjs"],"names":["getIntrospectionQuery","getOperationAST","getOperationRootType","introspectionFromSchema","buildClientSchema","buildASTSchema","buildSchema","extendSchema","getDescription","lexicographicSortSchema","printSchema","printType","printIntrospectionSchema","typeFromAST","valueFromAST","valueFromASTUntyped","astFromValue","TypeInfo","visitWithTypeInfo","coerceInputValue","concatAST","separateOperations","stripIgnoredCharacters","isEqualType","isTypeSubTypeOf","doTypesOverlap","assertValidName","isValidNameError","BreakingChangeType","DangerousChangeType","findBreakingChanges","findDangerousChanges","findDeprecatedUsages"],"mappings":"AAAA;AACA;AACA,SAASA,qBAAT,QAAsC,6BAAtC,C,CACA;;AACA,SAASC,eAAT,QAAgC,uBAAhC,C,CAAyD;;AAEzD,SAASC,oBAAT,QAAqC,4BAArC,C,CAAmE;;AAEnE,SAASC,uBAAT,QAAwC,+BAAxC,C,CAAyE;;AAEzE,SAASC,iBAAT,QAAkC,yBAAlC,C,CAA6D;;AAE7D,SAASC,cAAT,EAAyBC,WAAzB,QAA4C,sBAA5C,C,CACA;;AACA,SAASC,YAAT,CAAsB;AACtB;AADA,EAEEC,cAFF,QAEwB,oBAFxB,C,CAE8C;;AAE9C,SAASC,uBAAT,QAAwC,+BAAxC,C,CAAyE;;AAEzE,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,wBAAjC,QAAiE,mBAAjE,C,CAAsF;;AAEtF,SAASC,WAAT,QAA4B,mBAA5B,C,CAAiD;;AAEjD,SAASC,YAAT,QAA6B,oBAA7B,C,CAAmD;;AAEnD,SAASC,mBAAT,QAAoC,2BAApC,C,CAAiE;;AAEjE,SAASC,YAAT,QAA6B,oBAA7B,C,CAAmD;AACnD;;AAEA,SAASC,QAAT,EAAmBC,iBAAnB,QAA4C,gBAA5C,C,CAA8D;;AAE9D,SAASC,gBAAT,QAAiC,wBAAjC,C,CAA2D;;AAE3D,SAASC,SAAT,QAA0B,iBAA1B,C,CAA6C;;AAE7C,SAASC,kBAAT,QAAmC,0BAAnC,C,CAA+D;AAC/D;;AAEA,SAASC,sBAAT,QAAuC,8BAAvC,C,CAAuE;;AAEvE,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,cAAvC,QAA6D,uBAA7D,C,CAAsF;;AAEtF,SAASC,eAAT,EAA0BC,gBAA1B,QAAkD,uBAAlD,C,CAA2E;;AAE3E,SAASC,kBAAT,EAA6BC,mBAA7B,EAAkDC,mBAAlD,EAAuEC,oBAAvE,QAAmG,2BAAnG,C,CACA;;AACA,SAASC,oBAAT,QAAqC,4BAArC","sourcesContent":["// Produce the GraphQL query recommended for a full schema introspection.\n// Accepts optional IntrospectionOptions.\nexport { getIntrospectionQuery } from \"./getIntrospectionQuery.mjs\";\n// Gets the target Operation from a Document.\nexport { getOperationAST } from \"./getOperationAST.mjs\"; // Gets the Type for the target Operation AST.\n\nexport { getOperationRootType } from \"./getOperationRootType.mjs\"; // Convert a GraphQLSchema to an IntrospectionQuery.\n\nexport { introspectionFromSchema } from \"./introspectionFromSchema.mjs\"; // Build a GraphQLSchema from an introspection result.\n\nexport { buildClientSchema } from \"./buildClientSchema.mjs\"; // Build a GraphQLSchema from GraphQL Schema language.\n\nexport { buildASTSchema, buildSchema } from \"./buildASTSchema.mjs\";\n// Extends an existing GraphQLSchema from a parsed GraphQL Schema language AST.\nexport { extendSchema // @deprecated: Get the description from a schema AST node and supports legacy\n// syntax for specifying descriptions - will be removed in v16.\n, getDescription } from \"./extendSchema.mjs\"; // Sort a GraphQLSchema.\n\nexport { lexicographicSortSchema } from \"./lexicographicSortSchema.mjs\"; // Print a GraphQLSchema to GraphQL Schema language.\n\nexport { printSchema, printType, printIntrospectionSchema } from \"./printSchema.mjs\"; // Create a GraphQLType from a GraphQL language AST.\n\nexport { typeFromAST } from \"./typeFromAST.mjs\"; // Create a JavaScript value from a GraphQL language AST with a type.\n\nexport { valueFromAST } from \"./valueFromAST.mjs\"; // Create a JavaScript value from a GraphQL language AST without a type.\n\nexport { valueFromASTUntyped } from \"./valueFromASTUntyped.mjs\"; // Create a GraphQL language AST from a JavaScript value.\n\nexport { astFromValue } from \"./astFromValue.mjs\"; // A helper to use within recursive-descent visitors which need to be aware of\n// the GraphQL type system.\n\nexport { TypeInfo, visitWithTypeInfo } from \"./TypeInfo.mjs\"; // Coerces a JavaScript value to a GraphQL type, or produces errors.\n\nexport { coerceInputValue } from \"./coerceInputValue.mjs\"; // Concatenates multiple AST together.\n\nexport { concatAST } from \"./concatAST.mjs\"; // Separates an AST into an AST per Operation.\n\nexport { separateOperations } from \"./separateOperations.mjs\"; // Strips characters that are not significant to the validity or execution\n// of a GraphQL document.\n\nexport { stripIgnoredCharacters } from \"./stripIgnoredCharacters.mjs\"; // Comparators for types\n\nexport { isEqualType, isTypeSubTypeOf, doTypesOverlap } from \"./typeComparators.mjs\"; // Asserts that a string is a valid GraphQL name\n\nexport { assertValidName, isValidNameError } from \"./assertValidName.mjs\"; // Compares two GraphQLSchemas and detects breaking changes.\n\nexport { BreakingChangeType, DangerousChangeType, findBreakingChanges, findDangerousChanges } from \"./findBreakingChanges.mjs\";\n// @deprecated: Report all deprecated usage within a GraphQL document.\nexport { findDeprecatedUsages } from \"./findDeprecatedUsages.mjs\";\n"]},"metadata":{},"sourceType":"module"}