{"ast":null,"code":"import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n/**\n * No unused fragments\n *\n * A GraphQL document is only valid if all fragment definitions are spread\n * within operations, or spread within other fragments spread within operations.\n */\n\nexport function NoUnusedFragmentsRule(context) {\n  var operationDefs = [];\n  var fragmentDefs = [];\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      operationDefs.push(node);\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      fragmentDefs.push(node);\n      return false;\n    },\n    Document: {\n      leave: function leave() {\n        var fragmentNameUsed = Object.create(null);\n\n        for (var _i2 = 0; _i2 < operationDefs.length; _i2++) {\n          var operation = operationDefs[_i2];\n\n          for (var _i4 = 0, _context$getRecursive2 = context.getRecursivelyReferencedFragments(operation); _i4 < _context$getRecursive2.length; _i4++) {\n            var fragment = _context$getRecursive2[_i4];\n            fragmentNameUsed[fragment.name.value] = true;\n          }\n        }\n\n        for (var _i6 = 0; _i6 < fragmentDefs.length; _i6++) {\n          var fragmentDef = fragmentDefs[_i6];\n          var fragName = fragmentDef.name.value;\n\n          if (fragmentNameUsed[fragName] !== true) {\n            context.reportError(new GraphQLError(\"Fragment \\\"\".concat(fragName, \"\\\" is never used.\"), fragmentDef));\n          }\n        }\n      }\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/HP/Desktop/project/ecommerce-spring-reactjs-master/frontend/node_modules/graphql/validation/rules/NoUnusedFragmentsRule.mjs"],"names":["GraphQLError","NoUnusedFragmentsRule","context","operationDefs","fragmentDefs","OperationDefinition","node","push","FragmentDefinition","Document","leave","fragmentNameUsed","Object","create","_i2","length","operation","_i4","_context$getRecursive2","getRecursivelyReferencedFragments","fragment","name","value","_i6","fragmentDef","fragName","reportError","concat"],"mappings":"AAAA,SAASA,YAAT,QAA6B,8BAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,qBAAT,CAA+BC,OAA/B,EAAwC;AAC7C,MAAIC,aAAa,GAAG,EAApB;AACA,MAAIC,YAAY,GAAG,EAAnB;AACA,SAAO;AACLC,IAAAA,mBAAmB,EAAE,SAASA,mBAAT,CAA6BC,IAA7B,EAAmC;AACtDH,MAAAA,aAAa,CAACI,IAAd,CAAmBD,IAAnB;AACA,aAAO,KAAP;AACD,KAJI;AAKLE,IAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BF,IAA5B,EAAkC;AACpDF,MAAAA,YAAY,CAACG,IAAb,CAAkBD,IAAlB;AACA,aAAO,KAAP;AACD,KARI;AASLG,IAAAA,QAAQ,EAAE;AACRC,MAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtB,YAAIC,gBAAgB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAvB;;AAEA,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGX,aAAa,CAACY,MAAtC,EAA8CD,GAAG,EAAjD,EAAqD;AACnD,cAAIE,SAAS,GAAGb,aAAa,CAACW,GAAD,CAA7B;;AAEA,eAAK,IAAIG,GAAG,GAAG,CAAV,EAAaC,sBAAsB,GAAGhB,OAAO,CAACiB,iCAAR,CAA0CH,SAA1C,CAA3C,EAAiGC,GAAG,GAAGC,sBAAsB,CAACH,MAA9H,EAAsIE,GAAG,EAAzI,EAA6I;AAC3I,gBAAIG,QAAQ,GAAGF,sBAAsB,CAACD,GAAD,CAArC;AACAN,YAAAA,gBAAgB,CAACS,QAAQ,CAACC,IAAT,CAAcC,KAAf,CAAhB,GAAwC,IAAxC;AACD;AACF;;AAED,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGnB,YAAY,CAACW,MAArC,EAA6CQ,GAAG,EAAhD,EAAoD;AAClD,cAAIC,WAAW,GAAGpB,YAAY,CAACmB,GAAD,CAA9B;AACA,cAAIE,QAAQ,GAAGD,WAAW,CAACH,IAAZ,CAAiBC,KAAhC;;AAEA,cAAIX,gBAAgB,CAACc,QAAD,CAAhB,KAA+B,IAAnC,EAAyC;AACvCvB,YAAAA,OAAO,CAACwB,WAAR,CAAoB,IAAI1B,YAAJ,CAAiB,cAAc2B,MAAd,CAAqBF,QAArB,EAA+B,mBAA/B,CAAjB,EAAsED,WAAtE,CAApB;AACD;AACF;AACF;AArBO;AATL,GAAP;AAiCD","sourcesContent":["import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * No unused fragments\n *\n * A GraphQL document is only valid if all fragment definitions are spread\n * within operations, or spread within other fragments spread within operations.\n */\nexport function NoUnusedFragmentsRule(context) {\n  var operationDefs = [];\n  var fragmentDefs = [];\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      operationDefs.push(node);\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      fragmentDefs.push(node);\n      return false;\n    },\n    Document: {\n      leave: function leave() {\n        var fragmentNameUsed = Object.create(null);\n\n        for (var _i2 = 0; _i2 < operationDefs.length; _i2++) {\n          var operation = operationDefs[_i2];\n\n          for (var _i4 = 0, _context$getRecursive2 = context.getRecursivelyReferencedFragments(operation); _i4 < _context$getRecursive2.length; _i4++) {\n            var fragment = _context$getRecursive2[_i4];\n            fragmentNameUsed[fragment.name.value] = true;\n          }\n        }\n\n        for (var _i6 = 0; _i6 < fragmentDefs.length; _i6++) {\n          var fragmentDef = fragmentDefs[_i6];\n          var fragName = fragmentDef.name.value;\n\n          if (fragmentNameUsed[fragName] !== true) {\n            context.reportError(new GraphQLError(\"Fragment \\\"\".concat(fragName, \"\\\" is never used.\"), fragmentDef));\n          }\n        }\n      }\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}