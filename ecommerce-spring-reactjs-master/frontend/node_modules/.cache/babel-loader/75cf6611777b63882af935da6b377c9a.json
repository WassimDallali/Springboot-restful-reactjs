{"ast":null,"code":"import { Observable } from \"./Observable.js\";\nexport function fixObservableSubclass(subclass) {\n  function set(key) {\n    Object.defineProperty(subclass, key, {\n      value: Observable\n    });\n  }\n\n  if (typeof Symbol === \"function\" && Symbol.species) {\n    set(Symbol.species);\n  }\n\n  set(\"@@species\");\n  return subclass;\n}","map":{"version":3,"sources":["../../../src/utilities/observables/subclassing.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,iBAA3B;AAUA,OAAM,SAAU,qBAAV,CAEJ,QAFI,EAEO;AACX,WAAS,GAAT,CAAa,GAAb,EAAiC;AAI/B,IAAA,MAAM,CAAC,cAAP,CAAsB,QAAtB,EAAgC,GAAhC,EAAqC;AAAE,MAAA,KAAK,EAAE;AAAT,KAArC;AACD;;AACD,MAAI,OAAO,MAAP,KAAkB,UAAlB,IAAgC,MAAM,CAAC,OAA3C,EAAoD;AAClD,IAAA,GAAG,CAAC,MAAM,CAAC,OAAR,CAAH;AACD;;AAID,EAAA,GAAG,CAAC,WAAD,CAAH;AACA,SAAO,QAAP;AACD","sourcesContent":["import { Observable } from \"./Observable\";\n\n// Generic implementations of Observable.prototype methods like map and\n// filter need to know how to create a new Observable from an Observable\n// subclass (like Concast or ObservableQuery). Those methods assume\n// (perhaps unwisely?) that they can call the subtype's constructor with a\n// Subscriber function, even though the subclass constructor might expect\n// different parameters. Defining this static Symbol.species property on\n// the subclass is a hint to generic Observable code to use the default\n// constructor instead of trying to do `new Subclass(observer => ...)`.\nexport function fixObservableSubclass<\n  S extends new (...args: any[]) => Observable<any>,\n>(subclass: S): S {\n  function set(key: symbol | string) {\n    // Object.defineProperty is necessary because the Symbol.species\n    // property is a getter by default in modern JS environments, so we\n    // can't assign to it with a normal assignment expression.\n    Object.defineProperty(subclass, key, { value: Observable });\n  }\n  if (typeof Symbol === \"function\" && Symbol.species) {\n    set(Symbol.species);\n  }\n  // The \"@@species\" string is used as a fake Symbol.species value in some\n  // polyfill systems (including the SymbolSpecies variable used by\n  // zen-observable), so we should set it as well, to be safe.\n  set(\"@@species\");\n  return subclass;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}