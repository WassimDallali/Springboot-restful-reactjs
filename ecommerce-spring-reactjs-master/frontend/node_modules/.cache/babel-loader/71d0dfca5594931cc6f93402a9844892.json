{"ast":null,"code":"import inspect from \"../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"./GraphQLError.mjs\";\n/**\n * Given an arbitrary value, presumably thrown while attempting to execute a\n * GraphQL operation, produce a new GraphQLError aware of the location in the\n * document responsible for the original Error.\n */\n\nexport function locatedError(rawOriginalError, nodes, path) {\n  var _nodes; // Sometimes a non-error is thrown, wrap it as an Error instance to ensure a consistent Error interface.\n\n\n  var originalError = rawOriginalError instanceof Error ? rawOriginalError : new Error('Unexpected error value: ' + inspect(rawOriginalError)); // Note: this uses a brand-check to support GraphQL errors originating from other contexts.\n\n  if (Array.isArray(originalError.path)) {\n    return originalError;\n  }\n\n  return new GraphQLError(originalError.message, (_nodes = originalError.nodes) !== null && _nodes !== void 0 ? _nodes : nodes, originalError.source, originalError.positions, path, originalError);\n}","map":{"version":3,"sources":["C:/Users/HP/Desktop/project/ecommerce-spring-reactjs-master/frontend/node_modules/graphql/error/locatedError.mjs"],"names":["inspect","GraphQLError","locatedError","rawOriginalError","nodes","path","_nodes","originalError","Error","Array","isArray","message","source","positions"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,wBAApB;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,YAAT,CAAsBC,gBAAtB,EAAwCC,KAAxC,EAA+CC,IAA/C,EAAqD;AAC1D,MAAIC,MAAJ,CAD0D,CAG1D;;;AACA,MAAIC,aAAa,GAAGJ,gBAAgB,YAAYK,KAA5B,GAAoCL,gBAApC,GAAuD,IAAIK,KAAJ,CAAU,6BAA6BR,OAAO,CAACG,gBAAD,CAA9C,CAA3E,CAJ0D,CAIoF;;AAE9I,MAAIM,KAAK,CAACC,OAAN,CAAcH,aAAa,CAACF,IAA5B,CAAJ,EAAuC;AACrC,WAAOE,aAAP;AACD;;AAED,SAAO,IAAIN,YAAJ,CAAiBM,aAAa,CAACI,OAA/B,EAAwC,CAACL,MAAM,GAAGC,aAAa,CAACH,KAAxB,MAAmC,IAAnC,IAA2CE,MAAM,KAAK,KAAK,CAA3D,GAA+DA,MAA/D,GAAwEF,KAAhH,EAAuHG,aAAa,CAACK,MAArI,EAA6IL,aAAa,CAACM,SAA3J,EAAsKR,IAAtK,EAA4KE,aAA5K,CAAP;AACD","sourcesContent":["import inspect from \"../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"./GraphQLError.mjs\";\n/**\n * Given an arbitrary value, presumably thrown while attempting to execute a\n * GraphQL operation, produce a new GraphQLError aware of the location in the\n * document responsible for the original Error.\n */\n\nexport function locatedError(rawOriginalError, nodes, path) {\n  var _nodes;\n\n  // Sometimes a non-error is thrown, wrap it as an Error instance to ensure a consistent Error interface.\n  var originalError = rawOriginalError instanceof Error ? rawOriginalError : new Error('Unexpected error value: ' + inspect(rawOriginalError)); // Note: this uses a brand-check to support GraphQL errors originating from other contexts.\n\n  if (Array.isArray(originalError.path)) {\n    return originalError;\n  }\n\n  return new GraphQLError(originalError.message, (_nodes = originalError.nodes) !== null && _nodes !== void 0 ? _nodes : nodes, originalError.source, originalError.positions, path, originalError);\n}\n"]},"metadata":{},"sourceType":"module"}