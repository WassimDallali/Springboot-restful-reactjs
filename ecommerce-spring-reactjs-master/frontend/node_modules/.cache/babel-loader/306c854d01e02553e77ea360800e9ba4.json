{"ast":null,"code":"'use strict';\n\nvar required = require('requires-port'),\n    qs = require('querystringify'),\n    slashes = /^[A-Za-z][A-Za-z0-9+-.]*:[\\\\/]+/,\n    protocolre = /^([a-z][a-z0-9.+-]*:)?([\\\\/]{1,})?([\\S\\s]*)/i,\n    whitespace = '[\\\\x09\\\\x0A\\\\x0B\\\\x0C\\\\x0D\\\\x20\\\\xA0\\\\u1680\\\\u180E\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200A\\\\u202F\\\\u205F\\\\u3000\\\\u2028\\\\u2029\\\\uFEFF]',\n    left = new RegExp('^' + whitespace + '+');\n/**\n * Trim a given string.\n *\n * @param {String} str String to trim.\n * @public\n */\n\n\nfunction trimLeft(str) {\n  return (str ? str : '').toString().replace(left, '');\n}\n/**\n * These are the parse rules for the URL parser, it informs the parser\n * about:\n *\n * 0. The char it Needs to parse, if it's a string it should be done using\n *    indexOf, RegExp using exec and NaN means set as current value.\n * 1. The property we should set when parsing this value.\n * 2. Indication if it's backwards or forward parsing, when set as number it's\n *    the value of extra chars that should be split off.\n * 3. Inherit from location if non existing in the parser.\n * 4. `toLowerCase` the resulting value.\n */\n\n\nvar rules = [['#', 'hash'], // Extract from the back.\n['?', 'query'], // Extract from the back.\nfunction sanitize(address) {\n  // Sanitize what is left of the address\n  return address.replace('\\\\', '/');\n}, ['/', 'pathname'], // Extract from the back.\n['@', 'auth', 1], // Extract from the front.\n[NaN, 'host', undefined, 1, 1], // Set left over value.\n[/:(\\d+)$/, 'port', undefined, 1], // RegExp the back.\n[NaN, 'hostname', undefined, 1, 1] // Set left over.\n];\n/**\n * These properties should not be copied or inherited from. This is only needed\n * for all non blob URL's as a blob URL does not include a hash, only the\n * origin.\n *\n * @type {Object}\n * @private\n */\n\nvar ignore = {\n  hash: 1,\n  query: 1\n};\n/**\n * The location object differs when your code is loaded through a normal page,\n * Worker or through a worker using a blob. And with the blobble begins the\n * trouble as the location object will contain the URL of the blob, not the\n * location of the page where our code is loaded in. The actual origin is\n * encoded in the `pathname` so we can thankfully generate a good \"default\"\n * location from it so we can generate proper relative URL's again.\n *\n * @param {Object|String} loc Optional default location object.\n * @returns {Object} lolcation object.\n * @public\n */\n\nfunction lolcation(loc) {\n  var globalVar;\n  if (typeof window !== 'undefined') globalVar = window;else if (typeof global !== 'undefined') globalVar = global;else if (typeof self !== 'undefined') globalVar = self;else globalVar = {};\n  var location = globalVar.location || {};\n  loc = loc || location;\n  var finaldestination = {},\n      type = typeof loc,\n      key;\n\n  if ('blob:' === loc.protocol) {\n    finaldestination = new Url(unescape(loc.pathname), {});\n  } else if ('string' === type) {\n    finaldestination = new Url(loc, {});\n\n    for (key in ignore) delete finaldestination[key];\n  } else if ('object' === type) {\n    for (key in loc) {\n      if (key in ignore) continue;\n      finaldestination[key] = loc[key];\n    }\n\n    if (finaldestination.slashes === undefined) {\n      finaldestination.slashes = slashes.test(loc.href);\n    }\n  }\n\n  return finaldestination;\n}\n/**\n * @typedef ProtocolExtract\n * @type Object\n * @property {String} protocol Protocol matched in the URL, in lowercase.\n * @property {Boolean} slashes `true` if protocol is followed by \"//\", else `false`.\n * @property {String} rest Rest of the URL that is not part of the protocol.\n */\n\n/**\n * Extract protocol information from a URL with/without double slash (\"//\").\n *\n * @param {String} address URL we want to extract from.\n * @return {ProtocolExtract} Extracted information.\n * @private\n */\n\n\nfunction extractProtocol(address) {\n  address = trimLeft(address);\n  var match = protocolre.exec(address),\n      protocol = match[1] ? match[1].toLowerCase() : '',\n      slashes = !!(match[2] && match[2].length >= 2),\n      rest = match[2] && match[2].length === 1 ? '/' + match[3] : match[3];\n  return {\n    protocol: protocol,\n    slashes: slashes,\n    rest: rest\n  };\n}\n/**\n * Resolve a relative URL pathname against a base URL pathname.\n *\n * @param {String} relative Pathname of the relative URL.\n * @param {String} base Pathname of the base URL.\n * @return {String} Resolved pathname.\n * @private\n */\n\n\nfunction resolve(relative, base) {\n  if (relative === '') return base;\n  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/')),\n      i = path.length,\n      last = path[i - 1],\n      unshift = false,\n      up = 0;\n\n  while (i--) {\n    if (path[i] === '.') {\n      path.splice(i, 1);\n    } else if (path[i] === '..') {\n      path.splice(i, 1);\n      up++;\n    } else if (up) {\n      if (i === 0) unshift = true;\n      path.splice(i, 1);\n      up--;\n    }\n  }\n\n  if (unshift) path.unshift('');\n  if (last === '.' || last === '..') path.push('');\n  return path.join('/');\n}\n/**\n * The actual URL instance. Instead of returning an object we've opted-in to\n * create an actual constructor as it's much more memory efficient and\n * faster and it pleases my OCD.\n *\n * It is worth noting that we should not use `URL` as class name to prevent\n * clashes with the global URL instance that got introduced in browsers.\n *\n * @constructor\n * @param {String} address URL we want to parse.\n * @param {Object|String} [location] Location defaults for relative paths.\n * @param {Boolean|Function} [parser] Parser for the query string.\n * @private\n */\n\n\nfunction Url(address, location, parser) {\n  address = trimLeft(address);\n\n  if (!(this instanceof Url)) {\n    return new Url(address, location, parser);\n  }\n\n  var relative,\n      extracted,\n      parse,\n      instruction,\n      index,\n      key,\n      instructions = rules.slice(),\n      type = typeof location,\n      url = this,\n      i = 0; //\n  // The following if statements allows this module two have compatibility with\n  // 2 different API:\n  //\n  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments\n  //    where the boolean indicates that the query string should also be parsed.\n  //\n  // 2. The `URL` interface of the browser which accepts a URL, object as\n  //    arguments. The supplied object will be used as default values / fall-back\n  //    for relative paths.\n  //\n\n  if ('object' !== type && 'string' !== type) {\n    parser = location;\n    location = null;\n  }\n\n  if (parser && 'function' !== typeof parser) parser = qs.parse;\n  location = lolcation(location); //\n  // Extract protocol information before running the instructions.\n  //\n\n  extracted = extractProtocol(address || '');\n  relative = !extracted.protocol && !extracted.slashes;\n  url.slashes = extracted.slashes || relative && location.slashes;\n  url.protocol = extracted.protocol || location.protocol || '';\n  address = extracted.rest; //\n  // When the authority component is absent the URL starts with a path\n  // component.\n  //\n\n  if (!extracted.slashes) instructions[3] = [/(.*)/, 'pathname'];\n\n  for (; i < instructions.length; i++) {\n    instruction = instructions[i];\n\n    if (typeof instruction === 'function') {\n      address = instruction(address);\n      continue;\n    }\n\n    parse = instruction[0];\n    key = instruction[1];\n\n    if (parse !== parse) {\n      url[key] = address;\n    } else if ('string' === typeof parse) {\n      if (~(index = address.indexOf(parse))) {\n        if ('number' === typeof instruction[2]) {\n          url[key] = address.slice(0, index);\n          address = address.slice(index + instruction[2]);\n        } else {\n          url[key] = address.slice(index);\n          address = address.slice(0, index);\n        }\n      }\n    } else if (index = parse.exec(address)) {\n      url[key] = index[1];\n      address = address.slice(0, index.index);\n    }\n\n    url[key] = url[key] || (relative && instruction[3] ? location[key] || '' : ''); //\n    // Hostname, host and protocol should be lowercased so they can be used to\n    // create a proper `origin`.\n    //\n\n    if (instruction[4]) url[key] = url[key].toLowerCase();\n  } //\n  // Also parse the supplied query string in to an object. If we're supplied\n  // with a custom parser as function use that instead of the default build-in\n  // parser.\n  //\n\n\n  if (parser) url.query = parser(url.query); //\n  // If the URL is relative, resolve the pathname against the base URL.\n  //\n\n  if (relative && location.slashes && url.pathname.charAt(0) !== '/' && (url.pathname !== '' || location.pathname !== '')) {\n    url.pathname = resolve(url.pathname, location.pathname);\n  } //\n  // Default to a / for pathname if none exists. This normalizes the URL\n  // to always have a /\n  //\n\n\n  if (url.pathname.charAt(0) !== '/' && url.hostname) {\n    url.pathname = '/' + url.pathname;\n  } //\n  // We should not add port numbers if they are already the default port number\n  // for a given protocol. As the host also contains the port number we're going\n  // override it with the hostname which contains no port number.\n  //\n\n\n  if (!required(url.port, url.protocol)) {\n    url.host = url.hostname;\n    url.port = '';\n  } //\n  // Parse down the `auth` for the username and password.\n  //\n\n\n  url.username = url.password = '';\n\n  if (url.auth) {\n    instruction = url.auth.split(':');\n    url.username = instruction[0] || '';\n    url.password = instruction[1] || '';\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:' ? url.protocol + '//' + url.host : 'null'; //\n  // The href is just the compiled result.\n  //\n\n  url.href = url.toString();\n}\n/**\n * This is convenience method for changing properties in the URL instance to\n * insure that they all propagate correctly.\n *\n * @param {String} part          Property we need to adjust.\n * @param {Mixed} value          The newly assigned value.\n * @param {Boolean|Function} fn  When setting the query, it will be the function\n *                               used to parse the query.\n *                               When setting the protocol, double slash will be\n *                               removed from the final url if it is true.\n * @returns {URL} URL instance for chaining.\n * @public\n */\n\n\nfunction set(part, value, fn) {\n  var url = this;\n\n  switch (part) {\n    case 'query':\n      if ('string' === typeof value && value.length) {\n        value = (fn || qs.parse)(value);\n      }\n\n      url[part] = value;\n      break;\n\n    case 'port':\n      url[part] = value;\n\n      if (!required(value, url.protocol)) {\n        url.host = url.hostname;\n        url[part] = '';\n      } else if (value) {\n        url.host = url.hostname + ':' + value;\n      }\n\n      break;\n\n    case 'hostname':\n      url[part] = value;\n      if (url.port) value += ':' + url.port;\n      url.host = value;\n      break;\n\n    case 'host':\n      url[part] = value;\n\n      if (/:\\d+$/.test(value)) {\n        value = value.split(':');\n        url.port = value.pop();\n        url.hostname = value.join(':');\n      } else {\n        url.hostname = value;\n        url.port = '';\n      }\n\n      break;\n\n    case 'protocol':\n      url.protocol = value.toLowerCase();\n      url.slashes = !fn;\n      break;\n\n    case 'pathname':\n    case 'hash':\n      if (value) {\n        var char = part === 'pathname' ? '/' : '#';\n        url[part] = value.charAt(0) !== char ? char + value : value;\n      } else {\n        url[part] = value;\n      }\n\n      break;\n\n    default:\n      url[part] = value;\n  }\n\n  for (var i = 0; i < rules.length; i++) {\n    var ins = rules[i];\n    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:' ? url.protocol + '//' + url.host : 'null';\n  url.href = url.toString();\n  return url;\n}\n/**\n * Transform the properties back in to a valid and full URL string.\n *\n * @param {Function} stringify Optional query stringify function.\n * @returns {String} Compiled version of the URL.\n * @public\n */\n\n\nfunction toString(stringify) {\n  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;\n  var query,\n      url = this,\n      protocol = url.protocol;\n  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';\n  var result = protocol + (url.slashes ? '//' : '');\n\n  if (url.username) {\n    result += url.username;\n    if (url.password) result += ':' + url.password;\n    result += '@';\n  }\n\n  result += url.host + url.pathname;\n  query = 'object' === typeof url.query ? stringify(url.query) : url.query;\n  if (query) result += '?' !== query.charAt(0) ? '?' + query : query;\n  if (url.hash) result += url.hash;\n  return result;\n}\n\nUrl.prototype = {\n  set: set,\n  toString: toString\n}; //\n// Expose the URL parser and some additional properties that might be useful for\n// others or testing.\n//\n\nUrl.extractProtocol = extractProtocol;\nUrl.location = lolcation;\nUrl.trimLeft = trimLeft;\nUrl.qs = qs;\nmodule.exports = Url;","map":{"version":3,"sources":["C:/Users/HP/Desktop/project/ecommerce-spring-reactjs-master/frontend/node_modules/url-parse/index.js"],"names":["required","require","qs","slashes","protocolre","whitespace","left","RegExp","trimLeft","str","toString","replace","rules","sanitize","address","NaN","undefined","ignore","hash","query","lolcation","loc","globalVar","window","global","self","location","finaldestination","type","key","protocol","Url","unescape","pathname","test","href","extractProtocol","match","exec","toLowerCase","length","rest","resolve","relative","base","path","split","slice","concat","i","last","unshift","up","splice","push","join","parser","extracted","parse","instruction","index","instructions","url","indexOf","charAt","hostname","port","host","username","password","auth","origin","set","part","value","fn","pop","char","ins","stringify","result","prototype","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,eAAD,CAAtB;AAAA,IACIC,EAAE,GAAGD,OAAO,CAAC,gBAAD,CADhB;AAAA,IAEIE,OAAO,GAAG,iCAFd;AAAA,IAGIC,UAAU,GAAG,8CAHjB;AAAA,IAIIC,UAAU,GAAG,4KAJjB;AAAA,IAKIC,IAAI,GAAG,IAAIC,MAAJ,CAAW,MAAKF,UAAL,GAAiB,GAA5B,CALX;AAOA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,QAAT,CAAkBC,GAAlB,EAAuB;AACrB,SAAO,CAACA,GAAG,GAAGA,GAAH,GAAS,EAAb,EAAiBC,QAAjB,GAA4BC,OAA5B,CAAoCL,IAApC,EAA0C,EAA1C,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIM,KAAK,GAAG,CACV,CAAC,GAAD,EAAM,MAAN,CADU,EAC4B;AACtC,CAAC,GAAD,EAAM,OAAN,CAFU,EAE4B;AACtC,SAASC,QAAT,CAAkBC,OAAlB,EAA2B;AAAW;AACpC,SAAOA,OAAO,CAACH,OAAR,CAAgB,IAAhB,EAAsB,GAAtB,CAAP;AACD,CALS,EAMV,CAAC,GAAD,EAAM,UAAN,CANU,EAM4B;AACtC,CAAC,GAAD,EAAM,MAAN,EAAc,CAAd,CAPU,EAO4B;AACtC,CAACI,GAAD,EAAM,MAAN,EAAcC,SAAd,EAAyB,CAAzB,EAA4B,CAA5B,CARU,EAQ4B;AACtC,CAAC,SAAD,EAAY,MAAZ,EAAoBA,SAApB,EAA+B,CAA/B,CATU,EAS4B;AACtC,CAACD,GAAD,EAAM,UAAN,EAAkBC,SAAlB,EAA6B,CAA7B,EAAgC,CAAhC,CAVU,CAU4B;AAV5B,CAAZ;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,MAAM,GAAG;AAAEC,EAAAA,IAAI,EAAE,CAAR;AAAWC,EAAAA,KAAK,EAAE;AAAlB,CAAb;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,CAAmBC,GAAnB,EAAwB;AACtB,MAAIC,SAAJ;AAEA,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmCD,SAAS,GAAGC,MAAZ,CAAnC,KACK,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmCF,SAAS,GAAGE,MAAZ,CAAnC,KACA,IAAI,OAAOC,IAAP,KAAgB,WAApB,EAAiCH,SAAS,GAAGG,IAAZ,CAAjC,KACAH,SAAS,GAAG,EAAZ;AAEL,MAAII,QAAQ,GAAGJ,SAAS,CAACI,QAAV,IAAsB,EAArC;AACAL,EAAAA,GAAG,GAAGA,GAAG,IAAIK,QAAb;AAEA,MAAIC,gBAAgB,GAAG,EAAvB;AAAA,MACIC,IAAI,GAAG,OAAOP,GADlB;AAAA,MAEIQ,GAFJ;;AAIA,MAAI,YAAYR,GAAG,CAACS,QAApB,EAA8B;AAC5BH,IAAAA,gBAAgB,GAAG,IAAII,GAAJ,CAAQC,QAAQ,CAACX,GAAG,CAACY,QAAL,CAAhB,EAAgC,EAAhC,CAAnB;AACD,GAFD,MAEO,IAAI,aAAaL,IAAjB,EAAuB;AAC5BD,IAAAA,gBAAgB,GAAG,IAAII,GAAJ,CAAQV,GAAR,EAAa,EAAb,CAAnB;;AACA,SAAKQ,GAAL,IAAYZ,MAAZ,EAAoB,OAAOU,gBAAgB,CAACE,GAAD,CAAvB;AACrB,GAHM,MAGA,IAAI,aAAaD,IAAjB,EAAuB;AAC5B,SAAKC,GAAL,IAAYR,GAAZ,EAAiB;AACf,UAAIQ,GAAG,IAAIZ,MAAX,EAAmB;AACnBU,MAAAA,gBAAgB,CAACE,GAAD,CAAhB,GAAwBR,GAAG,CAACQ,GAAD,CAA3B;AACD;;AAED,QAAIF,gBAAgB,CAACxB,OAAjB,KAA6Ba,SAAjC,EAA4C;AAC1CW,MAAAA,gBAAgB,CAACxB,OAAjB,GAA2BA,OAAO,CAAC+B,IAAR,CAAab,GAAG,CAACc,IAAjB,CAA3B;AACD;AACF;;AAED,SAAOR,gBAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASS,eAAT,CAAyBtB,OAAzB,EAAkC;AAChCA,EAAAA,OAAO,GAAGN,QAAQ,CAACM,OAAD,CAAlB;AAEA,MAAIuB,KAAK,GAAGjC,UAAU,CAACkC,IAAX,CAAgBxB,OAAhB,CAAZ;AAAA,MACIgB,QAAQ,GAAGO,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAL,CAASE,WAAT,EAAX,GAAoC,EADnD;AAAA,MAEIpC,OAAO,GAAG,CAAC,EAAEkC,KAAK,CAAC,CAAD,CAAL,IAAYA,KAAK,CAAC,CAAD,CAAL,CAASG,MAAT,IAAmB,CAAjC,CAFf;AAAA,MAGIC,IAAI,GAAIJ,KAAK,CAAC,CAAD,CAAL,IAAYA,KAAK,CAAC,CAAD,CAAL,CAASG,MAAT,KAAoB,CAAhC,GAAoC,MAAMH,KAAK,CAAC,CAAD,CAA/C,GAAqDA,KAAK,CAAC,CAAD,CAHtE;AAKA,SAAO;AACLP,IAAAA,QAAQ,EAAEA,QADL;AAEL3B,IAAAA,OAAO,EAAEA,OAFJ;AAGLsC,IAAAA,IAAI,EAAEA;AAHD,GAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,OAAT,CAAiBC,QAAjB,EAA2BC,IAA3B,EAAiC;AAC/B,MAAID,QAAQ,KAAK,EAAjB,EAAqB,OAAOC,IAAP;AAErB,MAAIC,IAAI,GAAG,CAACD,IAAI,IAAI,GAAT,EAAcE,KAAd,CAAoB,GAApB,EAAyBC,KAAzB,CAA+B,CAA/B,EAAkC,CAAC,CAAnC,EAAsCC,MAAtC,CAA6CL,QAAQ,CAACG,KAAT,CAAe,GAAf,CAA7C,CAAX;AAAA,MACIG,CAAC,GAAGJ,IAAI,CAACL,MADb;AAAA,MAEIU,IAAI,GAAGL,IAAI,CAACI,CAAC,GAAG,CAAL,CAFf;AAAA,MAGIE,OAAO,GAAG,KAHd;AAAA,MAIIC,EAAE,GAAG,CAJT;;AAMA,SAAOH,CAAC,EAAR,EAAY;AACV,QAAIJ,IAAI,CAACI,CAAD,CAAJ,KAAY,GAAhB,EAAqB;AACnBJ,MAAAA,IAAI,CAACQ,MAAL,CAAYJ,CAAZ,EAAe,CAAf;AACD,KAFD,MAEO,IAAIJ,IAAI,CAACI,CAAD,CAAJ,KAAY,IAAhB,EAAsB;AAC3BJ,MAAAA,IAAI,CAACQ,MAAL,CAAYJ,CAAZ,EAAe,CAAf;AACAG,MAAAA,EAAE;AACH,KAHM,MAGA,IAAIA,EAAJ,EAAQ;AACb,UAAIH,CAAC,KAAK,CAAV,EAAaE,OAAO,GAAG,IAAV;AACbN,MAAAA,IAAI,CAACQ,MAAL,CAAYJ,CAAZ,EAAe,CAAf;AACAG,MAAAA,EAAE;AACH;AACF;;AAED,MAAID,OAAJ,EAAaN,IAAI,CAACM,OAAL,CAAa,EAAb;AACb,MAAID,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,IAA7B,EAAmCL,IAAI,CAACS,IAAL,CAAU,EAAV;AAEnC,SAAOT,IAAI,CAACU,IAAL,CAAU,GAAV,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASxB,GAAT,CAAajB,OAAb,EAAsBY,QAAtB,EAAgC8B,MAAhC,EAAwC;AACtC1C,EAAAA,OAAO,GAAGN,QAAQ,CAACM,OAAD,CAAlB;;AAEA,MAAI,EAAE,gBAAgBiB,GAAlB,CAAJ,EAA4B;AAC1B,WAAO,IAAIA,GAAJ,CAAQjB,OAAR,EAAiBY,QAAjB,EAA2B8B,MAA3B,CAAP;AACD;;AAED,MAAIb,QAAJ;AAAA,MAAcc,SAAd;AAAA,MAAyBC,KAAzB;AAAA,MAAgCC,WAAhC;AAAA,MAA6CC,KAA7C;AAAA,MAAoD/B,GAApD;AAAA,MACIgC,YAAY,GAAGjD,KAAK,CAACmC,KAAN,EADnB;AAAA,MAEInB,IAAI,GAAG,OAAOF,QAFlB;AAAA,MAGIoC,GAAG,GAAG,IAHV;AAAA,MAIIb,CAAC,GAAG,CAJR,CAPsC,CAatC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAI,aAAarB,IAAb,IAAqB,aAAaA,IAAtC,EAA4C;AAC1C4B,IAAAA,MAAM,GAAG9B,QAAT;AACAA,IAAAA,QAAQ,GAAG,IAAX;AACD;;AAED,MAAI8B,MAAM,IAAI,eAAe,OAAOA,MAApC,EAA4CA,MAAM,GAAGtD,EAAE,CAACwD,KAAZ;AAE5ChC,EAAAA,QAAQ,GAAGN,SAAS,CAACM,QAAD,CAApB,CA/BsC,CAiCtC;AACA;AACA;;AACA+B,EAAAA,SAAS,GAAGrB,eAAe,CAACtB,OAAO,IAAI,EAAZ,CAA3B;AACA6B,EAAAA,QAAQ,GAAG,CAACc,SAAS,CAAC3B,QAAX,IAAuB,CAAC2B,SAAS,CAACtD,OAA7C;AACA2D,EAAAA,GAAG,CAAC3D,OAAJ,GAAcsD,SAAS,CAACtD,OAAV,IAAqBwC,QAAQ,IAAIjB,QAAQ,CAACvB,OAAxD;AACA2D,EAAAA,GAAG,CAAChC,QAAJ,GAAe2B,SAAS,CAAC3B,QAAV,IAAsBJ,QAAQ,CAACI,QAA/B,IAA2C,EAA1D;AACAhB,EAAAA,OAAO,GAAG2C,SAAS,CAAChB,IAApB,CAxCsC,CA0CtC;AACA;AACA;AACA;;AACA,MAAI,CAACgB,SAAS,CAACtD,OAAf,EAAwB0D,YAAY,CAAC,CAAD,CAAZ,GAAkB,CAAC,MAAD,EAAS,UAAT,CAAlB;;AAExB,SAAOZ,CAAC,GAAGY,YAAY,CAACrB,MAAxB,EAAgCS,CAAC,EAAjC,EAAqC;AACnCU,IAAAA,WAAW,GAAGE,YAAY,CAACZ,CAAD,CAA1B;;AAEA,QAAI,OAAOU,WAAP,KAAuB,UAA3B,EAAuC;AACrC7C,MAAAA,OAAO,GAAG6C,WAAW,CAAC7C,OAAD,CAArB;AACA;AACD;;AAED4C,IAAAA,KAAK,GAAGC,WAAW,CAAC,CAAD,CAAnB;AACA9B,IAAAA,GAAG,GAAG8B,WAAW,CAAC,CAAD,CAAjB;;AAEA,QAAID,KAAK,KAAKA,KAAd,EAAqB;AACnBI,MAAAA,GAAG,CAACjC,GAAD,CAAH,GAAWf,OAAX;AACD,KAFD,MAEO,IAAI,aAAa,OAAO4C,KAAxB,EAA+B;AACpC,UAAI,EAAEE,KAAK,GAAG9C,OAAO,CAACiD,OAAR,CAAgBL,KAAhB,CAAV,CAAJ,EAAuC;AACrC,YAAI,aAAa,OAAOC,WAAW,CAAC,CAAD,CAAnC,EAAwC;AACtCG,UAAAA,GAAG,CAACjC,GAAD,CAAH,GAAWf,OAAO,CAACiC,KAAR,CAAc,CAAd,EAAiBa,KAAjB,CAAX;AACA9C,UAAAA,OAAO,GAAGA,OAAO,CAACiC,KAAR,CAAca,KAAK,GAAGD,WAAW,CAAC,CAAD,CAAjC,CAAV;AACD,SAHD,MAGO;AACLG,UAAAA,GAAG,CAACjC,GAAD,CAAH,GAAWf,OAAO,CAACiC,KAAR,CAAca,KAAd,CAAX;AACA9C,UAAAA,OAAO,GAAGA,OAAO,CAACiC,KAAR,CAAc,CAAd,EAAiBa,KAAjB,CAAV;AACD;AACF;AACF,KAVM,MAUA,IAAKA,KAAK,GAAGF,KAAK,CAACpB,IAAN,CAAWxB,OAAX,CAAb,EAAmC;AACxCgD,MAAAA,GAAG,CAACjC,GAAD,CAAH,GAAW+B,KAAK,CAAC,CAAD,CAAhB;AACA9C,MAAAA,OAAO,GAAGA,OAAO,CAACiC,KAAR,CAAc,CAAd,EAAiBa,KAAK,CAACA,KAAvB,CAAV;AACD;;AAEDE,IAAAA,GAAG,CAACjC,GAAD,CAAH,GAAWiC,GAAG,CAACjC,GAAD,CAAH,KACTc,QAAQ,IAAIgB,WAAW,CAAC,CAAD,CAAvB,GAA6BjC,QAAQ,CAACG,GAAD,CAAR,IAAiB,EAA9C,GAAmD,EAD1C,CAAX,CA5BmC,CAgCnC;AACA;AACA;AACA;;AACA,QAAI8B,WAAW,CAAC,CAAD,CAAf,EAAoBG,GAAG,CAACjC,GAAD,CAAH,GAAWiC,GAAG,CAACjC,GAAD,CAAH,CAASU,WAAT,EAAX;AACrB,GArFqC,CAuFtC;AACA;AACA;AACA;AACA;;;AACA,MAAIiB,MAAJ,EAAYM,GAAG,CAAC3C,KAAJ,GAAYqC,MAAM,CAACM,GAAG,CAAC3C,KAAL,CAAlB,CA5F0B,CA8FtC;AACA;AACA;;AACA,MACIwB,QAAQ,IACPjB,QAAQ,CAACvB,OADV,IAEC2D,GAAG,CAAC7B,QAAJ,CAAa+B,MAAb,CAAoB,CAApB,MAA2B,GAF5B,KAGEF,GAAG,CAAC7B,QAAJ,KAAiB,EAAjB,IAAuBP,QAAQ,CAACO,QAAT,KAAsB,EAH/C,CADJ,EAKE;AACA6B,IAAAA,GAAG,CAAC7B,QAAJ,GAAeS,OAAO,CAACoB,GAAG,CAAC7B,QAAL,EAAeP,QAAQ,CAACO,QAAxB,CAAtB;AACD,GAxGqC,CA0GtC;AACA;AACA;AACA;;;AACA,MAAI6B,GAAG,CAAC7B,QAAJ,CAAa+B,MAAb,CAAoB,CAApB,MAA2B,GAA3B,IAAkCF,GAAG,CAACG,QAA1C,EAAoD;AAClDH,IAAAA,GAAG,CAAC7B,QAAJ,GAAe,MAAM6B,GAAG,CAAC7B,QAAzB;AACD,GAhHqC,CAkHtC;AACA;AACA;AACA;AACA;;;AACA,MAAI,CAACjC,QAAQ,CAAC8D,GAAG,CAACI,IAAL,EAAWJ,GAAG,CAAChC,QAAf,CAAb,EAAuC;AACrCgC,IAAAA,GAAG,CAACK,IAAJ,GAAWL,GAAG,CAACG,QAAf;AACAH,IAAAA,GAAG,CAACI,IAAJ,GAAW,EAAX;AACD,GA1HqC,CA4HtC;AACA;AACA;;;AACAJ,EAAAA,GAAG,CAACM,QAAJ,GAAeN,GAAG,CAACO,QAAJ,GAAe,EAA9B;;AACA,MAAIP,GAAG,CAACQ,IAAR,EAAc;AACZX,IAAAA,WAAW,GAAGG,GAAG,CAACQ,IAAJ,CAASxB,KAAT,CAAe,GAAf,CAAd;AACAgB,IAAAA,GAAG,CAACM,QAAJ,GAAeT,WAAW,CAAC,CAAD,CAAX,IAAkB,EAAjC;AACAG,IAAAA,GAAG,CAACO,QAAJ,GAAeV,WAAW,CAAC,CAAD,CAAX,IAAkB,EAAjC;AACD;;AAEDG,EAAAA,GAAG,CAACS,MAAJ,GAAaT,GAAG,CAAChC,QAAJ,IAAgBgC,GAAG,CAACK,IAApB,IAA4BL,GAAG,CAAChC,QAAJ,KAAiB,OAA7C,GACTgC,GAAG,CAAChC,QAAJ,GAAc,IAAd,GAAoBgC,GAAG,CAACK,IADf,GAET,MAFJ,CAtIsC,CA0ItC;AACA;AACA;;AACAL,EAAAA,GAAG,CAAC3B,IAAJ,GAAW2B,GAAG,CAACpD,QAAJ,EAAX;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS8D,GAAT,CAAaC,IAAb,EAAmBC,KAAnB,EAA0BC,EAA1B,EAA8B;AAC5B,MAAIb,GAAG,GAAG,IAAV;;AAEA,UAAQW,IAAR;AACE,SAAK,OAAL;AACE,UAAI,aAAa,OAAOC,KAApB,IAA6BA,KAAK,CAAClC,MAAvC,EAA+C;AAC7CkC,QAAAA,KAAK,GAAG,CAACC,EAAE,IAAIzE,EAAE,CAACwD,KAAV,EAAiBgB,KAAjB,CAAR;AACD;;AAEDZ,MAAAA,GAAG,CAACW,IAAD,CAAH,GAAYC,KAAZ;AACA;;AAEF,SAAK,MAAL;AACEZ,MAAAA,GAAG,CAACW,IAAD,CAAH,GAAYC,KAAZ;;AAEA,UAAI,CAAC1E,QAAQ,CAAC0E,KAAD,EAAQZ,GAAG,CAAChC,QAAZ,CAAb,EAAoC;AAClCgC,QAAAA,GAAG,CAACK,IAAJ,GAAWL,GAAG,CAACG,QAAf;AACAH,QAAAA,GAAG,CAACW,IAAD,CAAH,GAAY,EAAZ;AACD,OAHD,MAGO,IAAIC,KAAJ,EAAW;AAChBZ,QAAAA,GAAG,CAACK,IAAJ,GAAWL,GAAG,CAACG,QAAJ,GAAc,GAAd,GAAmBS,KAA9B;AACD;;AAED;;AAEF,SAAK,UAAL;AACEZ,MAAAA,GAAG,CAACW,IAAD,CAAH,GAAYC,KAAZ;AAEA,UAAIZ,GAAG,CAACI,IAAR,EAAcQ,KAAK,IAAI,MAAKZ,GAAG,CAACI,IAAlB;AACdJ,MAAAA,GAAG,CAACK,IAAJ,GAAWO,KAAX;AACA;;AAEF,SAAK,MAAL;AACEZ,MAAAA,GAAG,CAACW,IAAD,CAAH,GAAYC,KAAZ;;AAEA,UAAI,QAAQxC,IAAR,CAAawC,KAAb,CAAJ,EAAyB;AACvBA,QAAAA,KAAK,GAAGA,KAAK,CAAC5B,KAAN,CAAY,GAAZ,CAAR;AACAgB,QAAAA,GAAG,CAACI,IAAJ,GAAWQ,KAAK,CAACE,GAAN,EAAX;AACAd,QAAAA,GAAG,CAACG,QAAJ,GAAeS,KAAK,CAACnB,IAAN,CAAW,GAAX,CAAf;AACD,OAJD,MAIO;AACLO,QAAAA,GAAG,CAACG,QAAJ,GAAeS,KAAf;AACAZ,QAAAA,GAAG,CAACI,IAAJ,GAAW,EAAX;AACD;;AAED;;AAEF,SAAK,UAAL;AACEJ,MAAAA,GAAG,CAAChC,QAAJ,GAAe4C,KAAK,CAACnC,WAAN,EAAf;AACAuB,MAAAA,GAAG,CAAC3D,OAAJ,GAAc,CAACwE,EAAf;AACA;;AAEF,SAAK,UAAL;AACA,SAAK,MAAL;AACE,UAAID,KAAJ,EAAW;AACT,YAAIG,IAAI,GAAGJ,IAAI,KAAK,UAAT,GAAsB,GAAtB,GAA4B,GAAvC;AACAX,QAAAA,GAAG,CAACW,IAAD,CAAH,GAAYC,KAAK,CAACV,MAAN,CAAa,CAAb,MAAoBa,IAApB,GAA2BA,IAAI,GAAGH,KAAlC,GAA0CA,KAAtD;AACD,OAHD,MAGO;AACLZ,QAAAA,GAAG,CAACW,IAAD,CAAH,GAAYC,KAAZ;AACD;;AACD;;AAEF;AACEZ,MAAAA,GAAG,CAACW,IAAD,CAAH,GAAYC,KAAZ;AA1DJ;;AA6DA,OAAK,IAAIzB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrC,KAAK,CAAC4B,MAA1B,EAAkCS,CAAC,EAAnC,EAAuC;AACrC,QAAI6B,GAAG,GAAGlE,KAAK,CAACqC,CAAD,CAAf;AAEA,QAAI6B,GAAG,CAAC,CAAD,CAAP,EAAYhB,GAAG,CAACgB,GAAG,CAAC,CAAD,CAAJ,CAAH,GAAchB,GAAG,CAACgB,GAAG,CAAC,CAAD,CAAJ,CAAH,CAAYvC,WAAZ,EAAd;AACb;;AAEDuB,EAAAA,GAAG,CAACS,MAAJ,GAAaT,GAAG,CAAChC,QAAJ,IAAgBgC,GAAG,CAACK,IAApB,IAA4BL,GAAG,CAAChC,QAAJ,KAAiB,OAA7C,GACTgC,GAAG,CAAChC,QAAJ,GAAc,IAAd,GAAoBgC,GAAG,CAACK,IADf,GAET,MAFJ;AAIAL,EAAAA,GAAG,CAAC3B,IAAJ,GAAW2B,GAAG,CAACpD,QAAJ,EAAX;AAEA,SAAOoD,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASpD,QAAT,CAAkBqE,SAAlB,EAA6B;AAC3B,MAAI,CAACA,SAAD,IAAc,eAAe,OAAOA,SAAxC,EAAmDA,SAAS,GAAG7E,EAAE,CAAC6E,SAAf;AAEnD,MAAI5D,KAAJ;AAAA,MACI2C,GAAG,GAAG,IADV;AAAA,MAEIhC,QAAQ,GAAGgC,GAAG,CAAChC,QAFnB;AAIA,MAAIA,QAAQ,IAAIA,QAAQ,CAACkC,MAAT,CAAgBlC,QAAQ,CAACU,MAAT,GAAkB,CAAlC,MAAyC,GAAzD,EAA8DV,QAAQ,IAAI,GAAZ;AAE9D,MAAIkD,MAAM,GAAGlD,QAAQ,IAAIgC,GAAG,CAAC3D,OAAJ,GAAc,IAAd,GAAqB,EAAzB,CAArB;;AAEA,MAAI2D,GAAG,CAACM,QAAR,EAAkB;AAChBY,IAAAA,MAAM,IAAIlB,GAAG,CAACM,QAAd;AACA,QAAIN,GAAG,CAACO,QAAR,EAAkBW,MAAM,IAAI,MAAKlB,GAAG,CAACO,QAAnB;AAClBW,IAAAA,MAAM,IAAI,GAAV;AACD;;AAEDA,EAAAA,MAAM,IAAIlB,GAAG,CAACK,IAAJ,GAAWL,GAAG,CAAC7B,QAAzB;AAEAd,EAAAA,KAAK,GAAG,aAAa,OAAO2C,GAAG,CAAC3C,KAAxB,GAAgC4D,SAAS,CAACjB,GAAG,CAAC3C,KAAL,CAAzC,GAAuD2C,GAAG,CAAC3C,KAAnE;AACA,MAAIA,KAAJ,EAAW6D,MAAM,IAAI,QAAQ7D,KAAK,CAAC6C,MAAN,CAAa,CAAb,CAAR,GAA0B,MAAK7C,KAA/B,GAAuCA,KAAjD;AAEX,MAAI2C,GAAG,CAAC5C,IAAR,EAAc8D,MAAM,IAAIlB,GAAG,CAAC5C,IAAd;AAEd,SAAO8D,MAAP;AACD;;AAEDjD,GAAG,CAACkD,SAAJ,GAAgB;AAAET,EAAAA,GAAG,EAAEA,GAAP;AAAY9D,EAAAA,QAAQ,EAAEA;AAAtB,CAAhB,C,CAEA;AACA;AACA;AACA;;AACAqB,GAAG,CAACK,eAAJ,GAAsBA,eAAtB;AACAL,GAAG,CAACL,QAAJ,GAAeN,SAAf;AACAW,GAAG,CAACvB,QAAJ,GAAeA,QAAf;AACAuB,GAAG,CAAC7B,EAAJ,GAASA,EAAT;AAEAgF,MAAM,CAACC,OAAP,GAAiBpD,GAAjB","sourcesContent":["'use strict';\n\nvar required = require('requires-port')\n  , qs = require('querystringify')\n  , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:[\\\\/]+/\n  , protocolre = /^([a-z][a-z0-9.+-]*:)?([\\\\/]{1,})?([\\S\\s]*)/i\n  , whitespace = '[\\\\x09\\\\x0A\\\\x0B\\\\x0C\\\\x0D\\\\x20\\\\xA0\\\\u1680\\\\u180E\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200A\\\\u202F\\\\u205F\\\\u3000\\\\u2028\\\\u2029\\\\uFEFF]'\n  , left = new RegExp('^'+ whitespace +'+');\n\n/**\n * Trim a given string.\n *\n * @param {String} str String to trim.\n * @public\n */\nfunction trimLeft(str) {\n  return (str ? str : '').toString().replace(left, '');\n}\n\n/**\n * These are the parse rules for the URL parser, it informs the parser\n * about:\n *\n * 0. The char it Needs to parse, if it's a string it should be done using\n *    indexOf, RegExp using exec and NaN means set as current value.\n * 1. The property we should set when parsing this value.\n * 2. Indication if it's backwards or forward parsing, when set as number it's\n *    the value of extra chars that should be split off.\n * 3. Inherit from location if non existing in the parser.\n * 4. `toLowerCase` the resulting value.\n */\nvar rules = [\n  ['#', 'hash'],                        // Extract from the back.\n  ['?', 'query'],                       // Extract from the back.\n  function sanitize(address) {          // Sanitize what is left of the address\n    return address.replace('\\\\', '/');\n  },\n  ['/', 'pathname'],                    // Extract from the back.\n  ['@', 'auth', 1],                     // Extract from the front.\n  [NaN, 'host', undefined, 1, 1],       // Set left over value.\n  [/:(\\d+)$/, 'port', undefined, 1],    // RegExp the back.\n  [NaN, 'hostname', undefined, 1, 1]    // Set left over.\n];\n\n/**\n * These properties should not be copied or inherited from. This is only needed\n * for all non blob URL's as a blob URL does not include a hash, only the\n * origin.\n *\n * @type {Object}\n * @private\n */\nvar ignore = { hash: 1, query: 1 };\n\n/**\n * The location object differs when your code is loaded through a normal page,\n * Worker or through a worker using a blob. And with the blobble begins the\n * trouble as the location object will contain the URL of the blob, not the\n * location of the page where our code is loaded in. The actual origin is\n * encoded in the `pathname` so we can thankfully generate a good \"default\"\n * location from it so we can generate proper relative URL's again.\n *\n * @param {Object|String} loc Optional default location object.\n * @returns {Object} lolcation object.\n * @public\n */\nfunction lolcation(loc) {\n  var globalVar;\n\n  if (typeof window !== 'undefined') globalVar = window;\n  else if (typeof global !== 'undefined') globalVar = global;\n  else if (typeof self !== 'undefined') globalVar = self;\n  else globalVar = {};\n\n  var location = globalVar.location || {};\n  loc = loc || location;\n\n  var finaldestination = {}\n    , type = typeof loc\n    , key;\n\n  if ('blob:' === loc.protocol) {\n    finaldestination = new Url(unescape(loc.pathname), {});\n  } else if ('string' === type) {\n    finaldestination = new Url(loc, {});\n    for (key in ignore) delete finaldestination[key];\n  } else if ('object' === type) {\n    for (key in loc) {\n      if (key in ignore) continue;\n      finaldestination[key] = loc[key];\n    }\n\n    if (finaldestination.slashes === undefined) {\n      finaldestination.slashes = slashes.test(loc.href);\n    }\n  }\n\n  return finaldestination;\n}\n\n/**\n * @typedef ProtocolExtract\n * @type Object\n * @property {String} protocol Protocol matched in the URL, in lowercase.\n * @property {Boolean} slashes `true` if protocol is followed by \"//\", else `false`.\n * @property {String} rest Rest of the URL that is not part of the protocol.\n */\n\n/**\n * Extract protocol information from a URL with/without double slash (\"//\").\n *\n * @param {String} address URL we want to extract from.\n * @return {ProtocolExtract} Extracted information.\n * @private\n */\nfunction extractProtocol(address) {\n  address = trimLeft(address);\n\n  var match = protocolre.exec(address)\n    , protocol = match[1] ? match[1].toLowerCase() : ''\n    , slashes = !!(match[2] && match[2].length >= 2)\n    , rest =  match[2] && match[2].length === 1 ? '/' + match[3] : match[3];\n\n  return {\n    protocol: protocol,\n    slashes: slashes,\n    rest: rest\n  };\n}\n\n/**\n * Resolve a relative URL pathname against a base URL pathname.\n *\n * @param {String} relative Pathname of the relative URL.\n * @param {String} base Pathname of the base URL.\n * @return {String} Resolved pathname.\n * @private\n */\nfunction resolve(relative, base) {\n  if (relative === '') return base;\n\n  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))\n    , i = path.length\n    , last = path[i - 1]\n    , unshift = false\n    , up = 0;\n\n  while (i--) {\n    if (path[i] === '.') {\n      path.splice(i, 1);\n    } else if (path[i] === '..') {\n      path.splice(i, 1);\n      up++;\n    } else if (up) {\n      if (i === 0) unshift = true;\n      path.splice(i, 1);\n      up--;\n    }\n  }\n\n  if (unshift) path.unshift('');\n  if (last === '.' || last === '..') path.push('');\n\n  return path.join('/');\n}\n\n/**\n * The actual URL instance. Instead of returning an object we've opted-in to\n * create an actual constructor as it's much more memory efficient and\n * faster and it pleases my OCD.\n *\n * It is worth noting that we should not use `URL` as class name to prevent\n * clashes with the global URL instance that got introduced in browsers.\n *\n * @constructor\n * @param {String} address URL we want to parse.\n * @param {Object|String} [location] Location defaults for relative paths.\n * @param {Boolean|Function} [parser] Parser for the query string.\n * @private\n */\nfunction Url(address, location, parser) {\n  address = trimLeft(address);\n\n  if (!(this instanceof Url)) {\n    return new Url(address, location, parser);\n  }\n\n  var relative, extracted, parse, instruction, index, key\n    , instructions = rules.slice()\n    , type = typeof location\n    , url = this\n    , i = 0;\n\n  //\n  // The following if statements allows this module two have compatibility with\n  // 2 different API:\n  //\n  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments\n  //    where the boolean indicates that the query string should also be parsed.\n  //\n  // 2. The `URL` interface of the browser which accepts a URL, object as\n  //    arguments. The supplied object will be used as default values / fall-back\n  //    for relative paths.\n  //\n  if ('object' !== type && 'string' !== type) {\n    parser = location;\n    location = null;\n  }\n\n  if (parser && 'function' !== typeof parser) parser = qs.parse;\n\n  location = lolcation(location);\n\n  //\n  // Extract protocol information before running the instructions.\n  //\n  extracted = extractProtocol(address || '');\n  relative = !extracted.protocol && !extracted.slashes;\n  url.slashes = extracted.slashes || relative && location.slashes;\n  url.protocol = extracted.protocol || location.protocol || '';\n  address = extracted.rest;\n\n  //\n  // When the authority component is absent the URL starts with a path\n  // component.\n  //\n  if (!extracted.slashes) instructions[3] = [/(.*)/, 'pathname'];\n\n  for (; i < instructions.length; i++) {\n    instruction = instructions[i];\n\n    if (typeof instruction === 'function') {\n      address = instruction(address);\n      continue;\n    }\n\n    parse = instruction[0];\n    key = instruction[1];\n\n    if (parse !== parse) {\n      url[key] = address;\n    } else if ('string' === typeof parse) {\n      if (~(index = address.indexOf(parse))) {\n        if ('number' === typeof instruction[2]) {\n          url[key] = address.slice(0, index);\n          address = address.slice(index + instruction[2]);\n        } else {\n          url[key] = address.slice(index);\n          address = address.slice(0, index);\n        }\n      }\n    } else if ((index = parse.exec(address))) {\n      url[key] = index[1];\n      address = address.slice(0, index.index);\n    }\n\n    url[key] = url[key] || (\n      relative && instruction[3] ? location[key] || '' : ''\n    );\n\n    //\n    // Hostname, host and protocol should be lowercased so they can be used to\n    // create a proper `origin`.\n    //\n    if (instruction[4]) url[key] = url[key].toLowerCase();\n  }\n\n  //\n  // Also parse the supplied query string in to an object. If we're supplied\n  // with a custom parser as function use that instead of the default build-in\n  // parser.\n  //\n  if (parser) url.query = parser(url.query);\n\n  //\n  // If the URL is relative, resolve the pathname against the base URL.\n  //\n  if (\n      relative\n    && location.slashes\n    && url.pathname.charAt(0) !== '/'\n    && (url.pathname !== '' || location.pathname !== '')\n  ) {\n    url.pathname = resolve(url.pathname, location.pathname);\n  }\n\n  //\n  // Default to a / for pathname if none exists. This normalizes the URL\n  // to always have a /\n  //\n  if (url.pathname.charAt(0) !== '/' && url.hostname) {\n    url.pathname = '/' + url.pathname;\n  }\n\n  //\n  // We should not add port numbers if they are already the default port number\n  // for a given protocol. As the host also contains the port number we're going\n  // override it with the hostname which contains no port number.\n  //\n  if (!required(url.port, url.protocol)) {\n    url.host = url.hostname;\n    url.port = '';\n  }\n\n  //\n  // Parse down the `auth` for the username and password.\n  //\n  url.username = url.password = '';\n  if (url.auth) {\n    instruction = url.auth.split(':');\n    url.username = instruction[0] || '';\n    url.password = instruction[1] || '';\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:'\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  //\n  // The href is just the compiled result.\n  //\n  url.href = url.toString();\n}\n\n/**\n * This is convenience method for changing properties in the URL instance to\n * insure that they all propagate correctly.\n *\n * @param {String} part          Property we need to adjust.\n * @param {Mixed} value          The newly assigned value.\n * @param {Boolean|Function} fn  When setting the query, it will be the function\n *                               used to parse the query.\n *                               When setting the protocol, double slash will be\n *                               removed from the final url if it is true.\n * @returns {URL} URL instance for chaining.\n * @public\n */\nfunction set(part, value, fn) {\n  var url = this;\n\n  switch (part) {\n    case 'query':\n      if ('string' === typeof value && value.length) {\n        value = (fn || qs.parse)(value);\n      }\n\n      url[part] = value;\n      break;\n\n    case 'port':\n      url[part] = value;\n\n      if (!required(value, url.protocol)) {\n        url.host = url.hostname;\n        url[part] = '';\n      } else if (value) {\n        url.host = url.hostname +':'+ value;\n      }\n\n      break;\n\n    case 'hostname':\n      url[part] = value;\n\n      if (url.port) value += ':'+ url.port;\n      url.host = value;\n      break;\n\n    case 'host':\n      url[part] = value;\n\n      if (/:\\d+$/.test(value)) {\n        value = value.split(':');\n        url.port = value.pop();\n        url.hostname = value.join(':');\n      } else {\n        url.hostname = value;\n        url.port = '';\n      }\n\n      break;\n\n    case 'protocol':\n      url.protocol = value.toLowerCase();\n      url.slashes = !fn;\n      break;\n\n    case 'pathname':\n    case 'hash':\n      if (value) {\n        var char = part === 'pathname' ? '/' : '#';\n        url[part] = value.charAt(0) !== char ? char + value : value;\n      } else {\n        url[part] = value;\n      }\n      break;\n\n    default:\n      url[part] = value;\n  }\n\n  for (var i = 0; i < rules.length; i++) {\n    var ins = rules[i];\n\n    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:'\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  url.href = url.toString();\n\n  return url;\n}\n\n/**\n * Transform the properties back in to a valid and full URL string.\n *\n * @param {Function} stringify Optional query stringify function.\n * @returns {String} Compiled version of the URL.\n * @public\n */\nfunction toString(stringify) {\n  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;\n\n  var query\n    , url = this\n    , protocol = url.protocol;\n\n  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';\n\n  var result = protocol + (url.slashes ? '//' : '');\n\n  if (url.username) {\n    result += url.username;\n    if (url.password) result += ':'+ url.password;\n    result += '@';\n  }\n\n  result += url.host + url.pathname;\n\n  query = 'object' === typeof url.query ? stringify(url.query) : url.query;\n  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;\n\n  if (url.hash) result += url.hash;\n\n  return result;\n}\n\nUrl.prototype = { set: set, toString: toString };\n\n//\n// Expose the URL parser and some additional properties that might be useful for\n// others or testing.\n//\nUrl.extractProtocol = extractProtocol;\nUrl.location = lolcation;\nUrl.trimLeft = trimLeft;\nUrl.qs = qs;\n\nmodule.exports = Url;\n"]},"metadata":{},"sourceType":"script"}