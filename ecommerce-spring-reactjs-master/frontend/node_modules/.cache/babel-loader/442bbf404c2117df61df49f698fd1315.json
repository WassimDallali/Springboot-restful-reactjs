{"ast":null,"code":"import objectValues from \"../../polyfills/objectValues.mjs\";\nimport keyMap from \"../../jsutils/keyMap.mjs\";\nimport inspect from \"../../jsutils/inspect.mjs\";\nimport didYouMean from \"../../jsutils/didYouMean.mjs\";\nimport suggestionList from \"../../jsutils/suggestionList.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { isLeafType, isInputObjectType, isListType, isNonNullType, isRequiredInputField, getNullableType, getNamedType } from \"../../type/definition.mjs\";\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n */\n\nexport function ValuesOfCorrectTypeRule(context) {\n  return {\n    ListValue: function ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      var type = getNullableType(context.getParentInputType());\n\n      if (!isListType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n    ObjectValue: function ObjectValue(node) {\n      var type = getNamedType(context.getInputType());\n\n      if (!isInputObjectType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n\n      var fieldNodeMap = keyMap(node.fields, function (field) {\n        return field.name.value;\n      });\n\n      for (var _i2 = 0, _objectValues2 = objectValues(type.getFields()); _i2 < _objectValues2.length; _i2++) {\n        var fieldDef = _objectValues2[_i2];\n        var fieldNode = fieldNodeMap[fieldDef.name];\n\n        if (!fieldNode && isRequiredInputField(fieldDef)) {\n          var typeStr = inspect(fieldDef.type);\n          context.reportError(new GraphQLError(\"Field \\\"\".concat(type.name, \".\").concat(fieldDef.name, \"\\\" of required type \\\"\").concat(typeStr, \"\\\" was not provided.\"), node));\n        }\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var parentType = getNamedType(context.getParentInputType());\n      var fieldType = context.getInputType();\n\n      if (!fieldType && isInputObjectType(parentType)) {\n        var suggestions = suggestionList(node.name.value, Object.keys(parentType.getFields()));\n        context.reportError(new GraphQLError(\"Field \\\"\".concat(node.name.value, \"\\\" is not defined by type \\\"\").concat(parentType.name, \"\\\".\") + didYouMean(suggestions), node));\n      }\n    },\n    NullValue: function NullValue(node) {\n      var type = context.getInputType();\n\n      if (isNonNullType(type)) {\n        context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(inspect(type), \"\\\", found \").concat(print(node), \".\"), node));\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      return isValidValueNode(context, node);\n    },\n    IntValue: function IntValue(node) {\n      return isValidValueNode(context, node);\n    },\n    FloatValue: function FloatValue(node) {\n      return isValidValueNode(context, node);\n    },\n    StringValue: function StringValue(node) {\n      return isValidValueNode(context, node);\n    },\n    BooleanValue: function BooleanValue(node) {\n      return isValidValueNode(context, node);\n    }\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidValueNode(context, node) {\n  // Report any error at the full type expected by the location.\n  var locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  var type = getNamedType(locationType);\n\n  if (!isLeafType(type)) {\n    var typeStr = inspect(locationType);\n    context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(typeStr, \"\\\", found \").concat(print(node), \".\"), node));\n    return;\n  } // Scalars and Enums determine if a literal value is valid via parseLiteral(),\n  // which may throw or return an invalid value to indicate failure.\n\n\n  try {\n    var parseResult = type.parseLiteral(node, undefined\n    /* variables */\n    );\n\n    if (parseResult === undefined) {\n      var _typeStr = inspect(locationType);\n\n      context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(_typeStr, \"\\\", found \").concat(print(node), \".\"), node));\n    }\n  } catch (error) {\n    var _typeStr2 = inspect(locationType);\n\n    if (error instanceof GraphQLError) {\n      context.reportError(error);\n    } else {\n      context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(_typeStr2, \"\\\", found \").concat(print(node), \"; \") + error.message, node, undefined, undefined, undefined, error));\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/HP/Desktop/project/ecommerce-spring-reactjs-master/frontend/node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs"],"names":["objectValues","keyMap","inspect","didYouMean","suggestionList","GraphQLError","print","isLeafType","isInputObjectType","isListType","isNonNullType","isRequiredInputField","getNullableType","getNamedType","ValuesOfCorrectTypeRule","context","ListValue","node","type","getParentInputType","isValidValueNode","ObjectValue","getInputType","fieldNodeMap","fields","field","name","value","_i2","_objectValues2","getFields","length","fieldDef","fieldNode","typeStr","reportError","concat","ObjectField","parentType","fieldType","suggestions","Object","keys","NullValue","EnumValue","IntValue","FloatValue","StringValue","BooleanValue","locationType","parseResult","parseLiteral","undefined","_typeStr","error","_typeStr2","message"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,kCAAzB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,SAASC,KAAT,QAAsB,4BAAtB;AACA,SAASC,UAAT,EAAqBC,iBAArB,EAAwCC,UAAxC,EAAoDC,aAApD,EAAmEC,oBAAnE,EAAyFC,eAAzF,EAA0GC,YAA1G,QAA8H,2BAA9H;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,uBAAT,CAAiCC,OAAjC,EAA0C;AAC/C,SAAO;AACLC,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBC,IAAnB,EAAyB;AAClC;AACA;AACA,UAAIC,IAAI,GAAGN,eAAe,CAACG,OAAO,CAACI,kBAAR,EAAD,CAA1B;;AAEA,UAAI,CAACV,UAAU,CAACS,IAAD,CAAf,EAAuB;AACrBE,QAAAA,gBAAgB,CAACL,OAAD,EAAUE,IAAV,CAAhB;AACA,eAAO,KAAP,CAFqB,CAEP;AACf;AACF,KAVI;AAWLI,IAAAA,WAAW,EAAE,SAASA,WAAT,CAAqBJ,IAArB,EAA2B;AACtC,UAAIC,IAAI,GAAGL,YAAY,CAACE,OAAO,CAACO,YAAR,EAAD,CAAvB;;AAEA,UAAI,CAACd,iBAAiB,CAACU,IAAD,CAAtB,EAA8B;AAC5BE,QAAAA,gBAAgB,CAACL,OAAD,EAAUE,IAAV,CAAhB;AACA,eAAO,KAAP,CAF4B,CAEd;AACf,OANqC,CAMpC;;;AAGF,UAAIM,YAAY,GAAGtB,MAAM,CAACgB,IAAI,CAACO,MAAN,EAAc,UAAUC,KAAV,EAAiB;AACtD,eAAOA,KAAK,CAACC,IAAN,CAAWC,KAAlB;AACD,OAFwB,CAAzB;;AAIA,WAAK,IAAIC,GAAG,GAAG,CAAV,EAAaC,cAAc,GAAG7B,YAAY,CAACkB,IAAI,CAACY,SAAL,EAAD,CAA/C,EAAmEF,GAAG,GAAGC,cAAc,CAACE,MAAxF,EAAgGH,GAAG,EAAnG,EAAuG;AACrG,YAAII,QAAQ,GAAGH,cAAc,CAACD,GAAD,CAA7B;AACA,YAAIK,SAAS,GAAGV,YAAY,CAACS,QAAQ,CAACN,IAAV,CAA5B;;AAEA,YAAI,CAACO,SAAD,IAActB,oBAAoB,CAACqB,QAAD,CAAtC,EAAkD;AAChD,cAAIE,OAAO,GAAGhC,OAAO,CAAC8B,QAAQ,CAACd,IAAV,CAArB;AACAH,UAAAA,OAAO,CAACoB,WAAR,CAAoB,IAAI9B,YAAJ,CAAiB,WAAW+B,MAAX,CAAkBlB,IAAI,CAACQ,IAAvB,EAA6B,GAA7B,EAAkCU,MAAlC,CAAyCJ,QAAQ,CAACN,IAAlD,EAAwD,wBAAxD,EAAkFU,MAAlF,CAAyFF,OAAzF,EAAkG,sBAAlG,CAAjB,EAA4IjB,IAA5I,CAApB;AACD;AACF;AACF,KAjCI;AAkCLoB,IAAAA,WAAW,EAAE,SAASA,WAAT,CAAqBpB,IAArB,EAA2B;AACtC,UAAIqB,UAAU,GAAGzB,YAAY,CAACE,OAAO,CAACI,kBAAR,EAAD,CAA7B;AACA,UAAIoB,SAAS,GAAGxB,OAAO,CAACO,YAAR,EAAhB;;AAEA,UAAI,CAACiB,SAAD,IAAc/B,iBAAiB,CAAC8B,UAAD,CAAnC,EAAiD;AAC/C,YAAIE,WAAW,GAAGpC,cAAc,CAACa,IAAI,CAACS,IAAL,CAAUC,KAAX,EAAkBc,MAAM,CAACC,IAAP,CAAYJ,UAAU,CAACR,SAAX,EAAZ,CAAlB,CAAhC;AACAf,QAAAA,OAAO,CAACoB,WAAR,CAAoB,IAAI9B,YAAJ,CAAiB,WAAW+B,MAAX,CAAkBnB,IAAI,CAACS,IAAL,CAAUC,KAA5B,EAAmC,8BAAnC,EAAmES,MAAnE,CAA0EE,UAAU,CAACZ,IAArF,EAA2F,KAA3F,IAAoGvB,UAAU,CAACqC,WAAD,CAA/H,EAA8IvB,IAA9I,CAApB;AACD;AACF,KA1CI;AA2CL0B,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmB1B,IAAnB,EAAyB;AAClC,UAAIC,IAAI,GAAGH,OAAO,CAACO,YAAR,EAAX;;AAEA,UAAIZ,aAAa,CAACQ,IAAD,CAAjB,EAAyB;AACvBH,QAAAA,OAAO,CAACoB,WAAR,CAAoB,IAAI9B,YAAJ,CAAiB,4BAA4B+B,MAA5B,CAAmClC,OAAO,CAACgB,IAAD,CAA1C,EAAkD,YAAlD,EAAgEkB,MAAhE,CAAuE9B,KAAK,CAACW,IAAD,CAA5E,EAAoF,GAApF,CAAjB,EAA2GA,IAA3G,CAApB;AACD;AACF,KAjDI;AAkDL2B,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmB3B,IAAnB,EAAyB;AAClC,aAAOG,gBAAgB,CAACL,OAAD,EAAUE,IAAV,CAAvB;AACD,KApDI;AAqDL4B,IAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkB5B,IAAlB,EAAwB;AAChC,aAAOG,gBAAgB,CAACL,OAAD,EAAUE,IAAV,CAAvB;AACD,KAvDI;AAwDL6B,IAAAA,UAAU,EAAE,SAASA,UAAT,CAAoB7B,IAApB,EAA0B;AACpC,aAAOG,gBAAgB,CAACL,OAAD,EAAUE,IAAV,CAAvB;AACD,KA1DI;AA2DL8B,IAAAA,WAAW,EAAE,SAASA,WAAT,CAAqB9B,IAArB,EAA2B;AACtC,aAAOG,gBAAgB,CAACL,OAAD,EAAUE,IAAV,CAAvB;AACD,KA7DI;AA8DL+B,IAAAA,YAAY,EAAE,SAASA,YAAT,CAAsB/B,IAAtB,EAA4B;AACxC,aAAOG,gBAAgB,CAACL,OAAD,EAAUE,IAAV,CAAvB;AACD;AAhEI,GAAP;AAkED;AACD;AACA;AACA;AACA;;AAEA,SAASG,gBAAT,CAA0BL,OAA1B,EAAmCE,IAAnC,EAAyC;AACvC;AACA,MAAIgC,YAAY,GAAGlC,OAAO,CAACO,YAAR,EAAnB;;AAEA,MAAI,CAAC2B,YAAL,EAAmB;AACjB;AACD;;AAED,MAAI/B,IAAI,GAAGL,YAAY,CAACoC,YAAD,CAAvB;;AAEA,MAAI,CAAC1C,UAAU,CAACW,IAAD,CAAf,EAAuB;AACrB,QAAIgB,OAAO,GAAGhC,OAAO,CAAC+C,YAAD,CAArB;AACAlC,IAAAA,OAAO,CAACoB,WAAR,CAAoB,IAAI9B,YAAJ,CAAiB,4BAA4B+B,MAA5B,CAAmCF,OAAnC,EAA4C,YAA5C,EAA0DE,MAA1D,CAAiE9B,KAAK,CAACW,IAAD,CAAtE,EAA8E,GAA9E,CAAjB,EAAqGA,IAArG,CAApB;AACA;AACD,GAdsC,CAcrC;AACF;;;AAGA,MAAI;AACF,QAAIiC,WAAW,GAAGhC,IAAI,CAACiC,YAAL,CAAkBlC,IAAlB,EAAwBmC;AAC1C;AADkB,KAAlB;;AAIA,QAAIF,WAAW,KAAKE,SAApB,EAA+B;AAC7B,UAAIC,QAAQ,GAAGnD,OAAO,CAAC+C,YAAD,CAAtB;;AAEAlC,MAAAA,OAAO,CAACoB,WAAR,CAAoB,IAAI9B,YAAJ,CAAiB,4BAA4B+B,MAA5B,CAAmCiB,QAAnC,EAA6C,YAA7C,EAA2DjB,MAA3D,CAAkE9B,KAAK,CAACW,IAAD,CAAvE,EAA+E,GAA/E,CAAjB,EAAsGA,IAAtG,CAApB;AACD;AACF,GAVD,CAUE,OAAOqC,KAAP,EAAc;AACd,QAAIC,SAAS,GAAGrD,OAAO,CAAC+C,YAAD,CAAvB;;AAEA,QAAIK,KAAK,YAAYjD,YAArB,EAAmC;AACjCU,MAAAA,OAAO,CAACoB,WAAR,CAAoBmB,KAApB;AACD,KAFD,MAEO;AACLvC,MAAAA,OAAO,CAACoB,WAAR,CAAoB,IAAI9B,YAAJ,CAAiB,4BAA4B+B,MAA5B,CAAmCmB,SAAnC,EAA8C,YAA9C,EAA4DnB,MAA5D,CAAmE9B,KAAK,CAACW,IAAD,CAAxE,EAAgF,IAAhF,IAAwFqC,KAAK,CAACE,OAA/G,EAAwHvC,IAAxH,EAA8HmC,SAA9H,EAAyIA,SAAzI,EAAoJA,SAApJ,EAA+JE,KAA/J,CAApB;AACD;AACF;AACF","sourcesContent":["import objectValues from \"../../polyfills/objectValues.mjs\";\nimport keyMap from \"../../jsutils/keyMap.mjs\";\nimport inspect from \"../../jsutils/inspect.mjs\";\nimport didYouMean from \"../../jsutils/didYouMean.mjs\";\nimport suggestionList from \"../../jsutils/suggestionList.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { isLeafType, isInputObjectType, isListType, isNonNullType, isRequiredInputField, getNullableType, getNamedType } from \"../../type/definition.mjs\";\n\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n */\nexport function ValuesOfCorrectTypeRule(context) {\n  return {\n    ListValue: function ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      var type = getNullableType(context.getParentInputType());\n\n      if (!isListType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n    ObjectValue: function ObjectValue(node) {\n      var type = getNamedType(context.getInputType());\n\n      if (!isInputObjectType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n\n      var fieldNodeMap = keyMap(node.fields, function (field) {\n        return field.name.value;\n      });\n\n      for (var _i2 = 0, _objectValues2 = objectValues(type.getFields()); _i2 < _objectValues2.length; _i2++) {\n        var fieldDef = _objectValues2[_i2];\n        var fieldNode = fieldNodeMap[fieldDef.name];\n\n        if (!fieldNode && isRequiredInputField(fieldDef)) {\n          var typeStr = inspect(fieldDef.type);\n          context.reportError(new GraphQLError(\"Field \\\"\".concat(type.name, \".\").concat(fieldDef.name, \"\\\" of required type \\\"\").concat(typeStr, \"\\\" was not provided.\"), node));\n        }\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var parentType = getNamedType(context.getParentInputType());\n      var fieldType = context.getInputType();\n\n      if (!fieldType && isInputObjectType(parentType)) {\n        var suggestions = suggestionList(node.name.value, Object.keys(parentType.getFields()));\n        context.reportError(new GraphQLError(\"Field \\\"\".concat(node.name.value, \"\\\" is not defined by type \\\"\").concat(parentType.name, \"\\\".\") + didYouMean(suggestions), node));\n      }\n    },\n    NullValue: function NullValue(node) {\n      var type = context.getInputType();\n\n      if (isNonNullType(type)) {\n        context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(inspect(type), \"\\\", found \").concat(print(node), \".\"), node));\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      return isValidValueNode(context, node);\n    },\n    IntValue: function IntValue(node) {\n      return isValidValueNode(context, node);\n    },\n    FloatValue: function FloatValue(node) {\n      return isValidValueNode(context, node);\n    },\n    StringValue: function StringValue(node) {\n      return isValidValueNode(context, node);\n    },\n    BooleanValue: function BooleanValue(node) {\n      return isValidValueNode(context, node);\n    }\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidValueNode(context, node) {\n  // Report any error at the full type expected by the location.\n  var locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  var type = getNamedType(locationType);\n\n  if (!isLeafType(type)) {\n    var typeStr = inspect(locationType);\n    context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(typeStr, \"\\\", found \").concat(print(node), \".\"), node));\n    return;\n  } // Scalars and Enums determine if a literal value is valid via parseLiteral(),\n  // which may throw or return an invalid value to indicate failure.\n\n\n  try {\n    var parseResult = type.parseLiteral(node, undefined\n    /* variables */\n    );\n\n    if (parseResult === undefined) {\n      var _typeStr = inspect(locationType);\n\n      context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(_typeStr, \"\\\", found \").concat(print(node), \".\"), node));\n    }\n  } catch (error) {\n    var _typeStr2 = inspect(locationType);\n\n    if (error instanceof GraphQLError) {\n      context.reportError(error);\n    } else {\n      context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(_typeStr2, \"\\\", found \").concat(print(node), \"; \") + error.message, node, undefined, undefined, undefined, error));\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}