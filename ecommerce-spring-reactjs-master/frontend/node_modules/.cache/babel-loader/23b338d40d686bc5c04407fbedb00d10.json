{"ast":null,"code":"import { showLoader } from \"../actions/auth-actions\";\nimport { fetchOrderSuccess, fetchUserOrdersByQuerySuccess, fetchUserOrdersSuccess, orderAddedFailure, orderAddedSuccess } from \"../actions/order-actions\";\nimport RequestService from '../../utils/request-service';\nimport { ordersByEmailQuery } from \"../../utils/graphql-query/orders-query\";\nexport const fetchOrder = () => async dispatch => {\n  dispatch(fetchOrderSuccess());\n};\nexport const addOrder = (order, history) => async dispatch => {\n  try {\n    dispatch(showLoader());\n    const response = await RequestService.post(\"/users/order\", order);\n    history.push(\"/order/finalize\");\n    localStorage.removeItem(\"perfumes\");\n    dispatch(orderAddedSuccess(response.data));\n  } catch (error) {\n    var _error$response;\n\n    dispatch(orderAddedFailure((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data));\n  }\n};\nexport const fetchUserOrders = () => async dispatch => {\n  dispatch(showLoader());\n  const response = await RequestService.get(\"/users/orders\", true);\n  dispatch(fetchUserOrdersSuccess(response.data));\n};\nexport const fetchUserOrdersByQuery = email => async dispatch => {\n  dispatch(showLoader());\n  const response = await RequestService.post(\"/users/graphql/orders\", {\n    query: ordersByEmailQuery(email)\n  }, true);\n  dispatch(fetchUserOrdersByQuerySuccess(response.data.data.ordersByEmail));\n};","map":{"version":3,"sources":["C:/Users/HP/Desktop/project/ecommerce-spring-reactjs-master/frontend/src/redux/thunks/order-thunks.ts"],"names":["showLoader","fetchOrderSuccess","fetchUserOrdersByQuerySuccess","fetchUserOrdersSuccess","orderAddedFailure","orderAddedSuccess","RequestService","ordersByEmailQuery","fetchOrder","dispatch","addOrder","order","history","response","post","push","localStorage","removeItem","data","error","fetchUserOrders","get","fetchUserOrdersByQuery","email","query","ordersByEmail"],"mappings":"AAEA,SAAQA,UAAR,QAAyB,yBAAzB;AACA,SACIC,iBADJ,EAEIC,6BAFJ,EAGIC,sBAHJ,EAIIC,iBAJJ,EAKIC,iBALJ,QAMO,0BANP;AAOA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,SAAQC,kBAAR,QAAiC,wCAAjC;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM,MAAOC,QAAP,IAA8B;AAC1DA,EAAAA,QAAQ,CAACR,iBAAiB,EAAlB,CAAR;AACH,CAFM;AAIP,OAAO,MAAMS,QAAQ,GAAG,CAACC,KAAD,EAAaC,OAAb,KAA8B,MAAOH,QAAP,IAA8B;AAChF,MAAI;AACAA,IAAAA,QAAQ,CAACT,UAAU,EAAX,CAAR;AACA,UAAMa,QAAQ,GAAG,MAAMP,cAAc,CAACQ,IAAf,CAAoB,cAApB,EAAoCH,KAApC,CAAvB;AACAC,IAAAA,OAAO,CAACG,IAAR,CAAa,iBAAb;AACAC,IAAAA,YAAY,CAACC,UAAb,CAAwB,UAAxB;AACAR,IAAAA,QAAQ,CAACJ,iBAAiB,CAACQ,QAAQ,CAACK,IAAV,CAAlB,CAAR;AACH,GAND,CAME,OAAOC,KAAP,EAAc;AAAA;;AACZV,IAAAA,QAAQ,CAACL,iBAAiB,oBAACe,KAAK,CAACN,QAAP,oDAAC,gBAAgBK,IAAjB,CAAlB,CAAR;AACH;AACJ,CAVM;AAYP,OAAO,MAAME,eAAe,GAAG,MAAM,MAAOX,QAAP,IAA8B;AAC/DA,EAAAA,QAAQ,CAACT,UAAU,EAAX,CAAR;AACA,QAAMa,QAAQ,GAAG,MAAMP,cAAc,CAACe,GAAf,CAAmB,eAAnB,EAAoC,IAApC,CAAvB;AACAZ,EAAAA,QAAQ,CAACN,sBAAsB,CAACU,QAAQ,CAACK,IAAV,CAAvB,CAAR;AACH,CAJM;AAMP,OAAO,MAAMI,sBAAsB,GAAIC,KAAD,IAA+B,MAAOd,QAAP,IAA8B;AAC/FA,EAAAA,QAAQ,CAACT,UAAU,EAAX,CAAR;AACA,QAAMa,QAAQ,GAAG,MAAMP,cAAc,CAACQ,IAAf,CAAoB,uBAApB,EAA6C;AAACU,IAAAA,KAAK,EAAEjB,kBAAkB,CAACgB,KAAD;AAA1B,GAA7C,EAAiF,IAAjF,CAAvB;AACAd,EAAAA,QAAQ,CAACP,6BAA6B,CAACW,QAAQ,CAACK,IAAT,CAAcA,IAAd,CAAmBO,aAApB,CAA9B,CAAR;AACH,CAJM","sourcesContent":["import {Dispatch} from \"redux\";\n\nimport {showLoader} from \"../actions/auth-actions\";\nimport {\n    fetchOrderSuccess,\n    fetchUserOrdersByQuerySuccess,\n    fetchUserOrdersSuccess,\n    orderAddedFailure,\n    orderAddedSuccess\n} from \"../actions/order-actions\";\nimport RequestService from '../../utils/request-service';\nimport {ordersByEmailQuery} from \"../../utils/graphql-query/orders-query\";\n\nexport const fetchOrder = () => async (dispatch: Dispatch) => {\n    dispatch(fetchOrderSuccess());\n};\n\nexport const addOrder = (order: any, history: any) => async (dispatch: Dispatch) => {\n    try {\n        dispatch(showLoader());\n        const response = await RequestService.post(\"/users/order\", order);\n        history.push(\"/order/finalize\");\n        localStorage.removeItem(\"perfumes\");\n        dispatch(orderAddedSuccess(response.data));\n    } catch (error) {\n        dispatch(orderAddedFailure(error.response?.data));\n    }\n};\n\nexport const fetchUserOrders = () => async (dispatch: Dispatch) => {\n    dispatch(showLoader());\n    const response = await RequestService.get(\"/users/orders\", true);\n    dispatch(fetchUserOrdersSuccess(response.data));\n};\n\nexport const fetchUserOrdersByQuery = (email: string | undefined) => async (dispatch: Dispatch) => {\n    dispatch(showLoader());\n    const response = await RequestService.post(\"/users/graphql/orders\", {query: ordersByEmailQuery(email)}, true);\n    dispatch(fetchUserOrdersByQuerySuccess(response.data.data.ordersByEmail));\n};\n"]},"metadata":{},"sourceType":"module"}