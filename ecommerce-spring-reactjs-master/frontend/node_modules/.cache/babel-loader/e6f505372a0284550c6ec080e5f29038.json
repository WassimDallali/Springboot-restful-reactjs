{"ast":null,"code":"import isFinite from \"../polyfills/isFinite.mjs\";\nimport objectValues from \"../polyfills/objectValues.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport safeArrayFrom from \"../jsutils/safeArrayFrom.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { GraphQLID } from \"../type/scalars.mjs\";\nimport { isLeafType, isEnumType, isInputObjectType, isListType, isNonNullType } from \"../type/definition.mjs\";\n/**\n * Produces a GraphQL Value AST given a JavaScript object.\n * Function will match JavaScript/JSON values to GraphQL AST schema format\n * by using suggested GraphQLInputType. For example:\n *\n *     astFromValue(\"value\", GraphQLString)\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Mixed         | Enum Value           |\n * | null          | NullValue            |\n *\n */\n\nexport function astFromValue(value, type) {\n  if (isNonNullType(type)) {\n    var astValue = astFromValue(value, type.ofType);\n\n    if ((astValue === null || astValue === void 0 ? void 0 : astValue.kind) === Kind.NULL) {\n      return null;\n    }\n\n    return astValue;\n  } // only explicit null, not undefined, NaN\n\n\n  if (value === null) {\n    return {\n      kind: Kind.NULL\n    };\n  } // undefined\n\n\n  if (value === undefined) {\n    return null;\n  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n    var items = safeArrayFrom(value);\n\n    if (items != null) {\n      var valuesNodes = [];\n\n      for (var _i2 = 0; _i2 < items.length; _i2++) {\n        var item = items[_i2];\n        var itemNode = astFromValue(item, itemType);\n\n        if (itemNode != null) {\n          valuesNodes.push(itemNode);\n        }\n      }\n\n      return {\n        kind: Kind.LIST,\n        values: valuesNodes\n      };\n    }\n\n    return astFromValue(value, itemType);\n  } // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(value)) {\n      return null;\n    }\n\n    var fieldNodes = [];\n\n    for (var _i4 = 0, _objectValues2 = objectValues(type.getFields()); _i4 < _objectValues2.length; _i4++) {\n      var field = _objectValues2[_i4];\n      var fieldValue = astFromValue(value[field.name], field.type);\n\n      if (fieldValue) {\n        fieldNodes.push({\n          kind: Kind.OBJECT_FIELD,\n          name: {\n            kind: Kind.NAME,\n            value: field.name\n          },\n          value: fieldValue\n        });\n      }\n    }\n\n    return {\n      kind: Kind.OBJECT,\n      fields: fieldNodes\n    };\n  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n  if (isLeafType(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    var serialized = type.serialize(value);\n\n    if (serialized == null) {\n      return null;\n    } // Others serialize based on their corresponding JavaScript scalar types.\n\n\n    if (typeof serialized === 'boolean') {\n      return {\n        kind: Kind.BOOLEAN,\n        value: serialized\n      };\n    } // JavaScript numbers can be Int or Float values.\n\n\n    if (typeof serialized === 'number' && isFinite(serialized)) {\n      var stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum) ? {\n        kind: Kind.INT,\n        value: stringNum\n      } : {\n        kind: Kind.FLOAT,\n        value: stringNum\n      };\n    }\n\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if (isEnumType(type)) {\n        return {\n          kind: Kind.ENUM,\n          value: serialized\n        };\n      } // ID types can use Int literals.\n\n\n      if (type === GraphQLID && integerStringRegExp.test(serialized)) {\n        return {\n          kind: Kind.INT,\n          value: serialized\n        };\n      }\n\n      return {\n        kind: Kind.STRING,\n        value: serialized\n      };\n    }\n\n    throw new TypeError(\"Cannot convert value to AST: \".concat(inspect(serialized), \".\"));\n  } // istanbul ignore next (Not reachable. All possible input types have been considered)\n\n\n  false || invariant(0, 'Unexpected input type: ' + inspect(type));\n}\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\n\nvar integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;","map":{"version":3,"sources":["C:/Users/HP/Desktop/project/ecommerce-spring-reactjs-master/frontend/node_modules/graphql/utilities/astFromValue.mjs"],"names":["isFinite","objectValues","inspect","invariant","isObjectLike","safeArrayFrom","Kind","GraphQLID","isLeafType","isEnumType","isInputObjectType","isListType","isNonNullType","astFromValue","value","type","astValue","ofType","kind","NULL","undefined","itemType","items","valuesNodes","_i2","length","item","itemNode","push","LIST","values","fieldNodes","_i4","_objectValues2","getFields","field","fieldValue","name","OBJECT_FIELD","NAME","OBJECT","fields","serialized","serialize","BOOLEAN","stringNum","String","integerStringRegExp","test","INT","FLOAT","ENUM","STRING","TypeError","concat"],"mappings":"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","sourcesContent":["import isFinite from \"../polyfills/isFinite.mjs\";\nimport objectValues from \"../polyfills/objectValues.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport safeArrayFrom from \"../jsutils/safeArrayFrom.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { GraphQLID } from \"../type/scalars.mjs\";\nimport { isLeafType, isEnumType, isInputObjectType, isListType, isNonNullType } from \"../type/definition.mjs\";\n/**\n * Produces a GraphQL Value AST given a JavaScript object.\n * Function will match JavaScript/JSON values to GraphQL AST schema format\n * by using suggested GraphQLInputType. For example:\n *\n *     astFromValue(\"value\", GraphQLString)\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Mixed         | Enum Value           |\n * | null          | NullValue            |\n *\n */\n\nexport function astFromValue(value, type) {\n  if (isNonNullType(type)) {\n    var astValue = astFromValue(value, type.ofType);\n\n    if ((astValue === null || astValue === void 0 ? void 0 : astValue.kind) === Kind.NULL) {\n      return null;\n    }\n\n    return astValue;\n  } // only explicit null, not undefined, NaN\n\n\n  if (value === null) {\n    return {\n      kind: Kind.NULL\n    };\n  } // undefined\n\n\n  if (value === undefined) {\n    return null;\n  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n    var items = safeArrayFrom(value);\n\n    if (items != null) {\n      var valuesNodes = [];\n\n      for (var _i2 = 0; _i2 < items.length; _i2++) {\n        var item = items[_i2];\n        var itemNode = astFromValue(item, itemType);\n\n        if (itemNode != null) {\n          valuesNodes.push(itemNode);\n        }\n      }\n\n      return {\n        kind: Kind.LIST,\n        values: valuesNodes\n      };\n    }\n\n    return astFromValue(value, itemType);\n  } // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(value)) {\n      return null;\n    }\n\n    var fieldNodes = [];\n\n    for (var _i4 = 0, _objectValues2 = objectValues(type.getFields()); _i4 < _objectValues2.length; _i4++) {\n      var field = _objectValues2[_i4];\n      var fieldValue = astFromValue(value[field.name], field.type);\n\n      if (fieldValue) {\n        fieldNodes.push({\n          kind: Kind.OBJECT_FIELD,\n          name: {\n            kind: Kind.NAME,\n            value: field.name\n          },\n          value: fieldValue\n        });\n      }\n    }\n\n    return {\n      kind: Kind.OBJECT,\n      fields: fieldNodes\n    };\n  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n  if (isLeafType(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    var serialized = type.serialize(value);\n\n    if (serialized == null) {\n      return null;\n    } // Others serialize based on their corresponding JavaScript scalar types.\n\n\n    if (typeof serialized === 'boolean') {\n      return {\n        kind: Kind.BOOLEAN,\n        value: serialized\n      };\n    } // JavaScript numbers can be Int or Float values.\n\n\n    if (typeof serialized === 'number' && isFinite(serialized)) {\n      var stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum) ? {\n        kind: Kind.INT,\n        value: stringNum\n      } : {\n        kind: Kind.FLOAT,\n        value: stringNum\n      };\n    }\n\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if (isEnumType(type)) {\n        return {\n          kind: Kind.ENUM,\n          value: serialized\n        };\n      } // ID types can use Int literals.\n\n\n      if (type === GraphQLID && integerStringRegExp.test(serialized)) {\n        return {\n          kind: Kind.INT,\n          value: serialized\n        };\n      }\n\n      return {\n        kind: Kind.STRING,\n        value: serialized\n      };\n    }\n\n    throw new TypeError(\"Cannot convert value to AST: \".concat(inspect(serialized), \".\"));\n  } // istanbul ignore next (Not reachable. All possible input types have been considered)\n\n\n  false || invariant(0, 'Unexpected input type: ' + inspect(type));\n}\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\n\nvar integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;\n"]},"metadata":{},"sourceType":"module"}