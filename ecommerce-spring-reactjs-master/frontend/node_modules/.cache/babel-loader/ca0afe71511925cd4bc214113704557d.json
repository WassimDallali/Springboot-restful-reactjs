{"ast":null,"code":"/**\n * @internal\n */\nconst NULL = 0;\n/**\n * @internal\n */\n\nconst LF = 10;\n/**\n * @internal\n */\n\nconst CR = 13;\n/**\n * @internal\n */\n\nconst COLON = 58;\n/**\n * This is an evented, rec descent parser.\n * A stream of Octets can be passed and whenever it recognizes\n * a complete Frame or an incoming ping it will invoke the registered callbacks.\n *\n * All incoming Octets are fed into _onByte function.\n * Depending on current state the _onByte function keeps changing.\n * Depending on the state it keeps accumulating into _token and _results.\n * State is indicated by current value of _onByte, all states are named as _collect.\n *\n * STOMP standards https://stomp.github.io/stomp-specification-1.2.html\n * imply that all lengths are considered in bytes (instead of string lengths).\n * So, before actual parsing, if the incoming data is String it is converted to Octets.\n * This allows faithful implementation of the protocol and allows NULL Octets to be present in the body.\n *\n * There is no peek function on the incoming data.\n * When a state change occurs based on an Octet without consuming the Octet,\n * the Octet, after state change, is fed again (_reinjectByte).\n * This became possible as the state change can be determined by inspecting just one Octet.\n *\n * There are two modes to collect the body, if content-length header is there then it by counting Octets\n * otherwise it is determined by NULL terminator.\n *\n * Following the standards, the command and headers are converted to Strings\n * and the body is returned as Octets.\n * Headers are returned as an array and not as Hash - to allow multiple occurrence of an header.\n *\n * This parser does not use Regular Expressions as that can only operate on Strings.\n *\n * It handles if multiple STOMP frames are given as one chunk, a frame is split into multiple chunks, or\n * any combination there of. The parser remembers its state (any partial frame) and continues when a new chunk\n * is pushed.\n *\n * Typically the higher level function will convert headers to Hash, handle unescaping of header values\n * (which is protocol version specific), and convert body to text.\n *\n * Check the parser.spec.js to understand cases that this parser is supposed to handle.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\n\nexport class Parser {\n  constructor(onFrame, onIncomingPing) {\n    this.onFrame = onFrame;\n    this.onIncomingPing = onIncomingPing;\n    this._encoder = new TextEncoder();\n    this._decoder = new TextDecoder();\n    this._token = [];\n\n    this._initState();\n  }\n\n  parseChunk(segment, appendMissingNULLonIncoming = false) {\n    let chunk;\n\n    if (segment instanceof ArrayBuffer) {\n      chunk = new Uint8Array(segment);\n    } else {\n      chunk = this._encoder.encode(segment);\n    } // See https://github.com/stomp-js/stompjs/issues/89\n    // Remove when underlying issue is fixed.\n    //\n    // Send a NULL byte, if the last byte of a Text frame was not NULL.F\n\n\n    if (appendMissingNULLonIncoming && chunk[chunk.length - 1] !== 0) {\n      const chunkWithNull = new Uint8Array(chunk.length + 1);\n      chunkWithNull.set(chunk, 0);\n      chunkWithNull[chunk.length] = 0;\n      chunk = chunkWithNull;\n    } // tslint:disable-next-line:prefer-for-of\n\n\n    for (let i = 0; i < chunk.length; i++) {\n      const byte = chunk[i];\n\n      this._onByte(byte);\n    }\n  } // The following implements a simple Rec Descent Parser.\n  // The grammar is simple and just one byte tells what should be the next state\n\n\n  _collectFrame(byte) {\n    if (byte === NULL) {\n      // Ignore\n      return;\n    }\n\n    if (byte === CR) {\n      // Ignore CR\n      return;\n    }\n\n    if (byte === LF) {\n      // Incoming Ping\n      this.onIncomingPing();\n      return;\n    }\n\n    this._onByte = this._collectCommand;\n\n    this._reinjectByte(byte);\n  }\n\n  _collectCommand(byte) {\n    if (byte === CR) {\n      // Ignore CR\n      return;\n    }\n\n    if (byte === LF) {\n      this._results.command = this._consumeTokenAsUTF8();\n      this._onByte = this._collectHeaders;\n      return;\n    }\n\n    this._consumeByte(byte);\n  }\n\n  _collectHeaders(byte) {\n    if (byte === CR) {\n      // Ignore CR\n      return;\n    }\n\n    if (byte === LF) {\n      this._setupCollectBody();\n\n      return;\n    }\n\n    this._onByte = this._collectHeaderKey;\n\n    this._reinjectByte(byte);\n  }\n\n  _reinjectByte(byte) {\n    this._onByte(byte);\n  }\n\n  _collectHeaderKey(byte) {\n    if (byte === COLON) {\n      this._headerKey = this._consumeTokenAsUTF8();\n      this._onByte = this._collectHeaderValue;\n      return;\n    }\n\n    this._consumeByte(byte);\n  }\n\n  _collectHeaderValue(byte) {\n    if (byte === CR) {\n      // Ignore CR\n      return;\n    }\n\n    if (byte === LF) {\n      this._results.headers.push([this._headerKey, this._consumeTokenAsUTF8()]);\n\n      this._headerKey = undefined;\n      this._onByte = this._collectHeaders;\n      return;\n    }\n\n    this._consumeByte(byte);\n  }\n\n  _setupCollectBody() {\n    const contentLengthHeader = this._results.headers.filter(header => {\n      return header[0] === 'content-length';\n    })[0];\n\n    if (contentLengthHeader) {\n      this._bodyBytesRemaining = parseInt(contentLengthHeader[1], 10);\n      this._onByte = this._collectBodyFixedSize;\n    } else {\n      this._onByte = this._collectBodyNullTerminated;\n    }\n  }\n\n  _collectBodyNullTerminated(byte) {\n    if (byte === NULL) {\n      this._retrievedBody();\n\n      return;\n    }\n\n    this._consumeByte(byte);\n  }\n\n  _collectBodyFixedSize(byte) {\n    // It is post decrement, so that we discard the trailing NULL octet\n    if (this._bodyBytesRemaining-- === 0) {\n      this._retrievedBody();\n\n      return;\n    }\n\n    this._consumeByte(byte);\n  }\n\n  _retrievedBody() {\n    this._results.binaryBody = this._consumeTokenAsRaw();\n    this.onFrame(this._results);\n\n    this._initState();\n  } // Rec Descent Parser helpers\n\n\n  _consumeByte(byte) {\n    this._token.push(byte);\n  }\n\n  _consumeTokenAsUTF8() {\n    return this._decoder.decode(this._consumeTokenAsRaw());\n  }\n\n  _consumeTokenAsRaw() {\n    const rawResult = new Uint8Array(this._token);\n    this._token = [];\n    return rawResult;\n  }\n\n  _initState() {\n    this._results = {\n      command: undefined,\n      headers: [],\n      binaryBody: undefined\n    };\n    this._token = [];\n    this._headerKey = undefined;\n    this._onByte = this._collectFrame;\n  }\n\n}","map":{"version":3,"sources":["../src/parser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @internal\n */\nconst NULL = 0;\n/**\n * @internal\n */\nconst LF = 10;\n/**\n * @internal\n */\nconst CR = 13;\n/**\n * @internal\n */\nconst COLON = 58;\n/**\n * This is an evented, rec descent parser.\n * A stream of Octets can be passed and whenever it recognizes\n * a complete Frame or an incoming ping it will invoke the registered callbacks.\n *\n * All incoming Octets are fed into _onByte function.\n * Depending on current state the _onByte function keeps changing.\n * Depending on the state it keeps accumulating into _token and _results.\n * State is indicated by current value of _onByte, all states are named as _collect.\n *\n * STOMP standards https://stomp.github.io/stomp-specification-1.2.html\n * imply that all lengths are considered in bytes (instead of string lengths).\n * So, before actual parsing, if the incoming data is String it is converted to Octets.\n * This allows faithful implementation of the protocol and allows NULL Octets to be present in the body.\n *\n * There is no peek function on the incoming data.\n * When a state change occurs based on an Octet without consuming the Octet,\n * the Octet, after state change, is fed again (_reinjectByte).\n * This became possible as the state change can be determined by inspecting just one Octet.\n *\n * There are two modes to collect the body, if content-length header is there then it by counting Octets\n * otherwise it is determined by NULL terminator.\n *\n * Following the standards, the command and headers are converted to Strings\n * and the body is returned as Octets.\n * Headers are returned as an array and not as Hash - to allow multiple occurrence of an header.\n *\n * This parser does not use Regular Expressions as that can only operate on Strings.\n *\n * It handles if multiple STOMP frames are given as one chunk, a frame is split into multiple chunks, or\n * any combination there of. The parser remembers its state (any partial frame) and continues when a new chunk\n * is pushed.\n *\n * Typically the higher level function will convert headers to Hash, handle unescaping of header values\n * (which is protocol version specific), and convert body to text.\n *\n * Check the parser.spec.js to understand cases that this parser is supposed to handle.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class Parser {\n    constructor(onFrame, onIncomingPing) {\n        this.onFrame = onFrame;\n        this.onIncomingPing = onIncomingPing;\n        this._encoder = new TextEncoder();\n        this._decoder = new TextDecoder();\n        this._token = [];\n        this._initState();\n    }\n    parseChunk(segment, appendMissingNULLonIncoming = false) {\n        let chunk;\n        if (segment instanceof ArrayBuffer) {\n            chunk = new Uint8Array(segment);\n        }\n        else {\n            chunk = this._encoder.encode(segment);\n        }\n        // See https://github.com/stomp-js/stompjs/issues/89\n        // Remove when underlying issue is fixed.\n        //\n        // Send a NULL byte, if the last byte of a Text frame was not NULL.F\n        if (appendMissingNULLonIncoming && chunk[chunk.length - 1] !== 0) {\n            const chunkWithNull = new Uint8Array(chunk.length + 1);\n            chunkWithNull.set(chunk, 0);\n            chunkWithNull[chunk.length] = 0;\n            chunk = chunkWithNull;\n        }\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < chunk.length; i++) {\n            const byte = chunk[i];\n            this._onByte(byte);\n        }\n    }\n    // The following implements a simple Rec Descent Parser.\n    // The grammar is simple and just one byte tells what should be the next state\n    _collectFrame(byte) {\n        if (byte === NULL) {\n            // Ignore\n            return;\n        }\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            // Incoming Ping\n            this.onIncomingPing();\n            return;\n        }\n        this._onByte = this._collectCommand;\n        this._reinjectByte(byte);\n    }\n    _collectCommand(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._results.command = this._consumeTokenAsUTF8();\n            this._onByte = this._collectHeaders;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectHeaders(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._setupCollectBody();\n            return;\n        }\n        this._onByte = this._collectHeaderKey;\n        this._reinjectByte(byte);\n    }\n    _reinjectByte(byte) {\n        this._onByte(byte);\n    }\n    _collectHeaderKey(byte) {\n        if (byte === COLON) {\n            this._headerKey = this._consumeTokenAsUTF8();\n            this._onByte = this._collectHeaderValue;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectHeaderValue(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._results.headers.push([this._headerKey, this._consumeTokenAsUTF8()]);\n            this._headerKey = undefined;\n            this._onByte = this._collectHeaders;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _setupCollectBody() {\n        const contentLengthHeader = this._results.headers.filter((header) => {\n            return header[0] === 'content-length';\n        })[0];\n        if (contentLengthHeader) {\n            this._bodyBytesRemaining = parseInt(contentLengthHeader[1], 10);\n            this._onByte = this._collectBodyFixedSize;\n        }\n        else {\n            this._onByte = this._collectBodyNullTerminated;\n        }\n    }\n    _collectBodyNullTerminated(byte) {\n        if (byte === NULL) {\n            this._retrievedBody();\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectBodyFixedSize(byte) {\n        // It is post decrement, so that we discard the trailing NULL octet\n        if (this._bodyBytesRemaining-- === 0) {\n            this._retrievedBody();\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _retrievedBody() {\n        this._results.binaryBody = this._consumeTokenAsRaw();\n        this.onFrame(this._results);\n        this._initState();\n    }\n    // Rec Descent Parser helpers\n    _consumeByte(byte) {\n        this._token.push(byte);\n    }\n    _consumeTokenAsUTF8() {\n        return this._decoder.decode(this._consumeTokenAsRaw());\n    }\n    _consumeTokenAsRaw() {\n        const rawResult = new Uint8Array(this._token);\n        this._token = [];\n        return rawResult;\n    }\n    _initState() {\n        this._results = {\n            command: undefined,\n            headers: [],\n            binaryBody: undefined,\n        };\n        this._token = [];\n        this._headerKey = undefined;\n        this._onByte = this._collectFrame;\n    }\n}\n//# sourceMappingURL=parser.js.map"]},"metadata":{},"sourceType":"module"}