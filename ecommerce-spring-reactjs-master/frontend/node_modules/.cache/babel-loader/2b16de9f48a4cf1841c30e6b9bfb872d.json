{"ast":null,"code":"import objectValues from \"../polyfills/objectValues.mjs\";\nimport keyMap from \"../jsutils/keyMap.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { isLeafType, isInputObjectType, isListType, isNonNullType } from \"../type/definition.mjs\";\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Mixed         |\n * | NullValue            | null          |\n *\n */\n\nexport function valueFromAST(valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n\n  if (valueNode.kind === Kind.VARIABLE) {\n    var variableName = valueNode.name.value;\n\n    if (variables == null || variables[variableName] === undefined) {\n      // No valid return value.\n      return;\n    }\n\n    var variableValue = variables[variableName];\n\n    if (variableValue === null && isNonNullType(type)) {\n      return; // Invalid: intentionally return no value.\n    } // Note: This does no further checking that this variable is correct.\n    // This assumes that this query has been validated and the variable\n    // usage here is of the correct type.\n\n\n    return variableValue;\n  }\n\n  if (isNonNullType(type)) {\n    if (valueNode.kind === Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return valueFromAST(valueNode, type.ofType, variables);\n  }\n\n  if (valueNode.kind === Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n\n    if (valueNode.kind === Kind.LIST) {\n      var coercedValues = [];\n\n      for (var _i2 = 0, _valueNode$values2 = valueNode.values; _i2 < _valueNode$values2.length; _i2++) {\n        var itemNode = _valueNode$values2[_i2];\n\n        if (isMissingVariable(itemNode, variables)) {\n          // If an array contains a missing variable, it is either coerced to\n          // null or if the item type is non-null, it considered invalid.\n          if (isNonNullType(itemType)) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(null);\n        } else {\n          var itemValue = valueFromAST(itemNode, itemType, variables);\n\n          if (itemValue === undefined) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(itemValue);\n        }\n      }\n\n      return coercedValues;\n    }\n\n    var coercedValue = valueFromAST(valueNode, itemType, variables);\n\n    if (coercedValue === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return [coercedValue];\n  }\n\n  if (isInputObjectType(type)) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    var coercedObj = Object.create(null);\n    var fieldNodes = keyMap(valueNode.fields, function (field) {\n      return field.name.value;\n    });\n\n    for (var _i4 = 0, _objectValues2 = objectValues(type.getFields()); _i4 < _objectValues2.length; _i4++) {\n      var field = _objectValues2[_i4];\n      var fieldNode = fieldNodes[field.name];\n\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n        if (field.defaultValue !== undefined) {\n          coercedObj[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          return; // Invalid: intentionally return no value.\n        }\n\n        continue;\n      }\n\n      var fieldValue = valueFromAST(fieldNode.value, field.type, variables);\n\n      if (fieldValue === undefined) {\n        return; // Invalid: intentionally return no value.\n      }\n\n      coercedObj[field.name] = fieldValue;\n    }\n\n    return coercedObj;\n  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n  if (isLeafType(type)) {\n    // Scalars and Enums fulfill parsing a literal value via parseLiteral().\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    var result;\n\n    try {\n      result = type.parseLiteral(valueNode, variables);\n    } catch (_error) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    if (result === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return result;\n  } // istanbul ignore next (Not reachable. All possible input types have been considered)\n\n\n  false || invariant(0, 'Unexpected input type: ' + inspect(type));\n} // Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\n\nfunction isMissingVariable(valueNode, variables) {\n  return valueNode.kind === Kind.VARIABLE && (variables == null || variables[valueNode.name.value] === undefined);\n}","map":{"version":3,"sources":["C:/Users/HP/Desktop/project/ecommerce-spring-reactjs-master/frontend/node_modules/graphql/utilities/valueFromAST.mjs"],"names":["objectValues","keyMap","inspect","invariant","Kind","isLeafType","isInputObjectType","isListType","isNonNullType","valueFromAST","valueNode","type","variables","kind","VARIABLE","variableName","name","value","undefined","variableValue","NULL","ofType","itemType","LIST","coercedValues","_i2","_valueNode$values2","values","length","itemNode","isMissingVariable","push","itemValue","coercedValue","OBJECT","coercedObj","Object","create","fieldNodes","fields","field","_i4","_objectValues2","getFields","fieldNode","defaultValue","fieldValue","result","parseLiteral","_error"],"mappings":"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","sourcesContent":["import objectValues from \"../polyfills/objectValues.mjs\";\nimport keyMap from \"../jsutils/keyMap.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { isLeafType, isInputObjectType, isListType, isNonNullType } from \"../type/definition.mjs\";\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Mixed         |\n * | NullValue            | null          |\n *\n */\n\nexport function valueFromAST(valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n\n  if (valueNode.kind === Kind.VARIABLE) {\n    var variableName = valueNode.name.value;\n\n    if (variables == null || variables[variableName] === undefined) {\n      // No valid return value.\n      return;\n    }\n\n    var variableValue = variables[variableName];\n\n    if (variableValue === null && isNonNullType(type)) {\n      return; // Invalid: intentionally return no value.\n    } // Note: This does no further checking that this variable is correct.\n    // This assumes that this query has been validated and the variable\n    // usage here is of the correct type.\n\n\n    return variableValue;\n  }\n\n  if (isNonNullType(type)) {\n    if (valueNode.kind === Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return valueFromAST(valueNode, type.ofType, variables);\n  }\n\n  if (valueNode.kind === Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n\n    if (valueNode.kind === Kind.LIST) {\n      var coercedValues = [];\n\n      for (var _i2 = 0, _valueNode$values2 = valueNode.values; _i2 < _valueNode$values2.length; _i2++) {\n        var itemNode = _valueNode$values2[_i2];\n\n        if (isMissingVariable(itemNode, variables)) {\n          // If an array contains a missing variable, it is either coerced to\n          // null or if the item type is non-null, it considered invalid.\n          if (isNonNullType(itemType)) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(null);\n        } else {\n          var itemValue = valueFromAST(itemNode, itemType, variables);\n\n          if (itemValue === undefined) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(itemValue);\n        }\n      }\n\n      return coercedValues;\n    }\n\n    var coercedValue = valueFromAST(valueNode, itemType, variables);\n\n    if (coercedValue === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return [coercedValue];\n  }\n\n  if (isInputObjectType(type)) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    var coercedObj = Object.create(null);\n    var fieldNodes = keyMap(valueNode.fields, function (field) {\n      return field.name.value;\n    });\n\n    for (var _i4 = 0, _objectValues2 = objectValues(type.getFields()); _i4 < _objectValues2.length; _i4++) {\n      var field = _objectValues2[_i4];\n      var fieldNode = fieldNodes[field.name];\n\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n        if (field.defaultValue !== undefined) {\n          coercedObj[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          return; // Invalid: intentionally return no value.\n        }\n\n        continue;\n      }\n\n      var fieldValue = valueFromAST(fieldNode.value, field.type, variables);\n\n      if (fieldValue === undefined) {\n        return; // Invalid: intentionally return no value.\n      }\n\n      coercedObj[field.name] = fieldValue;\n    }\n\n    return coercedObj;\n  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n  if (isLeafType(type)) {\n    // Scalars and Enums fulfill parsing a literal value via parseLiteral().\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    var result;\n\n    try {\n      result = type.parseLiteral(valueNode, variables);\n    } catch (_error) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    if (result === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return result;\n  } // istanbul ignore next (Not reachable. All possible input types have been considered)\n\n\n  false || invariant(0, 'Unexpected input type: ' + inspect(type));\n} // Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\n\nfunction isMissingVariable(valueNode, variables) {\n  return valueNode.kind === Kind.VARIABLE && (variables == null || variables[valueNode.name.value] === undefined);\n}\n"]},"metadata":{},"sourceType":"module"}