{"ast":null,"code":"import { syntaxError } from \"../error/syntaxError.mjs\";\nimport { Token } from \"./ast.mjs\";\nimport { TokenKind } from \"./tokenKind.mjs\";\nimport { dedentBlockStringValue } from \"./blockString.mjs\";\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport var Lexer = /*#__PURE__*/function () {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  function Lexer(source) {\n    var startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0, null);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n\n  var _proto = Lexer.prototype;\n\n  _proto.advance = function advance() {\n    this.lastToken = this.token;\n    var token = this.token = this.lookahead();\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n  ;\n\n  _proto.lookahead = function lookahead() {\n    var token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        var _token$next; // Note: next is only mutable during parsing, so we cast to allow this.\n\n\n        token = (_token$next = token.next) !== null && _token$next !== void 0 ? _token$next : token.next = readToken(this, token);\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  };\n\n  return Lexer;\n}();\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;\n}\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    \"\\\"\\\\u\".concat(('00' + code.toString(16).toUpperCase()).slice(-4), \"\\\"\")\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = prev.end;\n\n  while (pos < bodyLength) {\n    var code = body.charCodeAt(pos);\n    var _line = lexer.line;\n\n    var _col = 1 + pos - lexer.lineStart; // SourceCharacter\n\n\n    switch (code) {\n      case 0xfeff: // <BOM>\n\n      case 9: //   \\t\n\n      case 32: //  <space>\n\n      case 44:\n        //  ,\n        ++pos;\n        continue;\n\n      case 10:\n        //  \\n\n        ++pos;\n        ++lexer.line;\n        lexer.lineStart = pos;\n        continue;\n\n      case 13:\n        //  \\r\n        if (body.charCodeAt(pos + 1) === 10) {\n          pos += 2;\n        } else {\n          ++pos;\n        }\n\n        ++lexer.line;\n        lexer.lineStart = pos;\n        continue;\n\n      case 33:\n        //  !\n        return new Token(TokenKind.BANG, pos, pos + 1, _line, _col, prev);\n\n      case 35:\n        //  #\n        return readComment(source, pos, _line, _col, prev);\n\n      case 36:\n        //  $\n        return new Token(TokenKind.DOLLAR, pos, pos + 1, _line, _col, prev);\n\n      case 38:\n        //  &\n        return new Token(TokenKind.AMP, pos, pos + 1, _line, _col, prev);\n\n      case 40:\n        //  (\n        return new Token(TokenKind.PAREN_L, pos, pos + 1, _line, _col, prev);\n\n      case 41:\n        //  )\n        return new Token(TokenKind.PAREN_R, pos, pos + 1, _line, _col, prev);\n\n      case 46:\n        //  .\n        if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {\n          return new Token(TokenKind.SPREAD, pos, pos + 3, _line, _col, prev);\n        }\n\n        break;\n\n      case 58:\n        //  :\n        return new Token(TokenKind.COLON, pos, pos + 1, _line, _col, prev);\n\n      case 61:\n        //  =\n        return new Token(TokenKind.EQUALS, pos, pos + 1, _line, _col, prev);\n\n      case 64:\n        //  @\n        return new Token(TokenKind.AT, pos, pos + 1, _line, _col, prev);\n\n      case 91:\n        //  [\n        return new Token(TokenKind.BRACKET_L, pos, pos + 1, _line, _col, prev);\n\n      case 93:\n        //  ]\n        return new Token(TokenKind.BRACKET_R, pos, pos + 1, _line, _col, prev);\n\n      case 123:\n        // {\n        return new Token(TokenKind.BRACE_L, pos, pos + 1, _line, _col, prev);\n\n      case 124:\n        // |\n        return new Token(TokenKind.PIPE, pos, pos + 1, _line, _col, prev);\n\n      case 125:\n        // }\n        return new Token(TokenKind.BRACE_R, pos, pos + 1, _line, _col, prev);\n\n      case 34:\n        //  \"\n        if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {\n          return readBlockString(source, pos, _line, _col, prev, lexer);\n        }\n\n        return readString(source, pos, _line, _col, prev);\n\n      case 45: //  -\n\n      case 48: //  0\n\n      case 49: //  1\n\n      case 50: //  2\n\n      case 51: //  3\n\n      case 52: //  4\n\n      case 53: //  5\n\n      case 54: //  6\n\n      case 55: //  7\n\n      case 56: //  8\n\n      case 57:\n        //  9\n        return readNumber(source, pos, code, _line, _col, prev);\n\n      case 65: //  A\n\n      case 66: //  B\n\n      case 67: //  C\n\n      case 68: //  D\n\n      case 69: //  E\n\n      case 70: //  F\n\n      case 71: //  G\n\n      case 72: //  H\n\n      case 73: //  I\n\n      case 74: //  J\n\n      case 75: //  K\n\n      case 76: //  L\n\n      case 77: //  M\n\n      case 78: //  N\n\n      case 79: //  O\n\n      case 80: //  P\n\n      case 81: //  Q\n\n      case 82: //  R\n\n      case 83: //  S\n\n      case 84: //  T\n\n      case 85: //  U\n\n      case 86: //  V\n\n      case 87: //  W\n\n      case 88: //  X\n\n      case 89: //  Y\n\n      case 90: //  Z\n\n      case 95: //  _\n\n      case 97: //  a\n\n      case 98: //  b\n\n      case 99: //  c\n\n      case 100: // d\n\n      case 101: // e\n\n      case 102: // f\n\n      case 103: // g\n\n      case 104: // h\n\n      case 105: // i\n\n      case 106: // j\n\n      case 107: // k\n\n      case 108: // l\n\n      case 109: // m\n\n      case 110: // n\n\n      case 111: // o\n\n      case 112: // p\n\n      case 113: // q\n\n      case 114: // r\n\n      case 115: // s\n\n      case 116: // t\n\n      case 117: // u\n\n      case 118: // v\n\n      case 119: // w\n\n      case 120: // x\n\n      case 121: // y\n\n      case 122:\n        // z\n        return readName(source, pos, _line, _col, prev);\n    }\n\n    throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n  }\n\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n  return new Token(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    return \"Cannot contain the invalid character \".concat(printCharCode(code), \".\");\n  }\n\n  if (code === 39) {\n    // '\n    return 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?';\n  }\n\n  return \"Cannot parse the unexpected character \".concat(printCharCode(code), \".\");\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code;\n  var position = start;\n\n  do {\n    code = body.charCodeAt(++position);\n  } while (!isNaN(code) && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Token(TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = body.charCodeAt(++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = body.charCodeAt(++position);\n\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, \"Invalid number, unexpected digit after 0: \".concat(printCharCode(code), \".\"));\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = body.charCodeAt(++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n\n  if (code === 46 || isNameStart(code)) {\n    throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n  }\n\n  return new Token(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, body.slice(start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = body.charCodeAt(++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position)) && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += body.slice(chunkStart, position);\n      return new Token(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += body.slice(chunkStart, position - 1);\n      code = body.charCodeAt(position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          {\n            // uXXXX\n            var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));\n\n            if (charCode < 0) {\n              var invalidSequence = body.slice(position + 1, position + 5);\n              throw syntaxError(source, position, \"Invalid character escape sequence: \\\\u\".concat(invalidSequence, \".\"));\n            }\n\n            value += String.fromCharCode(charCode);\n            position += 4;\n            break;\n          }\n\n        default:\n          throw syntaxError(source, position, \"Invalid character escape sequence: \\\\\".concat(String.fromCharCode(code), \".\"));\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\n\nfunction readBlockString(source, start, line, col, prev, lexer) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position))) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {\n      rawValue += body.slice(chunkStart, position);\n      return new Token(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, dedentBlockStringValue(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if ( // Escape Triple-Quote (\\\"\"\")\n    code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {\n      rawValue += body.slice(chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexadecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n\n  while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Token(TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));\n} // _ A-Z a-z\n\n\nfunction isNameStart(code) {\n  return code === 95 || code >= 65 && code <= 90 || code >= 97 && code <= 122;\n}","map":{"version":3,"sources":["C:/Users/HP/Desktop/project/ecommerce-spring-reactjs-master/frontend/node_modules/graphql/language/lexer.mjs"],"names":["syntaxError","Token","TokenKind","dedentBlockStringValue","Lexer","source","startOfFileToken","SOF","lastToken","token","line","lineStart","_proto","prototype","advance","lookahead","kind","EOF","_token$next","next","readToken","COMMENT","isPunctuatorTokenKind","BANG","DOLLAR","AMP","PAREN_L","PAREN_R","SPREAD","COLON","EQUALS","AT","BRACKET_L","BRACKET_R","BRACE_L","PIPE","BRACE_R","printCharCode","code","isNaN","JSON","stringify","String","fromCharCode","concat","toString","toUpperCase","slice","lexer","prev","body","bodyLength","length","pos","end","charCodeAt","_line","_col","readComment","readBlockString","readString","readNumber","readName","unexpectedCharacterMessage","col","start","position","firstCode","isFloat","readDigits","isNameStart","FLOAT","INT","chunkStart","value","STRING","charCode","uniCharCode","invalidSequence","rawValue","BLOCK_STRING","a","b","c","d","char2hex","NAME"],"mappings":"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","sourcesContent":["import { syntaxError } from \"../error/syntaxError.mjs\";\nimport { Token } from \"./ast.mjs\";\nimport { TokenKind } from \"./tokenKind.mjs\";\nimport { dedentBlockStringValue } from \"./blockString.mjs\";\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport var Lexer = /*#__PURE__*/function () {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  function Lexer(source) {\n    var startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0, null);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n\n  var _proto = Lexer.prototype;\n\n  _proto.advance = function advance() {\n    this.lastToken = this.token;\n    var token = this.token = this.lookahead();\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n  ;\n\n  _proto.lookahead = function lookahead() {\n    var token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        var _token$next;\n\n        // Note: next is only mutable during parsing, so we cast to allow this.\n        token = (_token$next = token.next) !== null && _token$next !== void 0 ? _token$next : token.next = readToken(this, token);\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  };\n\n  return Lexer;\n}();\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;\n}\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    \"\\\"\\\\u\".concat(('00' + code.toString(16).toUpperCase()).slice(-4), \"\\\"\")\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = prev.end;\n\n  while (pos < bodyLength) {\n    var code = body.charCodeAt(pos);\n    var _line = lexer.line;\n\n    var _col = 1 + pos - lexer.lineStart; // SourceCharacter\n\n\n    switch (code) {\n      case 0xfeff: // <BOM>\n\n      case 9: //   \\t\n\n      case 32: //  <space>\n\n      case 44:\n        //  ,\n        ++pos;\n        continue;\n\n      case 10:\n        //  \\n\n        ++pos;\n        ++lexer.line;\n        lexer.lineStart = pos;\n        continue;\n\n      case 13:\n        //  \\r\n        if (body.charCodeAt(pos + 1) === 10) {\n          pos += 2;\n        } else {\n          ++pos;\n        }\n\n        ++lexer.line;\n        lexer.lineStart = pos;\n        continue;\n\n      case 33:\n        //  !\n        return new Token(TokenKind.BANG, pos, pos + 1, _line, _col, prev);\n\n      case 35:\n        //  #\n        return readComment(source, pos, _line, _col, prev);\n\n      case 36:\n        //  $\n        return new Token(TokenKind.DOLLAR, pos, pos + 1, _line, _col, prev);\n\n      case 38:\n        //  &\n        return new Token(TokenKind.AMP, pos, pos + 1, _line, _col, prev);\n\n      case 40:\n        //  (\n        return new Token(TokenKind.PAREN_L, pos, pos + 1, _line, _col, prev);\n\n      case 41:\n        //  )\n        return new Token(TokenKind.PAREN_R, pos, pos + 1, _line, _col, prev);\n\n      case 46:\n        //  .\n        if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {\n          return new Token(TokenKind.SPREAD, pos, pos + 3, _line, _col, prev);\n        }\n\n        break;\n\n      case 58:\n        //  :\n        return new Token(TokenKind.COLON, pos, pos + 1, _line, _col, prev);\n\n      case 61:\n        //  =\n        return new Token(TokenKind.EQUALS, pos, pos + 1, _line, _col, prev);\n\n      case 64:\n        //  @\n        return new Token(TokenKind.AT, pos, pos + 1, _line, _col, prev);\n\n      case 91:\n        //  [\n        return new Token(TokenKind.BRACKET_L, pos, pos + 1, _line, _col, prev);\n\n      case 93:\n        //  ]\n        return new Token(TokenKind.BRACKET_R, pos, pos + 1, _line, _col, prev);\n\n      case 123:\n        // {\n        return new Token(TokenKind.BRACE_L, pos, pos + 1, _line, _col, prev);\n\n      case 124:\n        // |\n        return new Token(TokenKind.PIPE, pos, pos + 1, _line, _col, prev);\n\n      case 125:\n        // }\n        return new Token(TokenKind.BRACE_R, pos, pos + 1, _line, _col, prev);\n\n      case 34:\n        //  \"\n        if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {\n          return readBlockString(source, pos, _line, _col, prev, lexer);\n        }\n\n        return readString(source, pos, _line, _col, prev);\n\n      case 45: //  -\n\n      case 48: //  0\n\n      case 49: //  1\n\n      case 50: //  2\n\n      case 51: //  3\n\n      case 52: //  4\n\n      case 53: //  5\n\n      case 54: //  6\n\n      case 55: //  7\n\n      case 56: //  8\n\n      case 57:\n        //  9\n        return readNumber(source, pos, code, _line, _col, prev);\n\n      case 65: //  A\n\n      case 66: //  B\n\n      case 67: //  C\n\n      case 68: //  D\n\n      case 69: //  E\n\n      case 70: //  F\n\n      case 71: //  G\n\n      case 72: //  H\n\n      case 73: //  I\n\n      case 74: //  J\n\n      case 75: //  K\n\n      case 76: //  L\n\n      case 77: //  M\n\n      case 78: //  N\n\n      case 79: //  O\n\n      case 80: //  P\n\n      case 81: //  Q\n\n      case 82: //  R\n\n      case 83: //  S\n\n      case 84: //  T\n\n      case 85: //  U\n\n      case 86: //  V\n\n      case 87: //  W\n\n      case 88: //  X\n\n      case 89: //  Y\n\n      case 90: //  Z\n\n      case 95: //  _\n\n      case 97: //  a\n\n      case 98: //  b\n\n      case 99: //  c\n\n      case 100: // d\n\n      case 101: // e\n\n      case 102: // f\n\n      case 103: // g\n\n      case 104: // h\n\n      case 105: // i\n\n      case 106: // j\n\n      case 107: // k\n\n      case 108: // l\n\n      case 109: // m\n\n      case 110: // n\n\n      case 111: // o\n\n      case 112: // p\n\n      case 113: // q\n\n      case 114: // r\n\n      case 115: // s\n\n      case 116: // t\n\n      case 117: // u\n\n      case 118: // v\n\n      case 119: // w\n\n      case 120: // x\n\n      case 121: // y\n\n      case 122:\n        // z\n        return readName(source, pos, _line, _col, prev);\n    }\n\n    throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n  }\n\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n  return new Token(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    return \"Cannot contain the invalid character \".concat(printCharCode(code), \".\");\n  }\n\n  if (code === 39) {\n    // '\n    return 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?';\n  }\n\n  return \"Cannot parse the unexpected character \".concat(printCharCode(code), \".\");\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code;\n  var position = start;\n\n  do {\n    code = body.charCodeAt(++position);\n  } while (!isNaN(code) && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Token(TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = body.charCodeAt(++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = body.charCodeAt(++position);\n\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, \"Invalid number, unexpected digit after 0: \".concat(printCharCode(code), \".\"));\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = body.charCodeAt(++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n\n  if (code === 46 || isNameStart(code)) {\n    throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n  }\n\n  return new Token(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, body.slice(start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = body.charCodeAt(++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position)) && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += body.slice(chunkStart, position);\n      return new Token(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += body.slice(chunkStart, position - 1);\n      code = body.charCodeAt(position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          {\n            // uXXXX\n            var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));\n\n            if (charCode < 0) {\n              var invalidSequence = body.slice(position + 1, position + 5);\n              throw syntaxError(source, position, \"Invalid character escape sequence: \\\\u\".concat(invalidSequence, \".\"));\n            }\n\n            value += String.fromCharCode(charCode);\n            position += 4;\n            break;\n          }\n\n        default:\n          throw syntaxError(source, position, \"Invalid character escape sequence: \\\\\".concat(String.fromCharCode(code), \".\"));\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\n\nfunction readBlockString(source, start, line, col, prev, lexer) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position))) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {\n      rawValue += body.slice(chunkStart, position);\n      return new Token(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, dedentBlockStringValue(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if ( // Escape Triple-Quote (\\\"\"\")\n    code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {\n      rawValue += body.slice(chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexadecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n\n  while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Token(TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));\n} // _ A-Z a-z\n\n\nfunction isNameStart(code) {\n  return code === 95 || code >= 65 && code <= 90 || code >= 97 && code <= 122;\n}\n"]},"metadata":{},"sourceType":"module"}