{"ast":null,"code":"import isFinite from \"../polyfills/isFinite.mjs\";\nimport isInteger from \"../polyfills/isInteger.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { print } from \"../language/printer.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { GraphQLScalarType } from \"./definition.mjs\"; // As per the GraphQL Spec, Integers are only treated as valid when a valid\n// 32-bit signed integer, providing the broadest support across platforms.\n//\n// n.b. JavaScript's integers are safe between -(2^53 - 1) and 2^53 - 1 because\n// they are internally represented as IEEE 754 doubles.\n\nvar MAX_INT = 2147483647;\nvar MIN_INT = -2147483648;\n\nfunction serializeInt(outputValue) {\n  var coercedValue = serializeObject(outputValue);\n\n  if (typeof coercedValue === 'boolean') {\n    return coercedValue ? 1 : 0;\n  }\n\n  var num = coercedValue;\n\n  if (typeof coercedValue === 'string' && coercedValue !== '') {\n    num = Number(coercedValue);\n  }\n\n  if (!isInteger(num)) {\n    throw new GraphQLError(\"Int cannot represent non-integer value: \".concat(inspect(coercedValue)));\n  }\n\n  if (num > MAX_INT || num < MIN_INT) {\n    throw new GraphQLError('Int cannot represent non 32-bit signed integer value: ' + inspect(coercedValue));\n  }\n\n  return num;\n}\n\nfunction coerceInt(inputValue) {\n  if (!isInteger(inputValue)) {\n    throw new GraphQLError(\"Int cannot represent non-integer value: \".concat(inspect(inputValue)));\n  }\n\n  if (inputValue > MAX_INT || inputValue < MIN_INT) {\n    throw new GraphQLError(\"Int cannot represent non 32-bit signed integer value: \".concat(inputValue));\n  }\n\n  return inputValue;\n}\n\nexport var GraphQLInt = new GraphQLScalarType({\n  name: 'Int',\n  description: 'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',\n  serialize: serializeInt,\n  parseValue: coerceInt,\n  parseLiteral: function parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\"Int cannot represent non-integer value: \".concat(print(valueNode)), valueNode);\n    }\n\n    var num = parseInt(valueNode.value, 10);\n\n    if (num > MAX_INT || num < MIN_INT) {\n      throw new GraphQLError(\"Int cannot represent non 32-bit signed integer value: \".concat(valueNode.value), valueNode);\n    }\n\n    return num;\n  }\n});\n\nfunction serializeFloat(outputValue) {\n  var coercedValue = serializeObject(outputValue);\n\n  if (typeof coercedValue === 'boolean') {\n    return coercedValue ? 1 : 0;\n  }\n\n  var num = coercedValue;\n\n  if (typeof coercedValue === 'string' && coercedValue !== '') {\n    num = Number(coercedValue);\n  }\n\n  if (!isFinite(num)) {\n    throw new GraphQLError(\"Float cannot represent non numeric value: \".concat(inspect(coercedValue)));\n  }\n\n  return num;\n}\n\nfunction coerceFloat(inputValue) {\n  if (!isFinite(inputValue)) {\n    throw new GraphQLError(\"Float cannot represent non numeric value: \".concat(inspect(inputValue)));\n  }\n\n  return inputValue;\n}\n\nexport var GraphQLFloat = new GraphQLScalarType({\n  name: 'Float',\n  description: 'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',\n  serialize: serializeFloat,\n  parseValue: coerceFloat,\n  parseLiteral: function parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.FLOAT && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\"Float cannot represent non numeric value: \".concat(print(valueNode)), valueNode);\n    }\n\n    return parseFloat(valueNode.value);\n  }\n}); // Support serializing objects with custom valueOf() or toJSON() functions -\n// a common way to represent a complex value which can be represented as\n// a string (ex: MongoDB id objects).\n\nfunction serializeObject(outputValue) {\n  if (isObjectLike(outputValue)) {\n    if (typeof outputValue.valueOf === 'function') {\n      var valueOfResult = outputValue.valueOf();\n\n      if (!isObjectLike(valueOfResult)) {\n        return valueOfResult;\n      }\n    }\n\n    if (typeof outputValue.toJSON === 'function') {\n      // $FlowFixMe[incompatible-use]\n      return outputValue.toJSON();\n    }\n  }\n\n  return outputValue;\n}\n\nfunction serializeString(outputValue) {\n  var coercedValue = serializeObject(outputValue); // Serialize string, boolean and number values to a string, but do not\n  // attempt to coerce object, function, symbol, or other types as strings.\n\n  if (typeof coercedValue === 'string') {\n    return coercedValue;\n  }\n\n  if (typeof coercedValue === 'boolean') {\n    return coercedValue ? 'true' : 'false';\n  }\n\n  if (isFinite(coercedValue)) {\n    return coercedValue.toString();\n  }\n\n  throw new GraphQLError(\"String cannot represent value: \".concat(inspect(outputValue)));\n}\n\nfunction coerceString(inputValue) {\n  if (typeof inputValue !== 'string') {\n    throw new GraphQLError(\"String cannot represent a non string value: \".concat(inspect(inputValue)));\n  }\n\n  return inputValue;\n}\n\nexport var GraphQLString = new GraphQLScalarType({\n  name: 'String',\n  description: 'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n  serialize: serializeString,\n  parseValue: coerceString,\n  parseLiteral: function parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING) {\n      throw new GraphQLError(\"String cannot represent a non string value: \".concat(print(valueNode)), valueNode);\n    }\n\n    return valueNode.value;\n  }\n});\n\nfunction serializeBoolean(outputValue) {\n  var coercedValue = serializeObject(outputValue);\n\n  if (typeof coercedValue === 'boolean') {\n    return coercedValue;\n  }\n\n  if (isFinite(coercedValue)) {\n    return coercedValue !== 0;\n  }\n\n  throw new GraphQLError(\"Boolean cannot represent a non boolean value: \".concat(inspect(coercedValue)));\n}\n\nfunction coerceBoolean(inputValue) {\n  if (typeof inputValue !== 'boolean') {\n    throw new GraphQLError(\"Boolean cannot represent a non boolean value: \".concat(inspect(inputValue)));\n  }\n\n  return inputValue;\n}\n\nexport var GraphQLBoolean = new GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n  serialize: serializeBoolean,\n  parseValue: coerceBoolean,\n  parseLiteral: function parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.BOOLEAN) {\n      throw new GraphQLError(\"Boolean cannot represent a non boolean value: \".concat(print(valueNode)), valueNode);\n    }\n\n    return valueNode.value;\n  }\n});\n\nfunction serializeID(outputValue) {\n  var coercedValue = serializeObject(outputValue);\n\n  if (typeof coercedValue === 'string') {\n    return coercedValue;\n  }\n\n  if (isInteger(coercedValue)) {\n    return String(coercedValue);\n  }\n\n  throw new GraphQLError(\"ID cannot represent value: \".concat(inspect(outputValue)));\n}\n\nfunction coerceID(inputValue) {\n  if (typeof inputValue === 'string') {\n    return inputValue;\n  }\n\n  if (isInteger(inputValue)) {\n    return inputValue.toString();\n  }\n\n  throw new GraphQLError(\"ID cannot represent value: \".concat(inspect(inputValue)));\n}\n\nexport var GraphQLID = new GraphQLScalarType({\n  name: 'ID',\n  description: 'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',\n  serialize: serializeID,\n  parseValue: coerceID,\n  parseLiteral: function parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError('ID cannot represent a non-string and non-integer value: ' + print(valueNode), valueNode);\n    }\n\n    return valueNode.value;\n  }\n});\nexport var specifiedScalarTypes = Object.freeze([GraphQLString, GraphQLInt, GraphQLFloat, GraphQLBoolean, GraphQLID]);\nexport function isSpecifiedScalarType(type) {\n  return specifiedScalarTypes.some(function (_ref) {\n    var name = _ref.name;\n    return type.name === name;\n  });\n}","map":{"version":3,"sources":["C:/Users/HP/Desktop/project/ecommerce-spring-reactjs-master/frontend/node_modules/graphql/type/scalars.mjs"],"names":["isFinite","isInteger","inspect","isObjectLike","Kind","print","GraphQLError","GraphQLScalarType","MAX_INT","MIN_INT","serializeInt","outputValue","coercedValue","serializeObject","num","Number","concat","coerceInt","inputValue","GraphQLInt","name","description","serialize","parseValue","parseLiteral","valueNode","kind","INT","parseInt","value","serializeFloat","coerceFloat","GraphQLFloat","FLOAT","parseFloat","valueOf","valueOfResult","toJSON","serializeString","toString","coerceString","GraphQLString","STRING","serializeBoolean","coerceBoolean","GraphQLBoolean","BOOLEAN","serializeID","String","coerceID","GraphQLID","specifiedScalarTypes","Object","freeze","isSpecifiedScalarType","type","some","_ref"],"mappings":"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","sourcesContent":["import isFinite from \"../polyfills/isFinite.mjs\";\nimport isInteger from \"../polyfills/isInteger.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { print } from \"../language/printer.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { GraphQLScalarType } from \"./definition.mjs\"; // As per the GraphQL Spec, Integers are only treated as valid when a valid\n// 32-bit signed integer, providing the broadest support across platforms.\n//\n// n.b. JavaScript's integers are safe between -(2^53 - 1) and 2^53 - 1 because\n// they are internally represented as IEEE 754 doubles.\n\nvar MAX_INT = 2147483647;\nvar MIN_INT = -2147483648;\n\nfunction serializeInt(outputValue) {\n  var coercedValue = serializeObject(outputValue);\n\n  if (typeof coercedValue === 'boolean') {\n    return coercedValue ? 1 : 0;\n  }\n\n  var num = coercedValue;\n\n  if (typeof coercedValue === 'string' && coercedValue !== '') {\n    num = Number(coercedValue);\n  }\n\n  if (!isInteger(num)) {\n    throw new GraphQLError(\"Int cannot represent non-integer value: \".concat(inspect(coercedValue)));\n  }\n\n  if (num > MAX_INT || num < MIN_INT) {\n    throw new GraphQLError('Int cannot represent non 32-bit signed integer value: ' + inspect(coercedValue));\n  }\n\n  return num;\n}\n\nfunction coerceInt(inputValue) {\n  if (!isInteger(inputValue)) {\n    throw new GraphQLError(\"Int cannot represent non-integer value: \".concat(inspect(inputValue)));\n  }\n\n  if (inputValue > MAX_INT || inputValue < MIN_INT) {\n    throw new GraphQLError(\"Int cannot represent non 32-bit signed integer value: \".concat(inputValue));\n  }\n\n  return inputValue;\n}\n\nexport var GraphQLInt = new GraphQLScalarType({\n  name: 'Int',\n  description: 'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',\n  serialize: serializeInt,\n  parseValue: coerceInt,\n  parseLiteral: function parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\"Int cannot represent non-integer value: \".concat(print(valueNode)), valueNode);\n    }\n\n    var num = parseInt(valueNode.value, 10);\n\n    if (num > MAX_INT || num < MIN_INT) {\n      throw new GraphQLError(\"Int cannot represent non 32-bit signed integer value: \".concat(valueNode.value), valueNode);\n    }\n\n    return num;\n  }\n});\n\nfunction serializeFloat(outputValue) {\n  var coercedValue = serializeObject(outputValue);\n\n  if (typeof coercedValue === 'boolean') {\n    return coercedValue ? 1 : 0;\n  }\n\n  var num = coercedValue;\n\n  if (typeof coercedValue === 'string' && coercedValue !== '') {\n    num = Number(coercedValue);\n  }\n\n  if (!isFinite(num)) {\n    throw new GraphQLError(\"Float cannot represent non numeric value: \".concat(inspect(coercedValue)));\n  }\n\n  return num;\n}\n\nfunction coerceFloat(inputValue) {\n  if (!isFinite(inputValue)) {\n    throw new GraphQLError(\"Float cannot represent non numeric value: \".concat(inspect(inputValue)));\n  }\n\n  return inputValue;\n}\n\nexport var GraphQLFloat = new GraphQLScalarType({\n  name: 'Float',\n  description: 'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',\n  serialize: serializeFloat,\n  parseValue: coerceFloat,\n  parseLiteral: function parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.FLOAT && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\"Float cannot represent non numeric value: \".concat(print(valueNode)), valueNode);\n    }\n\n    return parseFloat(valueNode.value);\n  }\n}); // Support serializing objects with custom valueOf() or toJSON() functions -\n// a common way to represent a complex value which can be represented as\n// a string (ex: MongoDB id objects).\n\nfunction serializeObject(outputValue) {\n  if (isObjectLike(outputValue)) {\n    if (typeof outputValue.valueOf === 'function') {\n      var valueOfResult = outputValue.valueOf();\n\n      if (!isObjectLike(valueOfResult)) {\n        return valueOfResult;\n      }\n    }\n\n    if (typeof outputValue.toJSON === 'function') {\n      // $FlowFixMe[incompatible-use]\n      return outputValue.toJSON();\n    }\n  }\n\n  return outputValue;\n}\n\nfunction serializeString(outputValue) {\n  var coercedValue = serializeObject(outputValue); // Serialize string, boolean and number values to a string, but do not\n  // attempt to coerce object, function, symbol, or other types as strings.\n\n  if (typeof coercedValue === 'string') {\n    return coercedValue;\n  }\n\n  if (typeof coercedValue === 'boolean') {\n    return coercedValue ? 'true' : 'false';\n  }\n\n  if (isFinite(coercedValue)) {\n    return coercedValue.toString();\n  }\n\n  throw new GraphQLError(\"String cannot represent value: \".concat(inspect(outputValue)));\n}\n\nfunction coerceString(inputValue) {\n  if (typeof inputValue !== 'string') {\n    throw new GraphQLError(\"String cannot represent a non string value: \".concat(inspect(inputValue)));\n  }\n\n  return inputValue;\n}\n\nexport var GraphQLString = new GraphQLScalarType({\n  name: 'String',\n  description: 'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n  serialize: serializeString,\n  parseValue: coerceString,\n  parseLiteral: function parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING) {\n      throw new GraphQLError(\"String cannot represent a non string value: \".concat(print(valueNode)), valueNode);\n    }\n\n    return valueNode.value;\n  }\n});\n\nfunction serializeBoolean(outputValue) {\n  var coercedValue = serializeObject(outputValue);\n\n  if (typeof coercedValue === 'boolean') {\n    return coercedValue;\n  }\n\n  if (isFinite(coercedValue)) {\n    return coercedValue !== 0;\n  }\n\n  throw new GraphQLError(\"Boolean cannot represent a non boolean value: \".concat(inspect(coercedValue)));\n}\n\nfunction coerceBoolean(inputValue) {\n  if (typeof inputValue !== 'boolean') {\n    throw new GraphQLError(\"Boolean cannot represent a non boolean value: \".concat(inspect(inputValue)));\n  }\n\n  return inputValue;\n}\n\nexport var GraphQLBoolean = new GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n  serialize: serializeBoolean,\n  parseValue: coerceBoolean,\n  parseLiteral: function parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.BOOLEAN) {\n      throw new GraphQLError(\"Boolean cannot represent a non boolean value: \".concat(print(valueNode)), valueNode);\n    }\n\n    return valueNode.value;\n  }\n});\n\nfunction serializeID(outputValue) {\n  var coercedValue = serializeObject(outputValue);\n\n  if (typeof coercedValue === 'string') {\n    return coercedValue;\n  }\n\n  if (isInteger(coercedValue)) {\n    return String(coercedValue);\n  }\n\n  throw new GraphQLError(\"ID cannot represent value: \".concat(inspect(outputValue)));\n}\n\nfunction coerceID(inputValue) {\n  if (typeof inputValue === 'string') {\n    return inputValue;\n  }\n\n  if (isInteger(inputValue)) {\n    return inputValue.toString();\n  }\n\n  throw new GraphQLError(\"ID cannot represent value: \".concat(inspect(inputValue)));\n}\n\nexport var GraphQLID = new GraphQLScalarType({\n  name: 'ID',\n  description: 'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',\n  serialize: serializeID,\n  parseValue: coerceID,\n  parseLiteral: function parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError('ID cannot represent a non-string and non-integer value: ' + print(valueNode), valueNode);\n    }\n\n    return valueNode.value;\n  }\n});\nexport var specifiedScalarTypes = Object.freeze([GraphQLString, GraphQLInt, GraphQLFloat, GraphQLBoolean, GraphQLID]);\nexport function isSpecifiedScalarType(type) {\n  return specifiedScalarTypes.some(function (_ref) {\n    var name = _ref.name;\n    return type.name === name;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}