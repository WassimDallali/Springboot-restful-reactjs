{"ast":null,"code":"import objectValues from \"../polyfills/objectValues.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport didYouMean from \"../jsutils/didYouMean.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport safeArrayFrom from \"../jsutils/safeArrayFrom.mjs\";\nimport suggestionList from \"../jsutils/suggestionList.mjs\";\nimport printPathArray from \"../jsutils/printPathArray.mjs\";\nimport { addPath, pathToArray } from \"../jsutils/Path.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { isLeafType, isInputObjectType, isListType, isNonNullType } from \"../type/definition.mjs\";\n/**\n * Coerces a JavaScript value given a GraphQL Input Type.\n */\n\nexport function coerceInputValue(inputValue, type) {\n  var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultOnError;\n  return coerceInputValueImpl(inputValue, type, onError);\n}\n\nfunction defaultOnError(path, invalidValue, error) {\n  var errorPrefix = 'Invalid value ' + inspect(invalidValue);\n\n  if (path.length > 0) {\n    errorPrefix += \" at \\\"value\".concat(printPathArray(path), \"\\\"\");\n  }\n\n  error.message = errorPrefix + ': ' + error.message;\n  throw error;\n}\n\nfunction coerceInputValueImpl(inputValue, type, onError, path) {\n  if (isNonNullType(type)) {\n    if (inputValue != null) {\n      return coerceInputValueImpl(inputValue, type.ofType, onError, path);\n    }\n\n    onError(pathToArray(path), inputValue, new GraphQLError(\"Expected non-nullable type \\\"\".concat(inspect(type), \"\\\" not to be null.\")));\n    return;\n  }\n\n  if (inputValue == null) {\n    // Explicitly return the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n    var coercedList = safeArrayFrom(inputValue, function (itemValue, index) {\n      var itemPath = addPath(path, index, undefined);\n      return coerceInputValueImpl(itemValue, itemType, onError, itemPath);\n    });\n\n    if (coercedList != null) {\n      return coercedList;\n    } // Lists accept a non-list value as a list of one.\n\n\n    return [coerceInputValueImpl(inputValue, itemType, onError, path)];\n  }\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(inputValue)) {\n      onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \\\"\".concat(type.name, \"\\\" to be an object.\")));\n      return;\n    }\n\n    var coercedValue = {};\n    var fieldDefs = type.getFields();\n\n    for (var _i2 = 0, _objectValues2 = objectValues(fieldDefs); _i2 < _objectValues2.length; _i2++) {\n      var field = _objectValues2[_i2];\n      var fieldValue = inputValue[field.name];\n\n      if (fieldValue === undefined) {\n        if (field.defaultValue !== undefined) {\n          coercedValue[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          var typeStr = inspect(field.type);\n          onError(pathToArray(path), inputValue, new GraphQLError(\"Field \\\"\".concat(field.name, \"\\\" of required type \\\"\").concat(typeStr, \"\\\" was not provided.\")));\n        }\n\n        continue;\n      }\n\n      coercedValue[field.name] = coerceInputValueImpl(fieldValue, field.type, onError, addPath(path, field.name, type.name));\n    } // Ensure every provided field is defined.\n\n\n    for (var _i4 = 0, _Object$keys2 = Object.keys(inputValue); _i4 < _Object$keys2.length; _i4++) {\n      var fieldName = _Object$keys2[_i4];\n\n      if (!fieldDefs[fieldName]) {\n        var suggestions = suggestionList(fieldName, Object.keys(type.getFields()));\n        onError(pathToArray(path), inputValue, new GraphQLError(\"Field \\\"\".concat(fieldName, \"\\\" is not defined by type \\\"\").concat(type.name, \"\\\".\") + didYouMean(suggestions)));\n      }\n    }\n\n    return coercedValue;\n  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n  if (isLeafType(type)) {\n    var parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),\n    // which can throw to indicate failure. If it throws, maintain a reference\n    // to the original error.\n\n    try {\n      parseResult = type.parseValue(inputValue);\n    } catch (error) {\n      if (error instanceof GraphQLError) {\n        onError(pathToArray(path), inputValue, error);\n      } else {\n        onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \\\"\".concat(type.name, \"\\\". \") + error.message, undefined, undefined, undefined, undefined, error));\n      }\n\n      return;\n    }\n\n    if (parseResult === undefined) {\n      onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \\\"\".concat(type.name, \"\\\".\")));\n    }\n\n    return parseResult;\n  } // istanbul ignore next (Not reachable. All possible input types have been considered)\n\n\n  false || invariant(0, 'Unexpected input type: ' + inspect(type));\n}","map":{"version":3,"sources":["C:/Users/HP/Desktop/project/ecommerce-spring-reactjs-master/frontend/node_modules/graphql/utilities/coerceInputValue.mjs"],"names":["objectValues","inspect","invariant","didYouMean","isObjectLike","safeArrayFrom","suggestionList","printPathArray","addPath","pathToArray","GraphQLError","isLeafType","isInputObjectType","isListType","isNonNullType","coerceInputValue","inputValue","type","onError","arguments","length","undefined","defaultOnError","coerceInputValueImpl","path","invalidValue","error","errorPrefix","concat","message","ofType","itemType","coercedList","itemValue","index","itemPath","name","coercedValue","fieldDefs","getFields","_i2","_objectValues2","field","fieldValue","defaultValue","typeStr","_i4","_Object$keys2","Object","keys","fieldName","suggestions","parseResult","parseValue"],"mappings":"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","sourcesContent":["import objectValues from \"../polyfills/objectValues.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport didYouMean from \"../jsutils/didYouMean.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport safeArrayFrom from \"../jsutils/safeArrayFrom.mjs\";\nimport suggestionList from \"../jsutils/suggestionList.mjs\";\nimport printPathArray from \"../jsutils/printPathArray.mjs\";\nimport { addPath, pathToArray } from \"../jsutils/Path.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { isLeafType, isInputObjectType, isListType, isNonNullType } from \"../type/definition.mjs\";\n\n/**\n * Coerces a JavaScript value given a GraphQL Input Type.\n */\nexport function coerceInputValue(inputValue, type) {\n  var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultOnError;\n  return coerceInputValueImpl(inputValue, type, onError);\n}\n\nfunction defaultOnError(path, invalidValue, error) {\n  var errorPrefix = 'Invalid value ' + inspect(invalidValue);\n\n  if (path.length > 0) {\n    errorPrefix += \" at \\\"value\".concat(printPathArray(path), \"\\\"\");\n  }\n\n  error.message = errorPrefix + ': ' + error.message;\n  throw error;\n}\n\nfunction coerceInputValueImpl(inputValue, type, onError, path) {\n  if (isNonNullType(type)) {\n    if (inputValue != null) {\n      return coerceInputValueImpl(inputValue, type.ofType, onError, path);\n    }\n\n    onError(pathToArray(path), inputValue, new GraphQLError(\"Expected non-nullable type \\\"\".concat(inspect(type), \"\\\" not to be null.\")));\n    return;\n  }\n\n  if (inputValue == null) {\n    // Explicitly return the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n    var coercedList = safeArrayFrom(inputValue, function (itemValue, index) {\n      var itemPath = addPath(path, index, undefined);\n      return coerceInputValueImpl(itemValue, itemType, onError, itemPath);\n    });\n\n    if (coercedList != null) {\n      return coercedList;\n    } // Lists accept a non-list value as a list of one.\n\n\n    return [coerceInputValueImpl(inputValue, itemType, onError, path)];\n  }\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(inputValue)) {\n      onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \\\"\".concat(type.name, \"\\\" to be an object.\")));\n      return;\n    }\n\n    var coercedValue = {};\n    var fieldDefs = type.getFields();\n\n    for (var _i2 = 0, _objectValues2 = objectValues(fieldDefs); _i2 < _objectValues2.length; _i2++) {\n      var field = _objectValues2[_i2];\n      var fieldValue = inputValue[field.name];\n\n      if (fieldValue === undefined) {\n        if (field.defaultValue !== undefined) {\n          coercedValue[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          var typeStr = inspect(field.type);\n          onError(pathToArray(path), inputValue, new GraphQLError(\"Field \\\"\".concat(field.name, \"\\\" of required type \\\"\").concat(typeStr, \"\\\" was not provided.\")));\n        }\n\n        continue;\n      }\n\n      coercedValue[field.name] = coerceInputValueImpl(fieldValue, field.type, onError, addPath(path, field.name, type.name));\n    } // Ensure every provided field is defined.\n\n\n    for (var _i4 = 0, _Object$keys2 = Object.keys(inputValue); _i4 < _Object$keys2.length; _i4++) {\n      var fieldName = _Object$keys2[_i4];\n\n      if (!fieldDefs[fieldName]) {\n        var suggestions = suggestionList(fieldName, Object.keys(type.getFields()));\n        onError(pathToArray(path), inputValue, new GraphQLError(\"Field \\\"\".concat(fieldName, \"\\\" is not defined by type \\\"\").concat(type.name, \"\\\".\") + didYouMean(suggestions)));\n      }\n    }\n\n    return coercedValue;\n  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n  if (isLeafType(type)) {\n    var parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),\n    // which can throw to indicate failure. If it throws, maintain a reference\n    // to the original error.\n\n    try {\n      parseResult = type.parseValue(inputValue);\n    } catch (error) {\n      if (error instanceof GraphQLError) {\n        onError(pathToArray(path), inputValue, error);\n      } else {\n        onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \\\"\".concat(type.name, \"\\\". \") + error.message, undefined, undefined, undefined, undefined, error));\n      }\n\n      return;\n    }\n\n    if (parseResult === undefined) {\n      onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \\\"\".concat(type.name, \"\\\".\")));\n    }\n\n    return parseResult;\n  } // istanbul ignore next (Not reachable. All possible input types have been considered)\n\n\n  false || invariant(0, 'Unexpected input type: ' + inspect(type));\n}\n"]},"metadata":{},"sourceType":"module"}