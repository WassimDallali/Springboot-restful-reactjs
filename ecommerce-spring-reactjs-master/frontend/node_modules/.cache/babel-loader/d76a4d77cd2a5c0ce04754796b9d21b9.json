{"ast":null,"code":"import inspect from \"../../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { isCompositeType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\nimport { doTypesOverlap } from \"../../utilities/typeComparators.mjs\";\n/**\n * Possible fragment spread\n *\n * A fragment spread is only valid if the type condition could ever possibly\n * be true: if there is a non-empty intersection of the possible parent types,\n * and possible types which pass the type condition.\n */\n\nexport function PossibleFragmentSpreadsRule(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var fragType = context.getType();\n      var parentType = context.getParentType();\n\n      if (isCompositeType(fragType) && isCompositeType(parentType) && !doTypesOverlap(context.getSchema(), fragType, parentType)) {\n        var parentTypeStr = inspect(parentType);\n        var fragTypeStr = inspect(fragType);\n        context.reportError(new GraphQLError(\"Fragment cannot be spread here as objects of type \\\"\".concat(parentTypeStr, \"\\\" can never be of type \\\"\").concat(fragTypeStr, \"\\\".\"), node));\n      }\n    },\n    FragmentSpread: function FragmentSpread(node) {\n      var fragName = node.name.value;\n      var fragType = getFragmentType(context, fragName);\n      var parentType = context.getParentType();\n\n      if (fragType && parentType && !doTypesOverlap(context.getSchema(), fragType, parentType)) {\n        var parentTypeStr = inspect(parentType);\n        var fragTypeStr = inspect(fragType);\n        context.reportError(new GraphQLError(\"Fragment \\\"\".concat(fragName, \"\\\" cannot be spread here as objects of type \\\"\").concat(parentTypeStr, \"\\\" can never be of type \\\"\").concat(fragTypeStr, \"\\\".\"), node));\n      }\n    }\n  };\n}\n\nfunction getFragmentType(context, name) {\n  var frag = context.getFragment(name);\n\n  if (frag) {\n    var type = typeFromAST(context.getSchema(), frag.typeCondition);\n\n    if (isCompositeType(type)) {\n      return type;\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/HP/Desktop/project/ecommerce-spring-reactjs-master/frontend/node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs"],"names":["inspect","GraphQLError","isCompositeType","typeFromAST","doTypesOverlap","PossibleFragmentSpreadsRule","context","InlineFragment","node","fragType","getType","parentType","getParentType","getSchema","parentTypeStr","fragTypeStr","reportError","concat","FragmentSpread","fragName","name","value","getFragmentType","frag","getFragment","type","typeCondition"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,2BAApB;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,SAASC,eAAT,QAAgC,2BAAhC;AACA,SAASC,WAAT,QAA4B,iCAA5B;AACA,SAASC,cAAT,QAA+B,qCAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,2BAAT,CAAqCC,OAArC,EAA8C;AACnD,SAAO;AACLC,IAAAA,cAAc,EAAE,SAASA,cAAT,CAAwBC,IAAxB,EAA8B;AAC5C,UAAIC,QAAQ,GAAGH,OAAO,CAACI,OAAR,EAAf;AACA,UAAIC,UAAU,GAAGL,OAAO,CAACM,aAAR,EAAjB;;AAEA,UAAIV,eAAe,CAACO,QAAD,CAAf,IAA6BP,eAAe,CAACS,UAAD,CAA5C,IAA4D,CAACP,cAAc,CAACE,OAAO,CAACO,SAAR,EAAD,EAAsBJ,QAAtB,EAAgCE,UAAhC,CAA/E,EAA4H;AAC1H,YAAIG,aAAa,GAAGd,OAAO,CAACW,UAAD,CAA3B;AACA,YAAII,WAAW,GAAGf,OAAO,CAACS,QAAD,CAAzB;AACAH,QAAAA,OAAO,CAACU,WAAR,CAAoB,IAAIf,YAAJ,CAAiB,uDAAuDgB,MAAvD,CAA8DH,aAA9D,EAA6E,4BAA7E,EAA2GG,MAA3G,CAAkHF,WAAlH,EAA+H,KAA/H,CAAjB,EAAwJP,IAAxJ,CAApB;AACD;AACF,KAVI;AAWLU,IAAAA,cAAc,EAAE,SAASA,cAAT,CAAwBV,IAAxB,EAA8B;AAC5C,UAAIW,QAAQ,GAAGX,IAAI,CAACY,IAAL,CAAUC,KAAzB;AACA,UAAIZ,QAAQ,GAAGa,eAAe,CAAChB,OAAD,EAAUa,QAAV,CAA9B;AACA,UAAIR,UAAU,GAAGL,OAAO,CAACM,aAAR,EAAjB;;AAEA,UAAIH,QAAQ,IAAIE,UAAZ,IAA0B,CAACP,cAAc,CAACE,OAAO,CAACO,SAAR,EAAD,EAAsBJ,QAAtB,EAAgCE,UAAhC,CAA7C,EAA0F;AACxF,YAAIG,aAAa,GAAGd,OAAO,CAACW,UAAD,CAA3B;AACA,YAAII,WAAW,GAAGf,OAAO,CAACS,QAAD,CAAzB;AACAH,QAAAA,OAAO,CAACU,WAAR,CAAoB,IAAIf,YAAJ,CAAiB,cAAcgB,MAAd,CAAqBE,QAArB,EAA+B,gDAA/B,EAAiFF,MAAjF,CAAwFH,aAAxF,EAAuG,4BAAvG,EAAqIG,MAArI,CAA4IF,WAA5I,EAAyJ,KAAzJ,CAAjB,EAAkLP,IAAlL,CAApB;AACD;AACF;AArBI,GAAP;AAuBD;;AAED,SAASc,eAAT,CAAyBhB,OAAzB,EAAkCc,IAAlC,EAAwC;AACtC,MAAIG,IAAI,GAAGjB,OAAO,CAACkB,WAAR,CAAoBJ,IAApB,CAAX;;AAEA,MAAIG,IAAJ,EAAU;AACR,QAAIE,IAAI,GAAGtB,WAAW,CAACG,OAAO,CAACO,SAAR,EAAD,EAAsBU,IAAI,CAACG,aAA3B,CAAtB;;AAEA,QAAIxB,eAAe,CAACuB,IAAD,CAAnB,EAA2B;AACzB,aAAOA,IAAP;AACD;AACF;AACF","sourcesContent":["import inspect from \"../../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { isCompositeType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\nimport { doTypesOverlap } from \"../../utilities/typeComparators.mjs\";\n\n/**\n * Possible fragment spread\n *\n * A fragment spread is only valid if the type condition could ever possibly\n * be true: if there is a non-empty intersection of the possible parent types,\n * and possible types which pass the type condition.\n */\nexport function PossibleFragmentSpreadsRule(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var fragType = context.getType();\n      var parentType = context.getParentType();\n\n      if (isCompositeType(fragType) && isCompositeType(parentType) && !doTypesOverlap(context.getSchema(), fragType, parentType)) {\n        var parentTypeStr = inspect(parentType);\n        var fragTypeStr = inspect(fragType);\n        context.reportError(new GraphQLError(\"Fragment cannot be spread here as objects of type \\\"\".concat(parentTypeStr, \"\\\" can never be of type \\\"\").concat(fragTypeStr, \"\\\".\"), node));\n      }\n    },\n    FragmentSpread: function FragmentSpread(node) {\n      var fragName = node.name.value;\n      var fragType = getFragmentType(context, fragName);\n      var parentType = context.getParentType();\n\n      if (fragType && parentType && !doTypesOverlap(context.getSchema(), fragType, parentType)) {\n        var parentTypeStr = inspect(parentType);\n        var fragTypeStr = inspect(fragType);\n        context.reportError(new GraphQLError(\"Fragment \\\"\".concat(fragName, \"\\\" cannot be spread here as objects of type \\\"\").concat(parentTypeStr, \"\\\" can never be of type \\\"\").concat(fragTypeStr, \"\\\".\"), node));\n      }\n    }\n  };\n}\n\nfunction getFragmentType(context, name) {\n  var frag = context.getFragment(name);\n\n  if (frag) {\n    var type = typeFromAST(context.getSchema(), frag.typeCondition);\n\n    if (isCompositeType(type)) {\n      return type;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}