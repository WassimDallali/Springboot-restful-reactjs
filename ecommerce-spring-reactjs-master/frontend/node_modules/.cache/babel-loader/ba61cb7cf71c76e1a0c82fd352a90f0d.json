{"ast":null,"code":"import { visit } from \"./visitor.mjs\";\nimport { printBlockString } from \"./blockString.mjs\";\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nexport function print(ast) {\n  return visit(ast, {\n    leave: printDocASTReducer\n  });\n}\nvar MAX_LINE_LENGTH = 80; // TODO: provide better type coverage in future\n\nvar printDocASTReducer = {\n  Name: function Name(node) {\n    return node.value;\n  },\n  Variable: function Variable(node) {\n    return '$' + node.name;\n  },\n  // Document\n  Document: function Document(node) {\n    return join(node.definitions, '\\n\\n') + '\\n';\n  },\n  OperationDefinition: function OperationDefinition(node) {\n    var op = node.operation;\n    var name = node.name;\n    var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n    var directives = join(node.directives, ' ');\n    var selectionSet = node.selectionSet; // Anonymous queries with no directives or variable definitions can use\n    // the query short form.\n\n    return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');\n  },\n  VariableDefinition: function VariableDefinition(_ref) {\n    var variable = _ref.variable,\n        type = _ref.type,\n        defaultValue = _ref.defaultValue,\n        directives = _ref.directives;\n    return variable + ': ' + type + wrap(' = ', defaultValue) + wrap(' ', join(directives, ' '));\n  },\n  SelectionSet: function SelectionSet(_ref2) {\n    var selections = _ref2.selections;\n    return block(selections);\n  },\n  Field: function Field(_ref3) {\n    var alias = _ref3.alias,\n        name = _ref3.name,\n        args = _ref3.arguments,\n        directives = _ref3.directives,\n        selectionSet = _ref3.selectionSet;\n    var prefix = wrap('', alias, ': ') + name;\n    var argsLine = prefix + wrap('(', join(args, ', '), ')');\n\n    if (argsLine.length > MAX_LINE_LENGTH) {\n      argsLine = prefix + wrap('(\\n', indent(join(args, '\\n')), '\\n)');\n    }\n\n    return join([argsLine, join(directives, ' '), selectionSet], ' ');\n  },\n  Argument: function Argument(_ref4) {\n    var name = _ref4.name,\n        value = _ref4.value;\n    return name + ': ' + value;\n  },\n  // Fragments\n  FragmentSpread: function FragmentSpread(_ref5) {\n    var name = _ref5.name,\n        directives = _ref5.directives;\n    return '...' + name + wrap(' ', join(directives, ' '));\n  },\n  InlineFragment: function InlineFragment(_ref6) {\n    var typeCondition = _ref6.typeCondition,\n        directives = _ref6.directives,\n        selectionSet = _ref6.selectionSet;\n    return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');\n  },\n  FragmentDefinition: function FragmentDefinition(_ref7) {\n    var name = _ref7.name,\n        typeCondition = _ref7.typeCondition,\n        variableDefinitions = _ref7.variableDefinitions,\n        directives = _ref7.directives,\n        selectionSet = _ref7.selectionSet;\n    return (// Note: fragment variable definitions are experimental and may be changed\n      // or removed in the future.\n      \"fragment \".concat(name).concat(wrap('(', join(variableDefinitions, ', '), ')'), \" \") + \"on \".concat(typeCondition, \" \").concat(wrap('', join(directives, ' '), ' ')) + selectionSet\n    );\n  },\n  // Value\n  IntValue: function IntValue(_ref8) {\n    var value = _ref8.value;\n    return value;\n  },\n  FloatValue: function FloatValue(_ref9) {\n    var value = _ref9.value;\n    return value;\n  },\n  StringValue: function StringValue(_ref10, key) {\n    var value = _ref10.value,\n        isBlockString = _ref10.block;\n    return isBlockString ? printBlockString(value, key === 'description' ? '' : '  ') : JSON.stringify(value);\n  },\n  BooleanValue: function BooleanValue(_ref11) {\n    var value = _ref11.value;\n    return value ? 'true' : 'false';\n  },\n  NullValue: function NullValue() {\n    return 'null';\n  },\n  EnumValue: function EnumValue(_ref12) {\n    var value = _ref12.value;\n    return value;\n  },\n  ListValue: function ListValue(_ref13) {\n    var values = _ref13.values;\n    return '[' + join(values, ', ') + ']';\n  },\n  ObjectValue: function ObjectValue(_ref14) {\n    var fields = _ref14.fields;\n    return '{' + join(fields, ', ') + '}';\n  },\n  ObjectField: function ObjectField(_ref15) {\n    var name = _ref15.name,\n        value = _ref15.value;\n    return name + ': ' + value;\n  },\n  // Directive\n  Directive: function Directive(_ref16) {\n    var name = _ref16.name,\n        args = _ref16.arguments;\n    return '@' + name + wrap('(', join(args, ', '), ')');\n  },\n  // Type\n  NamedType: function NamedType(_ref17) {\n    var name = _ref17.name;\n    return name;\n  },\n  ListType: function ListType(_ref18) {\n    var type = _ref18.type;\n    return '[' + type + ']';\n  },\n  NonNullType: function NonNullType(_ref19) {\n    var type = _ref19.type;\n    return type + '!';\n  },\n  // Type System Definitions\n  SchemaDefinition: addDescription(function (_ref20) {\n    var directives = _ref20.directives,\n        operationTypes = _ref20.operationTypes;\n    return join(['schema', join(directives, ' '), block(operationTypes)], ' ');\n  }),\n  OperationTypeDefinition: function OperationTypeDefinition(_ref21) {\n    var operation = _ref21.operation,\n        type = _ref21.type;\n    return operation + ': ' + type;\n  },\n  ScalarTypeDefinition: addDescription(function (_ref22) {\n    var name = _ref22.name,\n        directives = _ref22.directives;\n    return join(['scalar', name, join(directives, ' ')], ' ');\n  }),\n  ObjectTypeDefinition: addDescription(function (_ref23) {\n    var name = _ref23.name,\n        interfaces = _ref23.interfaces,\n        directives = _ref23.directives,\n        fields = _ref23.fields;\n    return join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  }),\n  FieldDefinition: addDescription(function (_ref24) {\n    var name = _ref24.name,\n        args = _ref24.arguments,\n        type = _ref24.type,\n        directives = _ref24.directives;\n    return name + (hasMultilineItems(args) ? wrap('(\\n', indent(join(args, '\\n')), '\\n)') : wrap('(', join(args, ', '), ')')) + ': ' + type + wrap(' ', join(directives, ' '));\n  }),\n  InputValueDefinition: addDescription(function (_ref25) {\n    var name = _ref25.name,\n        type = _ref25.type,\n        defaultValue = _ref25.defaultValue,\n        directives = _ref25.directives;\n    return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');\n  }),\n  InterfaceTypeDefinition: addDescription(function (_ref26) {\n    var name = _ref26.name,\n        interfaces = _ref26.interfaces,\n        directives = _ref26.directives,\n        fields = _ref26.fields;\n    return join(['interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  }),\n  UnionTypeDefinition: addDescription(function (_ref27) {\n    var name = _ref27.name,\n        directives = _ref27.directives,\n        types = _ref27.types;\n    return join(['union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  }),\n  EnumTypeDefinition: addDescription(function (_ref28) {\n    var name = _ref28.name,\n        directives = _ref28.directives,\n        values = _ref28.values;\n    return join(['enum', name, join(directives, ' '), block(values)], ' ');\n  }),\n  EnumValueDefinition: addDescription(function (_ref29) {\n    var name = _ref29.name,\n        directives = _ref29.directives;\n    return join([name, join(directives, ' ')], ' ');\n  }),\n  InputObjectTypeDefinition: addDescription(function (_ref30) {\n    var name = _ref30.name,\n        directives = _ref30.directives,\n        fields = _ref30.fields;\n    return join(['input', name, join(directives, ' '), block(fields)], ' ');\n  }),\n  DirectiveDefinition: addDescription(function (_ref31) {\n    var name = _ref31.name,\n        args = _ref31.arguments,\n        repeatable = _ref31.repeatable,\n        locations = _ref31.locations;\n    return 'directive @' + name + (hasMultilineItems(args) ? wrap('(\\n', indent(join(args, '\\n')), '\\n)') : wrap('(', join(args, ', '), ')')) + (repeatable ? ' repeatable' : '') + ' on ' + join(locations, ' | ');\n  }),\n  SchemaExtension: function SchemaExtension(_ref32) {\n    var directives = _ref32.directives,\n        operationTypes = _ref32.operationTypes;\n    return join(['extend schema', join(directives, ' '), block(operationTypes)], ' ');\n  },\n  ScalarTypeExtension: function ScalarTypeExtension(_ref33) {\n    var name = _ref33.name,\n        directives = _ref33.directives;\n    return join(['extend scalar', name, join(directives, ' ')], ' ');\n  },\n  ObjectTypeExtension: function ObjectTypeExtension(_ref34) {\n    var name = _ref34.name,\n        interfaces = _ref34.interfaces,\n        directives = _ref34.directives,\n        fields = _ref34.fields;\n    return join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  },\n  InterfaceTypeExtension: function InterfaceTypeExtension(_ref35) {\n    var name = _ref35.name,\n        interfaces = _ref35.interfaces,\n        directives = _ref35.directives,\n        fields = _ref35.fields;\n    return join(['extend interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  },\n  UnionTypeExtension: function UnionTypeExtension(_ref36) {\n    var name = _ref36.name,\n        directives = _ref36.directives,\n        types = _ref36.types;\n    return join(['extend union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  },\n  EnumTypeExtension: function EnumTypeExtension(_ref37) {\n    var name = _ref37.name,\n        directives = _ref37.directives,\n        values = _ref37.values;\n    return join(['extend enum', name, join(directives, ' '), block(values)], ' ');\n  },\n  InputObjectTypeExtension: function InputObjectTypeExtension(_ref38) {\n    var name = _ref38.name,\n        directives = _ref38.directives,\n        fields = _ref38.fields;\n    return join(['extend input', name, join(directives, ' '), block(fields)], ' ');\n  }\n};\n\nfunction addDescription(cb) {\n  return function (node) {\n    return join([node.description, cb(node)], '\\n');\n  };\n}\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\n\nfunction join(maybeArray) {\n  var _maybeArray$filter$jo;\n\n  var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter(function (x) {\n    return x;\n  }).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an\n * indented \"{ }\" block.\n */\n\n\nfunction block(array) {\n  return wrap('{\\n', indent(join(array, '\\n')), '\\n}');\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.\n */\n\n\nfunction wrap(start, maybeString) {\n  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  return maybeString != null && maybeString !== '' ? start + maybeString + end : '';\n}\n\nfunction indent(str) {\n  return wrap('  ', str.replace(/\\n/g, '\\n  '));\n}\n\nfunction isMultiline(str) {\n  return str.indexOf('\\n') !== -1;\n}\n\nfunction hasMultilineItems(maybeArray) {\n  return maybeArray != null && maybeArray.some(isMultiline);\n}","map":{"version":3,"sources":["C:/Users/HP/Desktop/project/ecommerce-spring-reactjs-master/frontend/node_modules/graphql/language/printer.mjs"],"names":["visit","printBlockString","print","ast","leave","printDocASTReducer","MAX_LINE_LENGTH","Name","node","value","Variable","name","Document","join","definitions","OperationDefinition","op","operation","varDefs","wrap","variableDefinitions","directives","selectionSet","VariableDefinition","_ref","variable","type","defaultValue","SelectionSet","_ref2","selections","block","Field","_ref3","alias","args","arguments","prefix","argsLine","length","indent","Argument","_ref4","FragmentSpread","_ref5","InlineFragment","_ref6","typeCondition","FragmentDefinition","_ref7","concat","IntValue","_ref8","FloatValue","_ref9","StringValue","_ref10","key","isBlockString","JSON","stringify","BooleanValue","_ref11","NullValue","EnumValue","_ref12","ListValue","_ref13","values","ObjectValue","_ref14","fields","ObjectField","_ref15","Directive","_ref16","NamedType","_ref17","ListType","_ref18","NonNullType","_ref19","SchemaDefinition","addDescription","_ref20","operationTypes","OperationTypeDefinition","_ref21","ScalarTypeDefinition","_ref22","ObjectTypeDefinition","_ref23","interfaces","FieldDefinition","_ref24","hasMultilineItems","InputValueDefinition","_ref25","InterfaceTypeDefinition","_ref26","UnionTypeDefinition","_ref27","types","EnumTypeDefinition","_ref28","EnumValueDefinition","_ref29","InputObjectTypeDefinition","_ref30","DirectiveDefinition","_ref31","repeatable","locations","SchemaExtension","_ref32","ScalarTypeExtension","_ref33","ObjectTypeExtension","_ref34","InterfaceTypeExtension","_ref35","UnionTypeExtension","_ref36","EnumTypeExtension","_ref37","InputObjectTypeExtension","_ref38","cb","description","maybeArray","_maybeArray$filter$jo","separator","undefined","filter","x","array","start","maybeString","end","str","replace","isMultiline","indexOf","some"],"mappings":"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","sourcesContent":["import { visit } from \"./visitor.mjs\";\nimport { printBlockString } from \"./blockString.mjs\";\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nexport function print(ast) {\n  return visit(ast, {\n    leave: printDocASTReducer\n  });\n}\nvar MAX_LINE_LENGTH = 80; // TODO: provide better type coverage in future\n\nvar printDocASTReducer = {\n  Name: function Name(node) {\n    return node.value;\n  },\n  Variable: function Variable(node) {\n    return '$' + node.name;\n  },\n  // Document\n  Document: function Document(node) {\n    return join(node.definitions, '\\n\\n') + '\\n';\n  },\n  OperationDefinition: function OperationDefinition(node) {\n    var op = node.operation;\n    var name = node.name;\n    var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n    var directives = join(node.directives, ' ');\n    var selectionSet = node.selectionSet; // Anonymous queries with no directives or variable definitions can use\n    // the query short form.\n\n    return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');\n  },\n  VariableDefinition: function VariableDefinition(_ref) {\n    var variable = _ref.variable,\n        type = _ref.type,\n        defaultValue = _ref.defaultValue,\n        directives = _ref.directives;\n    return variable + ': ' + type + wrap(' = ', defaultValue) + wrap(' ', join(directives, ' '));\n  },\n  SelectionSet: function SelectionSet(_ref2) {\n    var selections = _ref2.selections;\n    return block(selections);\n  },\n  Field: function Field(_ref3) {\n    var alias = _ref3.alias,\n        name = _ref3.name,\n        args = _ref3.arguments,\n        directives = _ref3.directives,\n        selectionSet = _ref3.selectionSet;\n    var prefix = wrap('', alias, ': ') + name;\n    var argsLine = prefix + wrap('(', join(args, ', '), ')');\n\n    if (argsLine.length > MAX_LINE_LENGTH) {\n      argsLine = prefix + wrap('(\\n', indent(join(args, '\\n')), '\\n)');\n    }\n\n    return join([argsLine, join(directives, ' '), selectionSet], ' ');\n  },\n  Argument: function Argument(_ref4) {\n    var name = _ref4.name,\n        value = _ref4.value;\n    return name + ': ' + value;\n  },\n  // Fragments\n  FragmentSpread: function FragmentSpread(_ref5) {\n    var name = _ref5.name,\n        directives = _ref5.directives;\n    return '...' + name + wrap(' ', join(directives, ' '));\n  },\n  InlineFragment: function InlineFragment(_ref6) {\n    var typeCondition = _ref6.typeCondition,\n        directives = _ref6.directives,\n        selectionSet = _ref6.selectionSet;\n    return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');\n  },\n  FragmentDefinition: function FragmentDefinition(_ref7) {\n    var name = _ref7.name,\n        typeCondition = _ref7.typeCondition,\n        variableDefinitions = _ref7.variableDefinitions,\n        directives = _ref7.directives,\n        selectionSet = _ref7.selectionSet;\n    return (// Note: fragment variable definitions are experimental and may be changed\n      // or removed in the future.\n      \"fragment \".concat(name).concat(wrap('(', join(variableDefinitions, ', '), ')'), \" \") + \"on \".concat(typeCondition, \" \").concat(wrap('', join(directives, ' '), ' ')) + selectionSet\n    );\n  },\n  // Value\n  IntValue: function IntValue(_ref8) {\n    var value = _ref8.value;\n    return value;\n  },\n  FloatValue: function FloatValue(_ref9) {\n    var value = _ref9.value;\n    return value;\n  },\n  StringValue: function StringValue(_ref10, key) {\n    var value = _ref10.value,\n        isBlockString = _ref10.block;\n    return isBlockString ? printBlockString(value, key === 'description' ? '' : '  ') : JSON.stringify(value);\n  },\n  BooleanValue: function BooleanValue(_ref11) {\n    var value = _ref11.value;\n    return value ? 'true' : 'false';\n  },\n  NullValue: function NullValue() {\n    return 'null';\n  },\n  EnumValue: function EnumValue(_ref12) {\n    var value = _ref12.value;\n    return value;\n  },\n  ListValue: function ListValue(_ref13) {\n    var values = _ref13.values;\n    return '[' + join(values, ', ') + ']';\n  },\n  ObjectValue: function ObjectValue(_ref14) {\n    var fields = _ref14.fields;\n    return '{' + join(fields, ', ') + '}';\n  },\n  ObjectField: function ObjectField(_ref15) {\n    var name = _ref15.name,\n        value = _ref15.value;\n    return name + ': ' + value;\n  },\n  // Directive\n  Directive: function Directive(_ref16) {\n    var name = _ref16.name,\n        args = _ref16.arguments;\n    return '@' + name + wrap('(', join(args, ', '), ')');\n  },\n  // Type\n  NamedType: function NamedType(_ref17) {\n    var name = _ref17.name;\n    return name;\n  },\n  ListType: function ListType(_ref18) {\n    var type = _ref18.type;\n    return '[' + type + ']';\n  },\n  NonNullType: function NonNullType(_ref19) {\n    var type = _ref19.type;\n    return type + '!';\n  },\n  // Type System Definitions\n  SchemaDefinition: addDescription(function (_ref20) {\n    var directives = _ref20.directives,\n        operationTypes = _ref20.operationTypes;\n    return join(['schema', join(directives, ' '), block(operationTypes)], ' ');\n  }),\n  OperationTypeDefinition: function OperationTypeDefinition(_ref21) {\n    var operation = _ref21.operation,\n        type = _ref21.type;\n    return operation + ': ' + type;\n  },\n  ScalarTypeDefinition: addDescription(function (_ref22) {\n    var name = _ref22.name,\n        directives = _ref22.directives;\n    return join(['scalar', name, join(directives, ' ')], ' ');\n  }),\n  ObjectTypeDefinition: addDescription(function (_ref23) {\n    var name = _ref23.name,\n        interfaces = _ref23.interfaces,\n        directives = _ref23.directives,\n        fields = _ref23.fields;\n    return join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  }),\n  FieldDefinition: addDescription(function (_ref24) {\n    var name = _ref24.name,\n        args = _ref24.arguments,\n        type = _ref24.type,\n        directives = _ref24.directives;\n    return name + (hasMultilineItems(args) ? wrap('(\\n', indent(join(args, '\\n')), '\\n)') : wrap('(', join(args, ', '), ')')) + ': ' + type + wrap(' ', join(directives, ' '));\n  }),\n  InputValueDefinition: addDescription(function (_ref25) {\n    var name = _ref25.name,\n        type = _ref25.type,\n        defaultValue = _ref25.defaultValue,\n        directives = _ref25.directives;\n    return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');\n  }),\n  InterfaceTypeDefinition: addDescription(function (_ref26) {\n    var name = _ref26.name,\n        interfaces = _ref26.interfaces,\n        directives = _ref26.directives,\n        fields = _ref26.fields;\n    return join(['interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  }),\n  UnionTypeDefinition: addDescription(function (_ref27) {\n    var name = _ref27.name,\n        directives = _ref27.directives,\n        types = _ref27.types;\n    return join(['union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  }),\n  EnumTypeDefinition: addDescription(function (_ref28) {\n    var name = _ref28.name,\n        directives = _ref28.directives,\n        values = _ref28.values;\n    return join(['enum', name, join(directives, ' '), block(values)], ' ');\n  }),\n  EnumValueDefinition: addDescription(function (_ref29) {\n    var name = _ref29.name,\n        directives = _ref29.directives;\n    return join([name, join(directives, ' ')], ' ');\n  }),\n  InputObjectTypeDefinition: addDescription(function (_ref30) {\n    var name = _ref30.name,\n        directives = _ref30.directives,\n        fields = _ref30.fields;\n    return join(['input', name, join(directives, ' '), block(fields)], ' ');\n  }),\n  DirectiveDefinition: addDescription(function (_ref31) {\n    var name = _ref31.name,\n        args = _ref31.arguments,\n        repeatable = _ref31.repeatable,\n        locations = _ref31.locations;\n    return 'directive @' + name + (hasMultilineItems(args) ? wrap('(\\n', indent(join(args, '\\n')), '\\n)') : wrap('(', join(args, ', '), ')')) + (repeatable ? ' repeatable' : '') + ' on ' + join(locations, ' | ');\n  }),\n  SchemaExtension: function SchemaExtension(_ref32) {\n    var directives = _ref32.directives,\n        operationTypes = _ref32.operationTypes;\n    return join(['extend schema', join(directives, ' '), block(operationTypes)], ' ');\n  },\n  ScalarTypeExtension: function ScalarTypeExtension(_ref33) {\n    var name = _ref33.name,\n        directives = _ref33.directives;\n    return join(['extend scalar', name, join(directives, ' ')], ' ');\n  },\n  ObjectTypeExtension: function ObjectTypeExtension(_ref34) {\n    var name = _ref34.name,\n        interfaces = _ref34.interfaces,\n        directives = _ref34.directives,\n        fields = _ref34.fields;\n    return join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  },\n  InterfaceTypeExtension: function InterfaceTypeExtension(_ref35) {\n    var name = _ref35.name,\n        interfaces = _ref35.interfaces,\n        directives = _ref35.directives,\n        fields = _ref35.fields;\n    return join(['extend interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  },\n  UnionTypeExtension: function UnionTypeExtension(_ref36) {\n    var name = _ref36.name,\n        directives = _ref36.directives,\n        types = _ref36.types;\n    return join(['extend union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  },\n  EnumTypeExtension: function EnumTypeExtension(_ref37) {\n    var name = _ref37.name,\n        directives = _ref37.directives,\n        values = _ref37.values;\n    return join(['extend enum', name, join(directives, ' '), block(values)], ' ');\n  },\n  InputObjectTypeExtension: function InputObjectTypeExtension(_ref38) {\n    var name = _ref38.name,\n        directives = _ref38.directives,\n        fields = _ref38.fields;\n    return join(['extend input', name, join(directives, ' '), block(fields)], ' ');\n  }\n};\n\nfunction addDescription(cb) {\n  return function (node) {\n    return join([node.description, cb(node)], '\\n');\n  };\n}\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\n\nfunction join(maybeArray) {\n  var _maybeArray$filter$jo;\n\n  var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter(function (x) {\n    return x;\n  }).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an\n * indented \"{ }\" block.\n */\n\n\nfunction block(array) {\n  return wrap('{\\n', indent(join(array, '\\n')), '\\n}');\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.\n */\n\n\nfunction wrap(start, maybeString) {\n  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  return maybeString != null && maybeString !== '' ? start + maybeString + end : '';\n}\n\nfunction indent(str) {\n  return wrap('  ', str.replace(/\\n/g, '\\n  '));\n}\n\nfunction isMultiline(str) {\n  return str.indexOf('\\n') !== -1;\n}\n\nfunction hasMultilineItems(maybeArray) {\n  return maybeArray != null && maybeArray.some(isMultiline);\n}\n"]},"metadata":{},"sourceType":"module"}