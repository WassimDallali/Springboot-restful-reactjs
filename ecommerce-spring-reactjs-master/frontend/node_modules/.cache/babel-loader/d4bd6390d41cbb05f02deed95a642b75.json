{"ast":null,"code":"import invariant from \"../../../jsutils/invariant.mjs\";\nimport { GraphQLError } from \"../../../error/GraphQLError.mjs\";\nimport { getNamedType, isInputObjectType } from \"../../../type/definition.mjs\";\n/**\n * No deprecated\n *\n * A GraphQL document is only valid if all selected fields and all used enum values have not been\n * deprecated.\n *\n * Note: This rule is optional and is not part of the Validation section of the GraphQL\n * Specification. The main purpose of this rule is detection of deprecated usages and not\n * necessarily to forbid their use when querying a service.\n */\n\nexport function NoDeprecatedCustomRule(context) {\n  return {\n    Field: function Field(node) {\n      var fieldDef = context.getFieldDef();\n      var deprecationReason = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.deprecationReason;\n\n      if (fieldDef && deprecationReason != null) {\n        var parentType = context.getParentType();\n        parentType != null || invariant(0);\n        context.reportError(new GraphQLError(\"The field \".concat(parentType.name, \".\").concat(fieldDef.name, \" is deprecated. \").concat(deprecationReason), node));\n      }\n    },\n    Argument: function Argument(node) {\n      var argDef = context.getArgument();\n      var deprecationReason = argDef === null || argDef === void 0 ? void 0 : argDef.deprecationReason;\n\n      if (argDef && deprecationReason != null) {\n        var directiveDef = context.getDirective();\n\n        if (directiveDef != null) {\n          context.reportError(new GraphQLError(\"Directive \\\"@\".concat(directiveDef.name, \"\\\" argument \\\"\").concat(argDef.name, \"\\\" is deprecated. \").concat(deprecationReason), node));\n        } else {\n          var parentType = context.getParentType();\n          var fieldDef = context.getFieldDef();\n          parentType != null && fieldDef != null || invariant(0);\n          context.reportError(new GraphQLError(\"Field \\\"\".concat(parentType.name, \".\").concat(fieldDef.name, \"\\\" argument \\\"\").concat(argDef.name, \"\\\" is deprecated. \").concat(deprecationReason), node));\n        }\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var inputObjectDef = getNamedType(context.getParentInputType());\n\n      if (isInputObjectType(inputObjectDef)) {\n        var inputFieldDef = inputObjectDef.getFields()[node.name.value]; // flowlint-next-line unnecessary-optional-chain:off\n\n        var deprecationReason = inputFieldDef === null || inputFieldDef === void 0 ? void 0 : inputFieldDef.deprecationReason;\n\n        if (deprecationReason != null) {\n          context.reportError(new GraphQLError(\"The input field \".concat(inputObjectDef.name, \".\").concat(inputFieldDef.name, \" is deprecated. \").concat(deprecationReason), node));\n        }\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      var enumValueDef = context.getEnumValue();\n      var deprecationReason = enumValueDef === null || enumValueDef === void 0 ? void 0 : enumValueDef.deprecationReason;\n\n      if (enumValueDef && deprecationReason != null) {\n        var enumTypeDef = getNamedType(context.getInputType());\n        enumTypeDef != null || invariant(0);\n        context.reportError(new GraphQLError(\"The enum value \\\"\".concat(enumTypeDef.name, \".\").concat(enumValueDef.name, \"\\\" is deprecated. \").concat(deprecationReason), node));\n      }\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/HP/Desktop/project/ecommerce-spring-reactjs-master/frontend/node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.mjs"],"names":["invariant","GraphQLError","getNamedType","isInputObjectType","NoDeprecatedCustomRule","context","Field","node","fieldDef","getFieldDef","deprecationReason","parentType","getParentType","reportError","concat","name","Argument","argDef","getArgument","directiveDef","getDirective","ObjectField","inputObjectDef","getParentInputType","inputFieldDef","getFields","value","EnumValue","enumValueDef","getEnumValue","enumTypeDef","getInputType"],"mappings":"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","sourcesContent":["import invariant from \"../../../jsutils/invariant.mjs\";\nimport { GraphQLError } from \"../../../error/GraphQLError.mjs\";\nimport { getNamedType, isInputObjectType } from \"../../../type/definition.mjs\";\n\n/**\n * No deprecated\n *\n * A GraphQL document is only valid if all selected fields and all used enum values have not been\n * deprecated.\n *\n * Note: This rule is optional and is not part of the Validation section of the GraphQL\n * Specification. The main purpose of this rule is detection of deprecated usages and not\n * necessarily to forbid their use when querying a service.\n */\nexport function NoDeprecatedCustomRule(context) {\n  return {\n    Field: function Field(node) {\n      var fieldDef = context.getFieldDef();\n      var deprecationReason = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.deprecationReason;\n\n      if (fieldDef && deprecationReason != null) {\n        var parentType = context.getParentType();\n        parentType != null || invariant(0);\n        context.reportError(new GraphQLError(\"The field \".concat(parentType.name, \".\").concat(fieldDef.name, \" is deprecated. \").concat(deprecationReason), node));\n      }\n    },\n    Argument: function Argument(node) {\n      var argDef = context.getArgument();\n      var deprecationReason = argDef === null || argDef === void 0 ? void 0 : argDef.deprecationReason;\n\n      if (argDef && deprecationReason != null) {\n        var directiveDef = context.getDirective();\n\n        if (directiveDef != null) {\n          context.reportError(new GraphQLError(\"Directive \\\"@\".concat(directiveDef.name, \"\\\" argument \\\"\").concat(argDef.name, \"\\\" is deprecated. \").concat(deprecationReason), node));\n        } else {\n          var parentType = context.getParentType();\n          var fieldDef = context.getFieldDef();\n          parentType != null && fieldDef != null || invariant(0);\n          context.reportError(new GraphQLError(\"Field \\\"\".concat(parentType.name, \".\").concat(fieldDef.name, \"\\\" argument \\\"\").concat(argDef.name, \"\\\" is deprecated. \").concat(deprecationReason), node));\n        }\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var inputObjectDef = getNamedType(context.getParentInputType());\n\n      if (isInputObjectType(inputObjectDef)) {\n        var inputFieldDef = inputObjectDef.getFields()[node.name.value]; // flowlint-next-line unnecessary-optional-chain:off\n\n        var deprecationReason = inputFieldDef === null || inputFieldDef === void 0 ? void 0 : inputFieldDef.deprecationReason;\n\n        if (deprecationReason != null) {\n          context.reportError(new GraphQLError(\"The input field \".concat(inputObjectDef.name, \".\").concat(inputFieldDef.name, \" is deprecated. \").concat(deprecationReason), node));\n        }\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      var enumValueDef = context.getEnumValue();\n      var deprecationReason = enumValueDef === null || enumValueDef === void 0 ? void 0 : enumValueDef.deprecationReason;\n\n      if (enumValueDef && deprecationReason != null) {\n        var enumTypeDef = getNamedType(context.getInputType());\n        enumTypeDef != null || invariant(0);\n        context.reportError(new GraphQLError(\"The enum value \\\"\".concat(enumTypeDef.name, \".\").concat(enumValueDef.name, \"\\\" is deprecated. \").concat(deprecationReason), node));\n      }\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}