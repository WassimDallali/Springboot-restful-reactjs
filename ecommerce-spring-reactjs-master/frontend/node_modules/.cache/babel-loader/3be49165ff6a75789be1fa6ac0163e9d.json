{"ast":null,"code":"function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport objectEntries from \"../polyfills/objectEntries.mjs\";\nimport { SYMBOL_TO_STRING_TAG } from \"../polyfills/symbols.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport toObjMap from \"../jsutils/toObjMap.mjs\";\nimport devAssert from \"../jsutils/devAssert.mjs\";\nimport instanceOf from \"../jsutils/instanceOf.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport defineInspect from \"../jsutils/defineInspect.mjs\";\nimport { DirectiveLocation } from \"../language/directiveLocation.mjs\";\nimport { GraphQLString, GraphQLBoolean } from \"./scalars.mjs\";\nimport { argsToArgsConfig, GraphQLNonNull } from \"./definition.mjs\";\n/**\n * Test if the given value is a GraphQL directive.\n */\n// eslint-disable-next-line no-redeclare\n\nexport function isDirective(directive) {\n  return instanceOf(directive, GraphQLDirective);\n}\nexport function assertDirective(directive) {\n  if (!isDirective(directive)) {\n    throw new Error(\"Expected \".concat(inspect(directive), \" to be a GraphQL directive.\"));\n  }\n\n  return directive;\n}\n/**\n * Directives are used by the GraphQL runtime as a way of modifying execution\n * behavior. Type system creators will usually not create these directly.\n */\n\nexport var GraphQLDirective = /*#__PURE__*/function () {\n  function GraphQLDirective(config) {\n    var _config$isRepeatable, _config$args;\n\n    this.name = config.name;\n    this.description = config.description;\n    this.locations = config.locations;\n    this.isRepeatable = (_config$isRepeatable = config.isRepeatable) !== null && _config$isRepeatable !== void 0 ? _config$isRepeatable : false;\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    config.name || devAssert(0, 'Directive must be named.');\n    Array.isArray(config.locations) || devAssert(0, \"@\".concat(config.name, \" locations must be an Array.\"));\n    var args = (_config$args = config.args) !== null && _config$args !== void 0 ? _config$args : {};\n    isObjectLike(args) && !Array.isArray(args) || devAssert(0, \"@\".concat(config.name, \" args must be an object with argument names as keys.\"));\n    this.args = objectEntries(args).map(function (_ref) {\n      var argName = _ref[0],\n          argConfig = _ref[1];\n      return {\n        name: argName,\n        description: argConfig.description,\n        type: argConfig.type,\n        defaultValue: argConfig.defaultValue,\n        deprecationReason: argConfig.deprecationReason,\n        extensions: argConfig.extensions && toObjMap(argConfig.extensions),\n        astNode: argConfig.astNode\n      };\n    });\n  }\n\n  var _proto = GraphQLDirective.prototype;\n\n  _proto.toConfig = function toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      locations: this.locations,\n      args: argsToArgsConfig(this.args),\n      isRepeatable: this.isRepeatable,\n      extensions: this.extensions,\n      astNode: this.astNode\n    };\n  };\n\n  _proto.toString = function toString() {\n    return '@' + this.name;\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet\n  ;\n\n  _createClass(GraphQLDirective, [{\n    key: SYMBOL_TO_STRING_TAG,\n    get: function get() {\n      return 'GraphQLDirective';\n    }\n  }]);\n\n  return GraphQLDirective;\n}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.\n\ndefineInspect(GraphQLDirective);\n/**\n * Used to conditionally include fields or fragments.\n */\n\nexport var GraphQLIncludeDirective = new GraphQLDirective({\n  name: 'include',\n  description: 'Directs the executor to include this field or fragment only when the `if` argument is true.',\n  locations: [DirectiveLocation.FIELD, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Included when true.'\n    }\n  }\n});\n/**\n * Used to conditionally skip (exclude) fields or fragments.\n */\n\nexport var GraphQLSkipDirective = new GraphQLDirective({\n  name: 'skip',\n  description: 'Directs the executor to skip this field or fragment when the `if` argument is true.',\n  locations: [DirectiveLocation.FIELD, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Skipped when true.'\n    }\n  }\n});\n/**\n * Constant string used for default reason for a deprecation.\n */\n\nexport var DEFAULT_DEPRECATION_REASON = 'No longer supported';\n/**\n * Used to declare element of a GraphQL schema as deprecated.\n */\n\nexport var GraphQLDeprecatedDirective = new GraphQLDirective({\n  name: 'deprecated',\n  description: 'Marks an element of a GraphQL schema as no longer supported.',\n  locations: [DirectiveLocation.FIELD_DEFINITION, DirectiveLocation.ARGUMENT_DEFINITION, DirectiveLocation.INPUT_FIELD_DEFINITION, DirectiveLocation.ENUM_VALUE],\n  args: {\n    reason: {\n      type: GraphQLString,\n      description: 'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).',\n      defaultValue: DEFAULT_DEPRECATION_REASON\n    }\n  }\n});\n/**\n * Used to provide a URL for specifying the behaviour of custom scalar definitions.\n */\n\nexport var GraphQLSpecifiedByDirective = new GraphQLDirective({\n  name: 'specifiedBy',\n  description: 'Exposes a URL that specifies the behaviour of this scalar.',\n  locations: [DirectiveLocation.SCALAR],\n  args: {\n    url: {\n      type: new GraphQLNonNull(GraphQLString),\n      description: 'The URL that specifies the behaviour of this scalar.'\n    }\n  }\n});\n/**\n * The full list of specified directives.\n */\n\nexport var specifiedDirectives = Object.freeze([GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, GraphQLSpecifiedByDirective]);\nexport function isSpecifiedDirective(directive) {\n  return specifiedDirectives.some(function (_ref2) {\n    var name = _ref2.name;\n    return name === directive.name;\n  });\n}","map":{"version":3,"sources":["C:/Users/HP/Desktop/project/ecommerce-spring-reactjs-master/frontend/node_modules/graphql/type/directives.mjs"],"names":["_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","prototype","objectEntries","SYMBOL_TO_STRING_TAG","inspect","toObjMap","devAssert","instanceOf","isObjectLike","defineInspect","DirectiveLocation","GraphQLString","GraphQLBoolean","argsToArgsConfig","GraphQLNonNull","isDirective","directive","GraphQLDirective","assertDirective","Error","concat","config","_config$isRepeatable","_config$args","name","description","locations","isRepeatable","extensions","astNode","Array","isArray","args","map","_ref","argName","argConfig","type","defaultValue","deprecationReason","_proto","toConfig","toString","toJSON","get","GraphQLIncludeDirective","FIELD","FRAGMENT_SPREAD","INLINE_FRAGMENT","if","GraphQLSkipDirective","DEFAULT_DEPRECATION_REASON","GraphQLDeprecatedDirective","FIELD_DEFINITION","ARGUMENT_DEFINITION","INPUT_FIELD_DEFINITION","ENUM_VALUE","reason","GraphQLSpecifiedByDirective","SCALAR","url","specifiedDirectives","freeze","isSpecifiedDirective","some","_ref2"],"mappings":"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","sourcesContent":["function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport objectEntries from \"../polyfills/objectEntries.mjs\";\nimport { SYMBOL_TO_STRING_TAG } from \"../polyfills/symbols.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport toObjMap from \"../jsutils/toObjMap.mjs\";\nimport devAssert from \"../jsutils/devAssert.mjs\";\nimport instanceOf from \"../jsutils/instanceOf.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport defineInspect from \"../jsutils/defineInspect.mjs\";\nimport { DirectiveLocation } from \"../language/directiveLocation.mjs\";\nimport { GraphQLString, GraphQLBoolean } from \"./scalars.mjs\";\nimport { argsToArgsConfig, GraphQLNonNull } from \"./definition.mjs\";\n/**\n * Test if the given value is a GraphQL directive.\n */\n\n// eslint-disable-next-line no-redeclare\nexport function isDirective(directive) {\n  return instanceOf(directive, GraphQLDirective);\n}\nexport function assertDirective(directive) {\n  if (!isDirective(directive)) {\n    throw new Error(\"Expected \".concat(inspect(directive), \" to be a GraphQL directive.\"));\n  }\n\n  return directive;\n}\n/**\n * Directives are used by the GraphQL runtime as a way of modifying execution\n * behavior. Type system creators will usually not create these directly.\n */\n\nexport var GraphQLDirective = /*#__PURE__*/function () {\n  function GraphQLDirective(config) {\n    var _config$isRepeatable, _config$args;\n\n    this.name = config.name;\n    this.description = config.description;\n    this.locations = config.locations;\n    this.isRepeatable = (_config$isRepeatable = config.isRepeatable) !== null && _config$isRepeatable !== void 0 ? _config$isRepeatable : false;\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    config.name || devAssert(0, 'Directive must be named.');\n    Array.isArray(config.locations) || devAssert(0, \"@\".concat(config.name, \" locations must be an Array.\"));\n    var args = (_config$args = config.args) !== null && _config$args !== void 0 ? _config$args : {};\n    isObjectLike(args) && !Array.isArray(args) || devAssert(0, \"@\".concat(config.name, \" args must be an object with argument names as keys.\"));\n    this.args = objectEntries(args).map(function (_ref) {\n      var argName = _ref[0],\n          argConfig = _ref[1];\n      return {\n        name: argName,\n        description: argConfig.description,\n        type: argConfig.type,\n        defaultValue: argConfig.defaultValue,\n        deprecationReason: argConfig.deprecationReason,\n        extensions: argConfig.extensions && toObjMap(argConfig.extensions),\n        astNode: argConfig.astNode\n      };\n    });\n  }\n\n  var _proto = GraphQLDirective.prototype;\n\n  _proto.toConfig = function toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      locations: this.locations,\n      args: argsToArgsConfig(this.args),\n      isRepeatable: this.isRepeatable,\n      extensions: this.extensions,\n      astNode: this.astNode\n    };\n  };\n\n  _proto.toString = function toString() {\n    return '@' + this.name;\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet\n  ;\n\n  _createClass(GraphQLDirective, [{\n    key: SYMBOL_TO_STRING_TAG,\n    get: function get() {\n      return 'GraphQLDirective';\n    }\n  }]);\n\n  return GraphQLDirective;\n}(); // Print a simplified form when appearing in `inspect` and `util.inspect`.\n\ndefineInspect(GraphQLDirective);\n\n/**\n * Used to conditionally include fields or fragments.\n */\nexport var GraphQLIncludeDirective = new GraphQLDirective({\n  name: 'include',\n  description: 'Directs the executor to include this field or fragment only when the `if` argument is true.',\n  locations: [DirectiveLocation.FIELD, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Included when true.'\n    }\n  }\n});\n/**\n * Used to conditionally skip (exclude) fields or fragments.\n */\n\nexport var GraphQLSkipDirective = new GraphQLDirective({\n  name: 'skip',\n  description: 'Directs the executor to skip this field or fragment when the `if` argument is true.',\n  locations: [DirectiveLocation.FIELD, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Skipped when true.'\n    }\n  }\n});\n/**\n * Constant string used for default reason for a deprecation.\n */\n\nexport var DEFAULT_DEPRECATION_REASON = 'No longer supported';\n/**\n * Used to declare element of a GraphQL schema as deprecated.\n */\n\nexport var GraphQLDeprecatedDirective = new GraphQLDirective({\n  name: 'deprecated',\n  description: 'Marks an element of a GraphQL schema as no longer supported.',\n  locations: [DirectiveLocation.FIELD_DEFINITION, DirectiveLocation.ARGUMENT_DEFINITION, DirectiveLocation.INPUT_FIELD_DEFINITION, DirectiveLocation.ENUM_VALUE],\n  args: {\n    reason: {\n      type: GraphQLString,\n      description: 'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).',\n      defaultValue: DEFAULT_DEPRECATION_REASON\n    }\n  }\n});\n/**\n * Used to provide a URL for specifying the behaviour of custom scalar definitions.\n */\n\nexport var GraphQLSpecifiedByDirective = new GraphQLDirective({\n  name: 'specifiedBy',\n  description: 'Exposes a URL that specifies the behaviour of this scalar.',\n  locations: [DirectiveLocation.SCALAR],\n  args: {\n    url: {\n      type: new GraphQLNonNull(GraphQLString),\n      description: 'The URL that specifies the behaviour of this scalar.'\n    }\n  }\n});\n/**\n * The full list of specified directives.\n */\n\nexport var specifiedDirectives = Object.freeze([GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, GraphQLSpecifiedByDirective]);\nexport function isSpecifiedDirective(directive) {\n  return specifiedDirectives.some(function (_ref2) {\n    var name = _ref2.name;\n    return name === directive.name;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}