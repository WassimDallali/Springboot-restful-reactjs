{"ast":null,"code":"import { GraphQLError } from \"../../../error/GraphQLError.mjs\";\nimport { getNamedType } from \"../../../type/definition.mjs\";\nimport { isIntrospectionType } from \"../../../type/introspection.mjs\";\n/**\n * Prohibit introspection queries\n *\n * A GraphQL document is only valid if all fields selected are not fields that\n * return an introspection type.\n *\n * Note: This rule is optional and is not part of the Validation section of the\n * GraphQL Specification. This rule effectively disables introspection, which\n * does not reflect best practices and should only be done if absolutely necessary.\n */\n\nexport function NoSchemaIntrospectionCustomRule(context) {\n  return {\n    Field: function Field(node) {\n      var type = getNamedType(context.getType());\n\n      if (type && isIntrospectionType(type)) {\n        context.reportError(new GraphQLError(\"GraphQL introspection has been disabled, but the requested query contained the field \\\"\".concat(node.name.value, \"\\\".\"), node));\n      }\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/HP/Desktop/project/ecommerce-spring-reactjs-master/frontend/node_modules/graphql/validation/rules/custom/NoSchemaIntrospectionCustomRule.mjs"],"names":["GraphQLError","getNamedType","isIntrospectionType","NoSchemaIntrospectionCustomRule","context","Field","node","type","getType","reportError","concat","name","value"],"mappings":"AAAA,SAASA,YAAT,QAA6B,iCAA7B;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,SAASC,mBAAT,QAAoC,iCAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,+BAAT,CAAyCC,OAAzC,EAAkD;AACvD,SAAO;AACLC,IAAAA,KAAK,EAAE,SAASA,KAAT,CAAeC,IAAf,EAAqB;AAC1B,UAAIC,IAAI,GAAGN,YAAY,CAACG,OAAO,CAACI,OAAR,EAAD,CAAvB;;AAEA,UAAID,IAAI,IAAIL,mBAAmB,CAACK,IAAD,CAA/B,EAAuC;AACrCH,QAAAA,OAAO,CAACK,WAAR,CAAoB,IAAIT,YAAJ,CAAiB,0FAA0FU,MAA1F,CAAiGJ,IAAI,CAACK,IAAL,CAAUC,KAA3G,EAAkH,KAAlH,CAAjB,EAA2IN,IAA3I,CAApB;AACD;AACF;AAPI,GAAP;AASD","sourcesContent":["import { GraphQLError } from \"../../../error/GraphQLError.mjs\";\nimport { getNamedType } from \"../../../type/definition.mjs\";\nimport { isIntrospectionType } from \"../../../type/introspection.mjs\";\n\n/**\n * Prohibit introspection queries\n *\n * A GraphQL document is only valid if all fields selected are not fields that\n * return an introspection type.\n *\n * Note: This rule is optional and is not part of the Validation section of the\n * GraphQL Specification. This rule effectively disables introspection, which\n * does not reflect best practices and should only be done if absolutely necessary.\n */\nexport function NoSchemaIntrospectionCustomRule(context) {\n  return {\n    Field: function Field(node) {\n      var type = getNamedType(context.getType());\n\n      if (type && isIntrospectionType(type)) {\n        context.reportError(new GraphQLError(\"GraphQL introspection has been disabled, but the requested query contained the field \\\"\".concat(node.name.value, \"\\\".\"), node));\n      }\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}