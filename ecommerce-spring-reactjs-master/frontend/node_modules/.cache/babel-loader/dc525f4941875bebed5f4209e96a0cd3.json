{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport objectValues from \"../polyfills/objectValues.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport keyValMap from \"../jsutils/keyValMap.mjs\";\nimport naturalCompare from \"../jsutils/naturalCompare.mjs\";\nimport { GraphQLSchema } from \"../type/schema.mjs\";\nimport { GraphQLDirective } from \"../type/directives.mjs\";\nimport { isIntrospectionType } from \"../type/introspection.mjs\";\nimport { GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, isListType, isNonNullType, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType } from \"../type/definition.mjs\";\n/**\n * Sort GraphQLSchema.\n *\n * This function returns a sorted copy of the given GraphQLSchema.\n */\n\nexport function lexicographicSortSchema(schema) {\n  var schemaConfig = schema.toConfig();\n  var typeMap = keyValMap(sortByName(schemaConfig.types), function (type) {\n    return type.name;\n  }, sortNamedType);\n  return new GraphQLSchema(_objectSpread(_objectSpread({}, schemaConfig), {}, {\n    types: objectValues(typeMap),\n    directives: sortByName(schemaConfig.directives).map(sortDirective),\n    query: replaceMaybeType(schemaConfig.query),\n    mutation: replaceMaybeType(schemaConfig.mutation),\n    subscription: replaceMaybeType(schemaConfig.subscription)\n  }));\n\n  function replaceType(type) {\n    if (isListType(type)) {\n      // $FlowFixMe[incompatible-return]\n      return new GraphQLList(replaceType(type.ofType));\n    } else if (isNonNullType(type)) {\n      // $FlowFixMe[incompatible-return]\n      return new GraphQLNonNull(replaceType(type.ofType));\n    }\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    return typeMap[type.name];\n  }\n\n  function replaceMaybeType(maybeType) {\n    return maybeType && replaceNamedType(maybeType);\n  }\n\n  function sortDirective(directive) {\n    var config = directive.toConfig();\n    return new GraphQLDirective(_objectSpread(_objectSpread({}, config), {}, {\n      locations: sortBy(config.locations, function (x) {\n        return x;\n      }),\n      args: sortArgs(config.args)\n    }));\n  }\n\n  function sortArgs(args) {\n    return sortObjMap(args, function (arg) {\n      return _objectSpread(_objectSpread({}, arg), {}, {\n        type: replaceType(arg.type)\n      });\n    });\n  }\n\n  function sortFields(fieldsMap) {\n    return sortObjMap(fieldsMap, function (field) {\n      return _objectSpread(_objectSpread({}, field), {}, {\n        type: replaceType(field.type),\n        args: sortArgs(field.args)\n      });\n    });\n  }\n\n  function sortInputFields(fieldsMap) {\n    return sortObjMap(fieldsMap, function (field) {\n      return _objectSpread(_objectSpread({}, field), {}, {\n        type: replaceType(field.type)\n      });\n    });\n  }\n\n  function sortTypes(arr) {\n    return sortByName(arr).map(replaceNamedType);\n  }\n\n  function sortNamedType(type) {\n    if (isScalarType(type) || isIntrospectionType(type)) {\n      return type;\n    }\n\n    if (isObjectType(type)) {\n      var config = type.toConfig();\n      return new GraphQLObjectType(_objectSpread(_objectSpread({}, config), {}, {\n        interfaces: function interfaces() {\n          return sortTypes(config.interfaces);\n        },\n        fields: function fields() {\n          return sortFields(config.fields);\n        }\n      }));\n    }\n\n    if (isInterfaceType(type)) {\n      var _config = type.toConfig();\n\n      return new GraphQLInterfaceType(_objectSpread(_objectSpread({}, _config), {}, {\n        interfaces: function interfaces() {\n          return sortTypes(_config.interfaces);\n        },\n        fields: function fields() {\n          return sortFields(_config.fields);\n        }\n      }));\n    }\n\n    if (isUnionType(type)) {\n      var _config2 = type.toConfig();\n\n      return new GraphQLUnionType(_objectSpread(_objectSpread({}, _config2), {}, {\n        types: function types() {\n          return sortTypes(_config2.types);\n        }\n      }));\n    }\n\n    if (isEnumType(type)) {\n      var _config3 = type.toConfig();\n\n      return new GraphQLEnumType(_objectSpread(_objectSpread({}, _config3), {}, {\n        values: sortObjMap(_config3.values)\n      }));\n    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n    if (isInputObjectType(type)) {\n      var _config4 = type.toConfig();\n\n      return new GraphQLInputObjectType(_objectSpread(_objectSpread({}, _config4), {}, {\n        fields: function fields() {\n          return sortInputFields(_config4.fields);\n        }\n      }));\n    } // istanbul ignore next (Not reachable. All possible types have been considered)\n\n\n    false || invariant(0, 'Unexpected type: ' + inspect(type));\n  }\n}\n\nfunction sortObjMap(map, sortValueFn) {\n  var sortedMap = Object.create(null);\n  var sortedKeys = sortBy(Object.keys(map), function (x) {\n    return x;\n  });\n\n  for (var _i2 = 0; _i2 < sortedKeys.length; _i2++) {\n    var key = sortedKeys[_i2];\n    var value = map[key];\n    sortedMap[key] = sortValueFn ? sortValueFn(value) : value;\n  }\n\n  return sortedMap;\n}\n\nfunction sortByName(array) {\n  return sortBy(array, function (obj) {\n    return obj.name;\n  });\n}\n\nfunction sortBy(array, mapToKey) {\n  return array.slice().sort(function (obj1, obj2) {\n    var key1 = mapToKey(obj1);\n    var key2 = mapToKey(obj2);\n    return naturalCompare(key1, key2);\n  });\n}","map":{"version":3,"sources":["C:/Users/HP/Desktop/project/ecommerce-spring-reactjs-master/frontend/node_modules/graphql/utilities/lexicographicSortSchema.mjs"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","objectValues","inspect","invariant","keyValMap","naturalCompare","GraphQLSchema","GraphQLDirective","isIntrospectionType","GraphQLList","GraphQLNonNull","GraphQLObjectType","GraphQLInterfaceType","GraphQLUnionType","GraphQLEnumType","GraphQLInputObjectType","isListType","isNonNullType","isScalarType","isObjectType","isInterfaceType","isUnionType","isEnumType","isInputObjectType","lexicographicSortSchema","schema","schemaConfig","toConfig","typeMap","sortByName","types","type","name","sortNamedType","directives","map","sortDirective","query","replaceMaybeType","mutation","subscription","replaceType","ofType","replaceNamedType","maybeType","directive","config","locations","sortBy","x","args","sortArgs","sortObjMap","arg","sortFields","fieldsMap","field","sortInputFields","sortTypes","arr","interfaces","fields","_config","_config2","_config3","values","_config4","sortValueFn","sortedMap","create","sortedKeys","_i2","array","mapToKey","slice","sort","obj1","obj2","key1","key2"],"mappings":"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","sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport objectValues from \"../polyfills/objectValues.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport keyValMap from \"../jsutils/keyValMap.mjs\";\nimport naturalCompare from \"../jsutils/naturalCompare.mjs\";\nimport { GraphQLSchema } from \"../type/schema.mjs\";\nimport { GraphQLDirective } from \"../type/directives.mjs\";\nimport { isIntrospectionType } from \"../type/introspection.mjs\";\nimport { GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, isListType, isNonNullType, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType } from \"../type/definition.mjs\";\n/**\n * Sort GraphQLSchema.\n *\n * This function returns a sorted copy of the given GraphQLSchema.\n */\n\nexport function lexicographicSortSchema(schema) {\n  var schemaConfig = schema.toConfig();\n  var typeMap = keyValMap(sortByName(schemaConfig.types), function (type) {\n    return type.name;\n  }, sortNamedType);\n  return new GraphQLSchema(_objectSpread(_objectSpread({}, schemaConfig), {}, {\n    types: objectValues(typeMap),\n    directives: sortByName(schemaConfig.directives).map(sortDirective),\n    query: replaceMaybeType(schemaConfig.query),\n    mutation: replaceMaybeType(schemaConfig.mutation),\n    subscription: replaceMaybeType(schemaConfig.subscription)\n  }));\n\n  function replaceType(type) {\n    if (isListType(type)) {\n      // $FlowFixMe[incompatible-return]\n      return new GraphQLList(replaceType(type.ofType));\n    } else if (isNonNullType(type)) {\n      // $FlowFixMe[incompatible-return]\n      return new GraphQLNonNull(replaceType(type.ofType));\n    }\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    return typeMap[type.name];\n  }\n\n  function replaceMaybeType(maybeType) {\n    return maybeType && replaceNamedType(maybeType);\n  }\n\n  function sortDirective(directive) {\n    var config = directive.toConfig();\n    return new GraphQLDirective(_objectSpread(_objectSpread({}, config), {}, {\n      locations: sortBy(config.locations, function (x) {\n        return x;\n      }),\n      args: sortArgs(config.args)\n    }));\n  }\n\n  function sortArgs(args) {\n    return sortObjMap(args, function (arg) {\n      return _objectSpread(_objectSpread({}, arg), {}, {\n        type: replaceType(arg.type)\n      });\n    });\n  }\n\n  function sortFields(fieldsMap) {\n    return sortObjMap(fieldsMap, function (field) {\n      return _objectSpread(_objectSpread({}, field), {}, {\n        type: replaceType(field.type),\n        args: sortArgs(field.args)\n      });\n    });\n  }\n\n  function sortInputFields(fieldsMap) {\n    return sortObjMap(fieldsMap, function (field) {\n      return _objectSpread(_objectSpread({}, field), {}, {\n        type: replaceType(field.type)\n      });\n    });\n  }\n\n  function sortTypes(arr) {\n    return sortByName(arr).map(replaceNamedType);\n  }\n\n  function sortNamedType(type) {\n    if (isScalarType(type) || isIntrospectionType(type)) {\n      return type;\n    }\n\n    if (isObjectType(type)) {\n      var config = type.toConfig();\n      return new GraphQLObjectType(_objectSpread(_objectSpread({}, config), {}, {\n        interfaces: function interfaces() {\n          return sortTypes(config.interfaces);\n        },\n        fields: function fields() {\n          return sortFields(config.fields);\n        }\n      }));\n    }\n\n    if (isInterfaceType(type)) {\n      var _config = type.toConfig();\n\n      return new GraphQLInterfaceType(_objectSpread(_objectSpread({}, _config), {}, {\n        interfaces: function interfaces() {\n          return sortTypes(_config.interfaces);\n        },\n        fields: function fields() {\n          return sortFields(_config.fields);\n        }\n      }));\n    }\n\n    if (isUnionType(type)) {\n      var _config2 = type.toConfig();\n\n      return new GraphQLUnionType(_objectSpread(_objectSpread({}, _config2), {}, {\n        types: function types() {\n          return sortTypes(_config2.types);\n        }\n      }));\n    }\n\n    if (isEnumType(type)) {\n      var _config3 = type.toConfig();\n\n      return new GraphQLEnumType(_objectSpread(_objectSpread({}, _config3), {}, {\n        values: sortObjMap(_config3.values)\n      }));\n    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n    if (isInputObjectType(type)) {\n      var _config4 = type.toConfig();\n\n      return new GraphQLInputObjectType(_objectSpread(_objectSpread({}, _config4), {}, {\n        fields: function fields() {\n          return sortInputFields(_config4.fields);\n        }\n      }));\n    } // istanbul ignore next (Not reachable. All possible types have been considered)\n\n\n    false || invariant(0, 'Unexpected type: ' + inspect(type));\n  }\n}\n\nfunction sortObjMap(map, sortValueFn) {\n  var sortedMap = Object.create(null);\n  var sortedKeys = sortBy(Object.keys(map), function (x) {\n    return x;\n  });\n\n  for (var _i2 = 0; _i2 < sortedKeys.length; _i2++) {\n    var key = sortedKeys[_i2];\n    var value = map[key];\n    sortedMap[key] = sortValueFn ? sortValueFn(value) : value;\n  }\n\n  return sortedMap;\n}\n\nfunction sortByName(array) {\n  return sortBy(array, function (obj) {\n    return obj.name;\n  });\n}\n\nfunction sortBy(array, mapToKey) {\n  return array.slice().sort(function (obj1, obj2) {\n    var key1 = mapToKey(obj1);\n    var key2 = mapToKey(obj2);\n    return naturalCompare(key1, key2);\n  });\n}\n"]},"metadata":{},"sourceType":"module"}