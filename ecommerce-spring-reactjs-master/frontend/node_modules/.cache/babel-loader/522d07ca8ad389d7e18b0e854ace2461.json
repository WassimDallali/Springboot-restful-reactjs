{"ast":null,"code":"import inspect from \"../jsutils/inspect.mjs\";\nimport isAsyncIterable from \"../jsutils/isAsyncIterable.mjs\";\nimport { addPath, pathToArray } from \"../jsutils/Path.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { locatedError } from \"../error/locatedError.mjs\";\nimport { getArgumentValues } from \"../execution/values.mjs\";\nimport { assertValidExecutionArguments, buildExecutionContext, buildResolveInfo, collectFields, execute, getFieldDef } from \"../execution/execute.mjs\";\nimport { getOperationRootType } from \"../utilities/getOperationRootType.mjs\";\nimport mapAsyncIterator from \"./mapAsyncIterator.mjs\";\nexport function subscribe(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? subscribeImpl(argsOrSchema) : subscribeImpl({\n    schema: argsOrSchema,\n    document: document,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    variableValues: variableValues,\n    operationName: operationName,\n    fieldResolver: fieldResolver,\n    subscribeFieldResolver: subscribeFieldResolver\n  });\n}\n/**\n * This function checks if the error is a GraphQLError. If it is, report it as\n * an ExecutionResult, containing only errors and no data. Otherwise treat the\n * error as a system-class error and re-throw it.\n */\n\nfunction reportGraphQLError(error) {\n  if (error instanceof GraphQLError) {\n    return {\n      errors: [error]\n    };\n  }\n\n  throw error;\n}\n\nfunction subscribeImpl(args) {\n  var schema = args.schema,\n      document = args.document,\n      rootValue = args.rootValue,\n      contextValue = args.contextValue,\n      variableValues = args.variableValues,\n      operationName = args.operationName,\n      fieldResolver = args.fieldResolver,\n      subscribeFieldResolver = args.subscribeFieldResolver;\n  var sourcePromise = createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver); // For each payload yielded from a subscription, map it over the normal\n  // GraphQL `execute` function, with `payload` as the rootValue.\n  // This implements the \"MapSourceToResponseEvent\" algorithm described in\n  // the GraphQL specification. The `execute` function provides the\n  // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n  // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n\n  var mapSourceToResponse = function mapSourceToResponse(payload) {\n    return execute({\n      schema: schema,\n      document: document,\n      rootValue: payload,\n      contextValue: contextValue,\n      variableValues: variableValues,\n      operationName: operationName,\n      fieldResolver: fieldResolver\n    });\n  }; // Resolve the Source Stream, then map every source value to a\n  // ExecutionResult value as described above.\n\n\n  return sourcePromise.then(function (resultOrStream) {\n    return (// Note: Flow can't refine isAsyncIterable, so explicit casts are used.\n      isAsyncIterable(resultOrStream) ? mapAsyncIterator(resultOrStream, mapSourceToResponse, reportGraphQLError) : resultOrStream\n    );\n  });\n}\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise which resolves to either an AsyncIterable (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to the AsyncIterable for the\n * event stream returned by the resolver.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\n\n\nexport function createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // If arguments are missing or incorrectly typed, this is an internal\n  // developer mistake which should throw an early error.\n  assertValidExecutionArguments(schema, document, variableValues);\n  return new Promise(function (resolve) {\n    // If a valid context cannot be created due to incorrect arguments,\n    // this will throw an error.\n    var exeContext = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n    resolve( // Return early errors if execution context failed.\n    Array.isArray(exeContext) ? {\n      errors: exeContext\n    } : executeSubscription(exeContext));\n  }).catch(reportGraphQLError);\n}\n\nfunction executeSubscription(exeContext) {\n  var schema = exeContext.schema,\n      operation = exeContext.operation,\n      variableValues = exeContext.variableValues,\n      rootValue = exeContext.rootValue;\n  var type = getOperationRootType(schema, operation);\n  var fields = collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));\n  var responseNames = Object.keys(fields);\n  var responseName = responseNames[0];\n  var fieldNodes = fields[responseName];\n  var fieldNode = fieldNodes[0];\n  var fieldName = fieldNode.name.value;\n  var fieldDef = getFieldDef(schema, type, fieldName);\n\n  if (!fieldDef) {\n    throw new GraphQLError(\"The subscription field \\\"\".concat(fieldName, \"\\\" is not defined.\"), fieldNodes);\n  }\n\n  var path = addPath(undefined, responseName, type.name);\n  var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, type, path); // Coerce to Promise for easier error handling and consistent return type.\n\n  return new Promise(function (resolveResult) {\n    var _fieldDef$subscribe; // Implements the \"ResolveFieldEventStream\" algorithm from GraphQL specification.\n    // It differs from \"ResolveFieldValue\" due to providing a different `resolveFn`.\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n\n\n    var args = getArgumentValues(fieldDef, fieldNodes[0], variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    var contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an\n    // AsyncIterable yielding raw payloads.\n\n    var resolveFn = (_fieldDef$subscribe = fieldDef.subscribe) !== null && _fieldDef$subscribe !== void 0 ? _fieldDef$subscribe : exeContext.fieldResolver;\n    resolveResult(resolveFn(rootValue, args, contextValue, info));\n  }).then(function (eventStream) {\n    if (eventStream instanceof Error) {\n      throw locatedError(eventStream, fieldNodes, pathToArray(path));\n    } // Assert field returned an event stream, otherwise yield an error.\n\n\n    if (!isAsyncIterable(eventStream)) {\n      throw new Error('Subscription field must return Async Iterable. ' + \"Received: \".concat(inspect(eventStream), \".\"));\n    }\n\n    return eventStream;\n  }, function (error) {\n    throw locatedError(error, fieldNodes, pathToArray(path));\n  });\n}","map":{"version":3,"sources":["C:/Users/HP/Desktop/project/ecommerce-spring-reactjs-master/frontend/node_modules/graphql/subscription/subscribe.mjs"],"names":["inspect","isAsyncIterable","addPath","pathToArray","GraphQLError","locatedError","getArgumentValues","assertValidExecutionArguments","buildExecutionContext","buildResolveInfo","collectFields","execute","getFieldDef","getOperationRootType","mapAsyncIterator","subscribe","argsOrSchema","document","rootValue","contextValue","variableValues","operationName","fieldResolver","subscribeFieldResolver","arguments","length","subscribeImpl","schema","reportGraphQLError","error","errors","args","sourcePromise","createSourceEventStream","mapSourceToResponse","payload","then","resultOrStream","Promise","resolve","exeContext","Array","isArray","executeSubscription","catch","operation","type","fields","selectionSet","Object","create","responseNames","keys","responseName","fieldNodes","fieldNode","fieldName","name","value","fieldDef","concat","path","undefined","info","resolveResult","_fieldDef$subscribe","resolveFn","eventStream","Error"],"mappings":"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","sourcesContent":["import inspect from \"../jsutils/inspect.mjs\";\nimport isAsyncIterable from \"../jsutils/isAsyncIterable.mjs\";\nimport { addPath, pathToArray } from \"../jsutils/Path.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { locatedError } from \"../error/locatedError.mjs\";\nimport { getArgumentValues } from \"../execution/values.mjs\";\nimport { assertValidExecutionArguments, buildExecutionContext, buildResolveInfo, collectFields, execute, getFieldDef } from \"../execution/execute.mjs\";\nimport { getOperationRootType } from \"../utilities/getOperationRootType.mjs\";\nimport mapAsyncIterator from \"./mapAsyncIterator.mjs\";\nexport function subscribe(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? subscribeImpl(argsOrSchema) : subscribeImpl({\n    schema: argsOrSchema,\n    document: document,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    variableValues: variableValues,\n    operationName: operationName,\n    fieldResolver: fieldResolver,\n    subscribeFieldResolver: subscribeFieldResolver\n  });\n}\n/**\n * This function checks if the error is a GraphQLError. If it is, report it as\n * an ExecutionResult, containing only errors and no data. Otherwise treat the\n * error as a system-class error and re-throw it.\n */\n\nfunction reportGraphQLError(error) {\n  if (error instanceof GraphQLError) {\n    return {\n      errors: [error]\n    };\n  }\n\n  throw error;\n}\n\nfunction subscribeImpl(args) {\n  var schema = args.schema,\n      document = args.document,\n      rootValue = args.rootValue,\n      contextValue = args.contextValue,\n      variableValues = args.variableValues,\n      operationName = args.operationName,\n      fieldResolver = args.fieldResolver,\n      subscribeFieldResolver = args.subscribeFieldResolver;\n  var sourcePromise = createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver); // For each payload yielded from a subscription, map it over the normal\n  // GraphQL `execute` function, with `payload` as the rootValue.\n  // This implements the \"MapSourceToResponseEvent\" algorithm described in\n  // the GraphQL specification. The `execute` function provides the\n  // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n  // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n\n  var mapSourceToResponse = function mapSourceToResponse(payload) {\n    return execute({\n      schema: schema,\n      document: document,\n      rootValue: payload,\n      contextValue: contextValue,\n      variableValues: variableValues,\n      operationName: operationName,\n      fieldResolver: fieldResolver\n    });\n  }; // Resolve the Source Stream, then map every source value to a\n  // ExecutionResult value as described above.\n\n\n  return sourcePromise.then(function (resultOrStream) {\n    return (// Note: Flow can't refine isAsyncIterable, so explicit casts are used.\n      isAsyncIterable(resultOrStream) ? mapAsyncIterator(resultOrStream, mapSourceToResponse, reportGraphQLError) : resultOrStream\n    );\n  });\n}\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise which resolves to either an AsyncIterable (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to the AsyncIterable for the\n * event stream returned by the resolver.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\n\n\nexport function createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // If arguments are missing or incorrectly typed, this is an internal\n  // developer mistake which should throw an early error.\n  assertValidExecutionArguments(schema, document, variableValues);\n  return new Promise(function (resolve) {\n    // If a valid context cannot be created due to incorrect arguments,\n    // this will throw an error.\n    var exeContext = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n    resolve( // Return early errors if execution context failed.\n    Array.isArray(exeContext) ? {\n      errors: exeContext\n    } : executeSubscription(exeContext));\n  }).catch(reportGraphQLError);\n}\n\nfunction executeSubscription(exeContext) {\n  var schema = exeContext.schema,\n      operation = exeContext.operation,\n      variableValues = exeContext.variableValues,\n      rootValue = exeContext.rootValue;\n  var type = getOperationRootType(schema, operation);\n  var fields = collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));\n  var responseNames = Object.keys(fields);\n  var responseName = responseNames[0];\n  var fieldNodes = fields[responseName];\n  var fieldNode = fieldNodes[0];\n  var fieldName = fieldNode.name.value;\n  var fieldDef = getFieldDef(schema, type, fieldName);\n\n  if (!fieldDef) {\n    throw new GraphQLError(\"The subscription field \\\"\".concat(fieldName, \"\\\" is not defined.\"), fieldNodes);\n  }\n\n  var path = addPath(undefined, responseName, type.name);\n  var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, type, path); // Coerce to Promise for easier error handling and consistent return type.\n\n  return new Promise(function (resolveResult) {\n    var _fieldDef$subscribe;\n\n    // Implements the \"ResolveFieldEventStream\" algorithm from GraphQL specification.\n    // It differs from \"ResolveFieldValue\" due to providing a different `resolveFn`.\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    var args = getArgumentValues(fieldDef, fieldNodes[0], variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    var contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an\n    // AsyncIterable yielding raw payloads.\n\n    var resolveFn = (_fieldDef$subscribe = fieldDef.subscribe) !== null && _fieldDef$subscribe !== void 0 ? _fieldDef$subscribe : exeContext.fieldResolver;\n    resolveResult(resolveFn(rootValue, args, contextValue, info));\n  }).then(function (eventStream) {\n    if (eventStream instanceof Error) {\n      throw locatedError(eventStream, fieldNodes, pathToArray(path));\n    } // Assert field returned an event stream, otherwise yield an error.\n\n\n    if (!isAsyncIterable(eventStream)) {\n      throw new Error('Subscription field must return Async Iterable. ' + \"Received: \".concat(inspect(eventStream), \".\"));\n    }\n\n    return eventStream;\n  }, function (error) {\n    throw locatedError(error, fieldNodes, pathToArray(path));\n  });\n}\n"]},"metadata":{},"sourceType":"module"}