{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { wrap } from 'optimism';\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { isField, resultKeyNameFromField, isReference, makeReference, createFragmentMap, shouldInclude, addTypenameToDocument, getDefaultValues, getFragmentDefinitions, getMainDefinition, getQueryDefinition, maybeDeepFreeze, mergeDeepArray, getFragmentFromSelection } from \"../../utilities/index.js\";\nimport { supportsResultCaching } from \"./entityStore.js\";\nimport { getTypenameFromStoreObject } from \"./helpers.js\";\nimport { MissingFieldError } from \"../core/types/common.js\";\n;\n\nfunction missingFromInvariant(err, context) {\n  return new MissingFieldError(err.message, context.path.slice(), context.query, context.clientOnly, context.variables);\n}\n\nvar StoreReader = function () {\n  function StoreReader(config) {\n    var _this = this;\n\n    this.config = config;\n    this.executeSelectionSet = wrap(function (options) {\n      return _this.execSelectionSetImpl(options);\n    }, {\n      keyArgs: function (options) {\n        return [options.selectionSet, options.objectOrReference, options.context];\n      },\n      makeCacheKey: function (selectionSet, parent, context) {\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(selectionSet, isReference(parent) ? parent.__ref : parent, context.varString);\n        }\n      }\n    });\n    this.knownResults = new WeakMap();\n    this.executeSubSelectedArray = wrap(function (options) {\n      return _this.execSubSelectedArrayImpl(options);\n    }, {\n      makeCacheKey: function (_a) {\n        var field = _a.field,\n            array = _a.array,\n            context = _a.context;\n\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(field, array, context.varString);\n        }\n      }\n    });\n    this.config = __assign({\n      addTypename: true\n    }, config);\n  }\n\n  StoreReader.prototype.diffQueryAgainstStore = function (_a) {\n    var store = _a.store,\n        query = _a.query,\n        _b = _a.rootId,\n        rootId = _b === void 0 ? 'ROOT_QUERY' : _b,\n        variables = _a.variables,\n        _c = _a.returnPartialData,\n        returnPartialData = _c === void 0 ? true : _c;\n    var policies = this.config.cache.policies;\n    variables = __assign(__assign({}, getDefaultValues(getQueryDefinition(query))), variables);\n    var execResult = this.executeSelectionSet({\n      selectionSet: getMainDefinition(query).selectionSet,\n      objectOrReference: makeReference(rootId),\n      context: {\n        store: store,\n        query: query,\n        policies: policies,\n        variables: variables,\n        varString: JSON.stringify(variables),\n        fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n        path: [],\n        clientOnly: false\n      }\n    });\n    var hasMissingFields = execResult.missing && execResult.missing.length > 0;\n\n    if (hasMissingFields && !returnPartialData) {\n      throw execResult.missing[0];\n    }\n\n    return {\n      result: execResult.result,\n      missing: execResult.missing,\n      complete: !hasMissingFields\n    };\n  };\n\n  StoreReader.prototype.isFresh = function (result, parent, selectionSet, context) {\n    if (supportsResultCaching(context.store) && this.knownResults.get(result) === selectionSet) {\n      var latest = this.executeSelectionSet.peek(selectionSet, parent, context);\n\n      if (latest && result === latest.result) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  StoreReader.prototype.execSelectionSetImpl = function (_a) {\n    var _this = this;\n\n    var selectionSet = _a.selectionSet,\n        objectOrReference = _a.objectOrReference,\n        context = _a.context;\n\n    if (isReference(objectOrReference) && !context.policies.rootTypenamesById[objectOrReference.__ref] && !context.store.has(objectOrReference.__ref)) {\n      return {\n        result: {},\n        missing: [missingFromInvariant(process.env.NODE_ENV === \"production\" ? new InvariantError(4) : new InvariantError(\"Dangling reference to missing \" + objectOrReference.__ref + \" object\"), context)]\n      };\n    }\n\n    var variables = context.variables,\n        policies = context.policies,\n        store = context.store;\n    var objectsToMerge = [];\n    var finalResult = {\n      result: null\n    };\n    var typename = store.getFieldValue(objectOrReference, \"__typename\");\n\n    if (this.config.addTypename && typeof typename === \"string\" && !policies.rootIdsByTypename[typename]) {\n      objectsToMerge.push({\n        __typename: typename\n      });\n    }\n\n    function getMissing() {\n      return finalResult.missing || (finalResult.missing = []);\n    }\n\n    function handleMissing(result) {\n      var _a;\n\n      if (result.missing) (_a = getMissing()).push.apply(_a, result.missing);\n      return result.result;\n    }\n\n    var workSet = new Set(selectionSet.selections);\n    workSet.forEach(function (selection) {\n      var _a;\n\n      if (!shouldInclude(selection, variables)) return;\n\n      if (isField(selection)) {\n        var fieldValue = policies.readField({\n          fieldName: selection.name.value,\n          field: selection,\n          variables: context.variables,\n          from: objectOrReference\n        }, context);\n        var resultName = resultKeyNameFromField(selection);\n        context.path.push(resultName);\n        var wasClientOnly = context.clientOnly;\n        context.clientOnly = wasClientOnly || !!(selection.directives && selection.directives.some(function (d) {\n          return d.name.value === \"client\";\n        }));\n\n        if (fieldValue === void 0) {\n          if (!addTypenameToDocument.added(selection)) {\n            getMissing().push(missingFromInvariant(process.env.NODE_ENV === \"production\" ? new InvariantError(5) : new InvariantError(\"Can't find field '\" + selection.name.value + \"' on \" + (isReference(objectOrReference) ? objectOrReference.__ref + \" object\" : \"object \" + JSON.stringify(objectOrReference, null, 2))), context));\n          }\n        } else if (Array.isArray(fieldValue)) {\n          fieldValue = handleMissing(_this.executeSubSelectedArray({\n            field: selection,\n            array: fieldValue,\n            context: context\n          }));\n        } else if (!selection.selectionSet) {\n          if (process.env.NODE_ENV !== 'production') {\n            assertSelectionSetForIdValue(context.store, selection, fieldValue);\n            maybeDeepFreeze(fieldValue);\n          }\n        } else if (fieldValue != null) {\n          fieldValue = handleMissing(_this.executeSelectionSet({\n            selectionSet: selection.selectionSet,\n            objectOrReference: fieldValue,\n            context: context\n          }));\n        }\n\n        if (fieldValue !== void 0) {\n          objectsToMerge.push((_a = {}, _a[resultName] = fieldValue, _a));\n        }\n\n        context.clientOnly = wasClientOnly;\n        invariant(context.path.pop() === resultName);\n      } else {\n        var fragment = getFragmentFromSelection(selection, context.fragmentMap);\n\n        if (fragment && policies.fragmentMatches(fragment, typename)) {\n          fragment.selectionSet.selections.forEach(workSet.add, workSet);\n        }\n      }\n    });\n    finalResult.result = mergeDeepArray(objectsToMerge);\n\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(finalResult.result);\n    }\n\n    this.knownResults.set(finalResult.result, selectionSet);\n    return finalResult;\n  };\n\n  StoreReader.prototype.execSubSelectedArrayImpl = function (_a) {\n    var _this = this;\n\n    var field = _a.field,\n        array = _a.array,\n        context = _a.context;\n    var missing;\n\n    function handleMissing(childResult, i) {\n      if (childResult.missing) {\n        missing = missing || [];\n        missing.push.apply(missing, childResult.missing);\n      }\n\n      invariant(context.path.pop() === i);\n      return childResult.result;\n    }\n\n    if (field.selectionSet) {\n      array = array.filter(context.store.canRead);\n    }\n\n    array = array.map(function (item, i) {\n      if (item === null) {\n        return null;\n      }\n\n      context.path.push(i);\n\n      if (Array.isArray(item)) {\n        return handleMissing(_this.executeSubSelectedArray({\n          field: field,\n          array: item,\n          context: context\n        }), i);\n      }\n\n      if (field.selectionSet) {\n        return handleMissing(_this.executeSelectionSet({\n          selectionSet: field.selectionSet,\n          objectOrReference: item,\n          context: context\n        }), i);\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        assertSelectionSetForIdValue(context.store, field, item);\n      }\n\n      invariant(context.path.pop() === i);\n      return item;\n    });\n\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(array);\n    }\n\n    return {\n      result: array,\n      missing: missing\n    };\n  };\n\n  return StoreReader;\n}();\n\nexport { StoreReader };\n\nfunction assertSelectionSetForIdValue(store, field, fieldValue) {\n  if (!field.selectionSet) {\n    var workSet_1 = new Set([fieldValue]);\n    workSet_1.forEach(function (value) {\n      if (value && typeof value === \"object\") {\n        process.env.NODE_ENV === \"production\" ? invariant(!isReference(value), 6) : invariant(!isReference(value), \"Missing selection set for object of type \" + getTypenameFromStoreObject(store, value) + \" returned for query field \" + field.name.value);\n        Object.values(value).forEach(workSet_1.add, workSet_1);\n      }\n    });\n  }\n}","map":{"version":3,"sources":["../../../src/cache/inmemory/readFromStore.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  DocumentNode,\n  FieldNode,\n  SelectionSetNode,\n} from 'graphql';\nimport { wrap, OptimisticWrapperFunction } from 'optimism';\nimport { invariant, InvariantError } from 'ts-invariant';\n\nimport {\n  isField,\n  resultKeyNameFromField,\n  Reference,\n  isReference,\n  makeReference,\n  StoreObject,\n  createFragmentMap,\n  FragmentMap,\n  shouldInclude,\n  addTypenameToDocument,\n  getDefaultValues,\n  getFragmentDefinitions,\n  getMainDefinition,\n  getQueryDefinition,\n  maybeDeepFreeze,\n  mergeDeepArray,\n  getFragmentFromSelection,\n} from '../../utilities';\nimport { Cache } from '../core/types/Cache';\nimport {\n  DiffQueryAgainstStoreOptions,\n  NormalizedCache,\n  ReadMergeModifyContext,\n} from './types';\nimport { supportsResultCaching } from './entityStore';\nimport { getTypenameFromStoreObject } from './helpers';\nimport { Policies } from './policies';\nimport { InMemoryCache } from './inMemoryCache';\nimport { MissingFieldError } from '../core/types/common';\n\nexport type VariableMap = { [name: string]: any };\n\ninterface ReadContext extends ReadMergeModifyContext {\n  query: DocumentNode;\n  policies: Policies;\n  fragmentMap: FragmentMap;\n  path: (string | number)[];\n  clientOnly: boolean;\n};\n\nexport type ExecResult<R = any> = {\n  result: R;\n  missing?: MissingFieldError[];\n};\n\nfunction missingFromInvariant(\n  err: InvariantError,\n  context: ReadContext,\n) {\n  return new MissingFieldError(\n    err.message,\n    context.path.slice(),\n    context.query,\n    context.clientOnly,\n    context.variables,\n  );\n}\n\ntype ExecSelectionSetOptions = {\n  selectionSet: SelectionSetNode;\n  objectOrReference: StoreObject | Reference;\n  context: ReadContext;\n};\n\ntype ExecSubSelectedArrayOptions = {\n  field: FieldNode;\n  array: any[];\n  context: ReadContext;\n};\n\nexport interface StoreReaderConfig {\n  cache: InMemoryCache,\n  addTypename?: boolean;\n}\n\nexport class StoreReader {\n  constructor(private config: StoreReaderConfig) {\n    this.config = { addTypename: true, ...config };\n  }\n\n  /**\n   * Given a store and a query, return as much of the result as possible and\n   * identify if any data was missing from the store.\n   * @param  {DocumentNode} query A parsed GraphQL query document\n   * @param  {Store} store The Apollo Client store object\n   * @return {result: Object, complete: [boolean]}\n   */\n  public diffQueryAgainstStore<T>({\n    store,\n    query,\n    rootId = 'ROOT_QUERY',\n    variables,\n    returnPartialData = true,\n  }: DiffQueryAgainstStoreOptions): Cache.DiffResult<T> {\n    const policies = this.config.cache.policies;\n\n    variables = {\n      ...getDefaultValues(getQueryDefinition(query)),\n      ...variables,\n    };\n\n    const execResult = this.executeSelectionSet({\n      selectionSet: getMainDefinition(query).selectionSet,\n      objectOrReference: makeReference(rootId),\n      context: {\n        store,\n        query,\n        policies,\n        variables,\n        varString: JSON.stringify(variables),\n        fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n        path: [],\n        clientOnly: false,\n      },\n    });\n\n    const hasMissingFields =\n      execResult.missing && execResult.missing.length > 0;\n    if (hasMissingFields && !returnPartialData) {\n      throw execResult.missing![0];\n    }\n\n    return {\n      result: execResult.result,\n      missing: execResult.missing,\n      complete: !hasMissingFields,\n    };\n  }\n\n  public isFresh(\n    result: Record<string, any>,\n    parent: StoreObject | Reference,\n    selectionSet: SelectionSetNode,\n    context: ReadMergeModifyContext,\n  ): boolean {\n    if (supportsResultCaching(context.store) &&\n        this.knownResults.get(result) === selectionSet) {\n      const latest = this.executeSelectionSet.peek(selectionSet, parent, context);\n      if (latest && result === latest.result) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Cached version of execSelectionSetImpl.\n  private executeSelectionSet: OptimisticWrapperFunction<\n    [ExecSelectionSetOptions], // Actual arguments tuple type.\n    ExecResult, // Actual return type.\n    // Arguments type after keyArgs translation.\n    [SelectionSetNode, StoreObject | Reference, ReadMergeModifyContext]\n  > = wrap(options => this.execSelectionSetImpl(options), {\n    keyArgs(options) {\n      return [\n        options.selectionSet,\n        options.objectOrReference,\n        options.context,\n      ];\n    },\n    // Note that the parameters of makeCacheKey are determined by the\n    // array returned by keyArgs.\n    makeCacheKey(selectionSet, parent, context) {\n      if (supportsResultCaching(context.store)) {\n        return context.store.makeCacheKey(\n          selectionSet,\n          isReference(parent) ? parent.__ref : parent,\n          context.varString,\n        );\n      }\n    }\n  });\n\n  // Uncached version of executeSelectionSet.\n  private execSelectionSetImpl({\n    selectionSet,\n    objectOrReference,\n    context,\n  }: ExecSelectionSetOptions): ExecResult {\n    if (isReference(objectOrReference) &&\n        !context.policies.rootTypenamesById[objectOrReference.__ref] &&\n        !context.store.has(objectOrReference.__ref)) {\n      return {\n        result: {},\n        missing: [missingFromInvariant(\n          new InvariantError(\n            `Dangling reference to missing ${objectOrReference.__ref} object`\n          ),\n          context,\n        )],\n      };\n    }\n\n    const { variables, policies, store } = context;\n    const objectsToMerge: { [key: string]: any }[] = [];\n    const finalResult: ExecResult = { result: null };\n    const typename = store.getFieldValue<string>(objectOrReference, \"__typename\");\n\n    if (this.config.addTypename &&\n        typeof typename === \"string\" &&\n        !policies.rootIdsByTypename[typename]) {\n      // Ensure we always include a default value for the __typename\n      // field, if we have one, and this.config.addTypename is true. Note\n      // that this field can be overridden by other merged objects.\n      objectsToMerge.push({ __typename: typename });\n    }\n\n    function getMissing() {\n      return finalResult.missing || (finalResult.missing = []);\n    }\n\n    function handleMissing<T>(result: ExecResult<T>): T {\n      if (result.missing) getMissing().push(...result.missing);\n      return result.result;\n    }\n\n    const workSet = new Set(selectionSet.selections);\n\n    workSet.forEach(selection => {\n      // Omit fields with directives @skip(if: <truthy value>) or\n      // @include(if: <falsy value>).\n      if (!shouldInclude(selection, variables)) return;\n\n      if (isField(selection)) {\n        let fieldValue = policies.readField({\n          fieldName: selection.name.value,\n          field: selection,\n          variables: context.variables,\n          from: objectOrReference,\n        }, context);\n\n        const resultName = resultKeyNameFromField(selection);\n        context.path.push(resultName);\n\n        // If this field has an @client directive, then the field and\n        // everything beneath it is client-only, meaning it will never be\n        // sent to the server.\n        const wasClientOnly = context.clientOnly;\n        // Once we enter a client-only subtree of the query, we can avoid\n        // repeatedly checking selection.directives.\n        context.clientOnly = wasClientOnly || !!(\n          // We don't use the hasDirectives helper here, because it looks\n          // for directives anywhere inside the AST node, whereas we only\n          // care about directives directly attached to this field.\n          selection.directives &&\n          selection.directives.some(d => d.name.value === \"client\")\n        );\n\n        if (fieldValue === void 0) {\n          if (!addTypenameToDocument.added(selection)) {\n            getMissing().push(\n              missingFromInvariant(\n                new InvariantError(`Can't find field '${\n                  selection.name.value\n                }' on ${\n                  isReference(objectOrReference)\n                    ? objectOrReference.__ref + \" object\"\n                    : \"object \" + JSON.stringify(objectOrReference, null, 2)\n                }`),\n                context,\n              ),\n            );\n          }\n\n        } else if (Array.isArray(fieldValue)) {\n          fieldValue = handleMissing(this.executeSubSelectedArray({\n            field: selection,\n            array: fieldValue,\n            context,\n          }));\n\n        } else if (!selection.selectionSet) {\n          // If the field does not have a selection set, then we handle it\n          // as a scalar value. However, that value should not contain any\n          // Reference objects, and should be frozen in development, if it\n          // happens to be an object that is mutable.\n          if (process.env.NODE_ENV !== 'production') {\n            assertSelectionSetForIdValue(\n              context.store,\n              selection,\n              fieldValue,\n            );\n            maybeDeepFreeze(fieldValue);\n          }\n\n        } else if (fieldValue != null) {\n          // In this case, because we know the field has a selection set,\n          // it must be trying to query a GraphQLObjectType, which is why\n          // fieldValue must be != null.\n          fieldValue = handleMissing(this.executeSelectionSet({\n            selectionSet: selection.selectionSet,\n            objectOrReference: fieldValue as StoreObject | Reference,\n            context,\n          }));\n        }\n\n        if (fieldValue !== void 0) {\n          objectsToMerge.push({ [resultName]: fieldValue });\n        }\n\n        context.clientOnly = wasClientOnly;\n\n        invariant(context.path.pop() === resultName);\n\n      } else {\n        const fragment = getFragmentFromSelection(\n          selection,\n          context.fragmentMap,\n        );\n\n        if (fragment && policies.fragmentMatches(fragment, typename)) {\n          fragment.selectionSet.selections.forEach(workSet.add, workSet);\n        }\n      }\n    });\n\n    // Perform a single merge at the end so that we can avoid making more\n    // defensive shallow copies than necessary.\n    finalResult.result = mergeDeepArray(objectsToMerge);\n\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(finalResult.result);\n    }\n\n    // Store this result with its selection set so that we can quickly\n    // recognize it again in the StoreReader#isFresh method.\n    this.knownResults.set(finalResult.result, selectionSet);\n\n    return finalResult;\n  }\n\n  private knownResults = new WeakMap<Record<string, any>, SelectionSetNode>();\n\n  // Cached version of execSubSelectedArrayImpl.\n  private executeSubSelectedArray = wrap((options: ExecSubSelectedArrayOptions) => {\n    return this.execSubSelectedArrayImpl(options);\n  }, {\n    makeCacheKey({ field, array, context }) {\n      if (supportsResultCaching(context.store)) {\n        return context.store.makeCacheKey(\n          field,\n          array,\n          context.varString,\n        );\n      }\n    }\n  });\n\n  // Uncached version of executeSubSelectedArray.\n  private execSubSelectedArrayImpl({\n    field,\n    array,\n    context,\n  }: ExecSubSelectedArrayOptions): ExecResult {\n    let missing: MissingFieldError[] | undefined;\n\n    function handleMissing<T>(childResult: ExecResult<T>, i: number): T {\n      if (childResult.missing) {\n        missing = missing || [];\n        missing.push(...childResult.missing);\n      }\n\n      invariant(context.path.pop() === i);\n\n      return childResult.result;\n    }\n\n    if (field.selectionSet) {\n      array = array.filter(context.store.canRead);\n    }\n\n    array = array.map((item, i) => {\n      // null value in array\n      if (item === null) {\n        return null;\n      }\n\n      context.path.push(i);\n\n      // This is a nested array, recurse\n      if (Array.isArray(item)) {\n        return handleMissing(this.executeSubSelectedArray({\n          field,\n          array: item,\n          context,\n        }), i);\n      }\n\n      // This is an object, run the selection set on it\n      if (field.selectionSet) {\n        return handleMissing(this.executeSelectionSet({\n          selectionSet: field.selectionSet,\n          objectOrReference: item,\n          context,\n        }), i);\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        assertSelectionSetForIdValue(context.store, field, item);\n      }\n\n      invariant(context.path.pop() === i);\n\n      return item;\n    });\n\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(array);\n    }\n\n    return { result: array, missing };\n  }\n}\n\nfunction assertSelectionSetForIdValue(\n  store: NormalizedCache,\n  field: FieldNode,\n  fieldValue: any,\n) {\n  if (!field.selectionSet) {\n    const workSet = new Set([fieldValue]);\n    workSet.forEach(value => {\n      if (value && typeof value === \"object\") {\n        invariant(\n          !isReference(value),\n          `Missing selection set for object of type ${\n            getTypenameFromStoreObject(store, value)\n          } returned for query field ${field.name.value}`,\n        );\n        Object.values(value).forEach(workSet.add, workSet);\n      }\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}