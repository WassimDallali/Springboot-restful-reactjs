{"ast":null,"code":"import { fetchPerfumeSuccess } from '../actions/perfume-actions';\nimport { fetchUserSuccess, loadingUserInfo, resetInputForm, userAddedReviewFailure, userAddedReviewSuccess, userUpdatedFailure, userUpdatedPasswordFailure, userUpdatedPasswordSuccess, userUpdatedSuccess } from \"../actions/user-actions\";\nimport RequestService from '../../utils/request-service';\nimport { userByQuery } from \"../../utils/graphql-query/users-query\";\nexport const fetchUserInfo = () => async dispatch => {\n  dispatch(loadingUserInfo());\n  const response = await RequestService.get(\"/users/info\", true);\n  localStorage.setItem(\"email\", response.data.email);\n  localStorage.setItem(\"userRole\", response.data.roles);\n  localStorage.setItem(\"isLoggedIn\", \"true\");\n  dispatch(fetchUserSuccess(response.data));\n};\nexport const updateUserInfo = userEdit => async dispatch => {\n  try {\n    const response = await RequestService.put(\"/users/edit\", userEdit, true);\n    dispatch(userUpdatedSuccess(response.data));\n  } catch (error) {\n    dispatch(userUpdatedFailure(error.response.data));\n  }\n};\nexport const updateUserPassword = data => async dispatch => {\n  try {\n    const response = await RequestService.put(\"/auth/edit/password\", data, true);\n    dispatch(userUpdatedPasswordSuccess(response.data));\n  } catch (error) {\n    dispatch(userUpdatedPasswordFailure(error.response.data));\n  }\n};\nexport const addReviewToPerfume = review => async dispatch => {\n  try {\n    const response = await RequestService.post(\"/users/review\", review);\n    dispatch(fetchPerfumeSuccess(response.data));\n    dispatch(userAddedReviewSuccess());\n  } catch (error) {\n    dispatch(userAddedReviewFailure(error.response.data));\n  }\n};\nexport const resetForm = () => dispatch => {\n  dispatch(resetInputForm());\n}; // GraphQL query\n\nexport const fetchUserInfoByQuery = id => async dispatch => {\n  dispatch(loadingUserInfo());\n  const response = await RequestService.post(\"/users/graphql/info\", {\n    query: userByQuery(id)\n  }, true);\n  localStorage.setItem(\"email\", response.data.data.user.email);\n  localStorage.setItem(\"userRole\", response.data.data.user.roles);\n  localStorage.setItem(\"isLoggedIn\", \"true\");\n  dispatch(fetchUserSuccess(response.data.data.user));\n};","map":{"version":3,"sources":["C:/Users/HP/Desktop/project/ecommerce-spring-reactjs-master/frontend/src/redux/thunks/user-thunks.ts"],"names":["fetchPerfumeSuccess","fetchUserSuccess","loadingUserInfo","resetInputForm","userAddedReviewFailure","userAddedReviewSuccess","userUpdatedFailure","userUpdatedPasswordFailure","userUpdatedPasswordSuccess","userUpdatedSuccess","RequestService","userByQuery","fetchUserInfo","dispatch","response","get","localStorage","setItem","data","email","roles","updateUserInfo","userEdit","put","error","updateUserPassword","addReviewToPerfume","review","post","resetForm","fetchUserInfoByQuery","id","query","user"],"mappings":"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","sourcesContent":["import {Dispatch} from \"redux\";\n\nimport {fetchPerfumeSuccess} from '../actions/perfume-actions';\nimport {\n    fetchUserSuccess,\n    loadingUserInfo,\n    resetInputForm,\n    userAddedReviewFailure,\n    userAddedReviewSuccess,\n    userUpdatedFailure,\n    userUpdatedPasswordFailure,\n    userUpdatedPasswordSuccess,\n    userUpdatedSuccess\n} from \"../actions/user-actions\";\nimport {ReviewData, UserEdit, UserResetPasswordData} from \"../../types/types\";\nimport RequestService from '../../utils/request-service';\nimport {userByQuery} from \"../../utils/graphql-query/users-query\";\n\nexport const fetchUserInfo = () => async (dispatch: Dispatch) => {\n    dispatch(loadingUserInfo());\n    const response = await RequestService.get(\"/users/info\", true);\n    localStorage.setItem(\"email\", response.data.email);\n    localStorage.setItem(\"userRole\", response.data.roles);\n    localStorage.setItem(\"isLoggedIn\", \"true\");\n    dispatch(fetchUserSuccess(response.data));\n};\n\nexport const updateUserInfo = (userEdit: UserEdit) => async (dispatch: Dispatch) => {\n    try {\n        const response = await RequestService.put(\"/users/edit\", userEdit, true);\n        dispatch(userUpdatedSuccess(response.data));\n    } catch (error) {\n        dispatch(userUpdatedFailure(error.response.data));\n    }\n};\n\nexport const updateUserPassword = (data: UserResetPasswordData) => async (dispatch: Dispatch) => {\n    try {\n        const response = await RequestService.put(\"/auth/edit/password\", data, true);\n        dispatch(userUpdatedPasswordSuccess(response.data));\n    } catch (error) {\n        dispatch(userUpdatedPasswordFailure(error.response.data));\n    }\n};\n\nexport const addReviewToPerfume = (review: ReviewData) => async (dispatch: Dispatch) => {\n    try {\n        const response = await RequestService.post(\"/users/review\", review);\n        dispatch(fetchPerfumeSuccess(response.data));\n        dispatch(userAddedReviewSuccess());\n    } catch (error) {\n        dispatch(userAddedReviewFailure(error.response.data));\n    }\n};\n\nexport const resetForm = () => (dispatch: Dispatch) => {\n    dispatch(resetInputForm());\n};\n\n// GraphQL query\nexport const fetchUserInfoByQuery = (id: string) => async (dispatch: Dispatch) => {\n    dispatch(loadingUserInfo());\n    const response = await RequestService.post(\"/users/graphql/info\", {query: userByQuery(id)}, true);\n    localStorage.setItem(\"email\", response.data.data.user.email);\n    localStorage.setItem(\"userRole\", response.data.data.user.roles);\n    localStorage.setItem(\"isLoggedIn\", \"true\");\n    dispatch(fetchUserSuccess(response.data.data.user));\n};\n"]},"metadata":{},"sourceType":"module"}