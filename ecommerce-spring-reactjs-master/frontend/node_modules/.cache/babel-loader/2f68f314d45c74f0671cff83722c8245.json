{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { equal } from '@wry/equality';\nimport { ApolloError } from \"../../errors/index.js\";\nimport { NetworkStatus } from \"../../core/index.js\";\nimport { DocumentType } from \"../parser/index.js\";\nimport { OperationData } from \"./OperationData.js\";\n\nvar QueryData = function (_super) {\n  __extends(QueryData, _super);\n\n  function QueryData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        onNewData = _a.onNewData;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.runLazy = false;\n    _this.previous = Object.create(null);\n\n    _this.runLazyQuery = function (options) {\n      _this.cleanup();\n\n      _this.runLazy = true;\n      _this.lazyOptions = options;\n\n      _this.onNewData();\n    };\n\n    _this.getQueryResult = function () {\n      var result = _this.observableQueryFields();\n\n      var options = _this.getOptions();\n\n      if (options.skip) {\n        result = __assign(__assign({}, result), {\n          data: undefined,\n          error: undefined,\n          loading: false,\n          networkStatus: NetworkStatus.ready,\n          called: true\n        });\n      } else if (_this.currentObservable) {\n        var currentResult = _this.currentObservable.getCurrentResult();\n\n        var data = currentResult.data,\n            loading = currentResult.loading,\n            partial = currentResult.partial,\n            networkStatus = currentResult.networkStatus,\n            errors = currentResult.errors;\n        var error = currentResult.error;\n\n        if (errors && errors.length > 0) {\n          error = new ApolloError({\n            graphQLErrors: errors\n          });\n        }\n\n        result = __assign(__assign({}, result), {\n          data: data,\n          loading: loading,\n          networkStatus: networkStatus,\n          error: error,\n          called: true\n        });\n\n        if (loading) {} else if (error) {\n          Object.assign(result, {\n            data: (_this.currentObservable.getLastResult() || {}).data\n          });\n        } else {\n          var fetchPolicy = _this.currentObservable.options.fetchPolicy;\n          var partialRefetch = options.partialRefetch;\n\n          if (partialRefetch && partial && (!data || Object.keys(data).length === 0) && fetchPolicy !== 'cache-only') {\n            Object.assign(result, {\n              loading: true,\n              networkStatus: NetworkStatus.loading\n            });\n            result.refetch();\n            return result;\n          }\n        }\n      }\n\n      result.client = _this.client;\n\n      _this.setOptions(options, true);\n\n      var previousResult = _this.previous.result;\n      _this.previous.loading = previousResult && previousResult.loading || false;\n      result.previousData = previousResult && (previousResult.data || previousResult.previousData);\n      _this.previous.result = result;\n      _this.currentObservable && _this.currentObservable.resetQueryStoreErrors();\n      return result;\n    };\n\n    _this.obsRefetch = function (variables) {\n      var _a;\n\n      return (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.refetch(variables);\n    };\n\n    _this.obsFetchMore = function (fetchMoreOptions) {\n      return _this.currentObservable.fetchMore(fetchMoreOptions);\n    };\n\n    _this.obsUpdateQuery = function (mapFn) {\n      return _this.currentObservable.updateQuery(mapFn);\n    };\n\n    _this.obsStartPolling = function (pollInterval) {\n      var _a;\n\n      (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.startPolling(pollInterval);\n    };\n\n    _this.obsStopPolling = function () {\n      var _a;\n\n      (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.stopPolling();\n    };\n\n    _this.obsSubscribeToMore = function (options) {\n      return _this.currentObservable.subscribeToMore(options);\n    };\n\n    _this.onNewData = onNewData;\n    return _this;\n  }\n\n  QueryData.prototype.execute = function () {\n    this.refreshClient();\n\n    var _a = this.getOptions(),\n        skip = _a.skip,\n        query = _a.query;\n\n    if (skip || query !== this.previous.query) {\n      this.removeQuerySubscription();\n      this.removeObservable(!skip);\n      this.previous.query = query;\n    }\n\n    this.updateObservableQuery();\n    if (this.isMounted) this.startQuerySubscription();\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  };\n\n  QueryData.prototype.executeLazy = function () {\n    return !this.runLazy ? [this.runLazyQuery, {\n      loading: false,\n      networkStatus: NetworkStatus.ready,\n      called: false,\n      data: undefined\n    }] : [this.runLazyQuery, this.execute()];\n  };\n\n  QueryData.prototype.fetchData = function () {\n    var _this = this;\n\n    var options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    return new Promise(function (resolve) {\n      return _this.startQuerySubscription(resolve);\n    });\n  };\n\n  QueryData.prototype.afterExecute = function (_a) {\n    var _b = (_a === void 0 ? {} : _a).lazy,\n        lazy = _b === void 0 ? false : _b;\n    this.isMounted = true;\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  };\n\n  QueryData.prototype.cleanup = function () {\n    this.removeQuerySubscription();\n    this.removeObservable(true);\n    delete this.previous.result;\n  };\n\n  QueryData.prototype.getOptions = function () {\n    var options = _super.prototype.getOptions.call(this);\n\n    if (this.lazyOptions) {\n      options.variables = __assign(__assign({}, options.variables), this.lazyOptions.variables);\n      options.context = __assign(__assign({}, options.context), this.lazyOptions.context);\n    }\n\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  };\n\n  QueryData.prototype.ssrInitiated = function () {\n    return this.context && this.context.renderPromises;\n  };\n\n  QueryData.prototype.getExecuteResult = function () {\n    var result = this.getQueryResult();\n    this.startQuerySubscription();\n    return result;\n  };\n\n  ;\n\n  QueryData.prototype.getExecuteSsrResult = function () {\n    var _a = this.getOptions(),\n        ssr = _a.ssr,\n        skip = _a.skip;\n\n    var ssrDisabled = ssr === false;\n    var fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    var ssrLoading = __assign({\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client\n    }, this.observableQueryFields());\n\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previous.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    if (this.ssrInitiated()) {\n      var result = this.getQueryResult() || ssrLoading;\n\n      if (result.loading && !skip) {\n        this.context.renderPromises.addQueryPromise(this, function () {\n          return null;\n        });\n      }\n\n      return result;\n    }\n  };\n\n  QueryData.prototype.prepareObservableQueryOptions = function () {\n    var options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    var displayName = options.displayName || 'Query';\n\n    if (this.ssrInitiated() && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return __assign(__assign({}, options), {\n      displayName: displayName,\n      context: options.context\n    });\n  };\n\n  QueryData.prototype.initializeObservableQuery = function () {\n    if (this.ssrInitiated()) {\n      this.currentObservable = this.context.renderPromises.getSSRObservable(this.getOptions());\n    }\n\n    if (!this.currentObservable) {\n      var observableQueryOptions = this.prepareObservableQueryOptions();\n      this.previous.observableQueryOptions = __assign(__assign({}, observableQueryOptions), {\n        children: null\n      });\n      this.currentObservable = this.refreshClient().client.watchQuery(__assign({}, observableQueryOptions));\n\n      if (this.ssrInitiated()) {\n        this.context.renderPromises.registerSSRObservable(this.currentObservable, observableQueryOptions);\n      }\n    }\n  };\n\n  QueryData.prototype.updateObservableQuery = function () {\n    if (!this.currentObservable) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    if (this.getOptions().skip) return;\n\n    var newObservableQueryOptions = __assign(__assign({}, this.prepareObservableQueryOptions()), {\n      children: null\n    });\n\n    if (!equal(newObservableQueryOptions, this.previous.observableQueryOptions)) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable.setOptions(newObservableQueryOptions).catch(function () {});\n    }\n  };\n\n  QueryData.prototype.startQuerySubscription = function (onNewData) {\n    var _this = this;\n\n    if (onNewData === void 0) {\n      onNewData = this.onNewData;\n    }\n\n    if (this.currentSubscription || this.getOptions().skip) return;\n    this.currentSubscription = this.currentObservable.subscribe({\n      next: function (_a) {\n        var loading = _a.loading,\n            networkStatus = _a.networkStatus,\n            data = _a.data;\n        var previousResult = _this.previous.result;\n\n        if (previousResult && previousResult.loading === loading && previousResult.networkStatus === networkStatus && equal(previousResult.data, data)) {\n          return;\n        }\n\n        onNewData();\n      },\n      error: function (error) {\n        _this.resubscribeToQuery();\n\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n        var previousResult = _this.previous.result;\n\n        if (previousResult && previousResult.loading || !equal(error, _this.previous.error)) {\n          _this.previous.error = error;\n          onNewData();\n        }\n      }\n    });\n  };\n\n  QueryData.prototype.resubscribeToQuery = function () {\n    this.removeQuerySubscription();\n    var currentObservable = this.currentObservable;\n\n    if (currentObservable) {\n      var lastError = currentObservable.getLastError();\n      var lastResult = currentObservable.getLastResult();\n      currentObservable.resetLastResults();\n      this.startQuerySubscription();\n      Object.assign(currentObservable, {\n        lastError: lastError,\n        lastResult: lastResult\n      });\n    }\n  };\n\n  QueryData.prototype.handleErrorOrCompleted = function () {\n    if (!this.currentObservable || !this.previous.result) return;\n    var _a = this.previous.result,\n        data = _a.data,\n        loading = _a.loading,\n        error = _a.error;\n\n    if (!loading) {\n      var _b = this.getOptions(),\n          query = _b.query,\n          variables = _b.variables,\n          onCompleted = _b.onCompleted,\n          onError = _b.onError,\n          skip = _b.skip;\n\n      if (this.previousOptions && !this.previous.loading && equal(this.previousOptions.query, query) && equal(this.previousOptions.variables, variables)) {\n        return;\n      }\n\n      if (onCompleted && !error && !skip) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  };\n\n  QueryData.prototype.removeQuerySubscription = function () {\n    if (this.currentSubscription) {\n      this.currentSubscription.unsubscribe();\n      delete this.currentSubscription;\n    }\n  };\n\n  QueryData.prototype.removeObservable = function (andDelete) {\n    if (this.currentObservable) {\n      this.currentObservable[\"tearDownQuery\"]();\n\n      if (andDelete) {\n        delete this.currentObservable;\n      }\n    }\n  };\n\n  QueryData.prototype.observableQueryFields = function () {\n    var _a;\n\n    return {\n      variables: (_a = this.currentObservable) === null || _a === void 0 ? void 0 : _a.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    };\n  };\n\n  return QueryData;\n}(OperationData);\n\nexport { QueryData };","map":{"version":3,"sources":["../../../src/react/data/QueryData.ts"],"names":[],"mappings":"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","sourcesContent":["import { equal } from '@wry/equality';\n\nimport { ApolloError } from '../../errors';\n\nimport {\n  ApolloClient,\n  NetworkStatus,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  ObservableQuery,\n  FetchMoreOptions,\n  UpdateQueryOptions,\n  DocumentNode,\n  TypedDocumentNode\n} from '../../core';\n\nimport {\n  ObservableSubscription\n} from '../../utilities';\n\nimport { DocumentType } from '../parser';\nimport {\n  QueryResult,\n  QueryDataOptions,\n  QueryTuple,\n  QueryLazyOptions,\n  ObservableQueryFields,\n} from '../types/types';\nimport { OperationData } from './OperationData';\n\nexport class QueryData<TData, TVariables> extends OperationData<\n  QueryDataOptions<TData, TVariables>\n> {\n  public onNewData: () => void;\n  private currentObservable?: ObservableQuery<TData, TVariables>;\n  private currentSubscription?: ObservableSubscription;\n  private runLazy: boolean = false;\n  private lazyOptions?: QueryLazyOptions<TVariables>;\n  private previous: {\n    client?: ApolloClient<object>;\n    query?: DocumentNode | TypedDocumentNode<TData, TVariables>;\n    observableQueryOptions?: {};\n    result?: QueryResult<TData, TVariables>;\n    loading?: boolean;\n    options?: QueryDataOptions<TData, TVariables>;\n    error?: ApolloError;\n  } = Object.create(null);\n\n  constructor({\n    options,\n    context,\n    onNewData\n  }: {\n    options: QueryDataOptions<TData, TVariables>;\n    context: any;\n    onNewData: () => void;\n  }) {\n    super(options, context);\n    this.onNewData = onNewData;\n  }\n\n  public execute(): QueryResult<TData, TVariables> {\n    this.refreshClient();\n\n    const { skip, query } = this.getOptions();\n    if (skip || query !== this.previous.query) {\n      this.removeQuerySubscription();\n      this.removeObservable(!skip);\n      this.previous.query = query;\n    }\n\n    this.updateObservableQuery();\n\n    if (this.isMounted) this.startQuerySubscription();\n\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  }\n\n  public executeLazy(): QueryTuple<TData, TVariables> {\n    return !this.runLazy\n      ? [\n          this.runLazyQuery,\n          {\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            called: false,\n            data: undefined\n          }\n        ]\n      : [this.runLazyQuery, this.execute()];\n  }\n\n  // For server-side rendering\n  public fetchData(): Promise<void> | boolean {\n    const options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    return new Promise(resolve => this.startQuerySubscription(resolve));\n  }\n\n  public afterExecute({ lazy = false }: { lazy?: boolean } = {}) {\n    this.isMounted = true;\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    this.removeQuerySubscription();\n    this.removeObservable(true);\n    delete this.previous.result;\n  }\n\n  public getOptions() {\n    const options = super.getOptions();\n\n    if (this.lazyOptions) {\n      options.variables = {\n        ...options.variables,\n        ...this.lazyOptions.variables\n      } as TVariables;\n      options.context = {\n        ...options.context,\n        ...this.lazyOptions.context\n      };\n    }\n\n    // skip is not supported when using lazy query execution.\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  }\n\n  public ssrInitiated() {\n    return this.context && this.context.renderPromises;\n  }\n\n  private runLazyQuery = (options?: QueryLazyOptions<TVariables>) => {\n    this.cleanup();\n    this.runLazy = true;\n    this.lazyOptions = options;\n    this.onNewData();\n  };\n\n  private getExecuteResult(): QueryResult<TData, TVariables> {\n    const result = this.getQueryResult();\n    this.startQuerySubscription();\n    return result;\n  };\n\n  private getExecuteSsrResult() {\n    const { ssr, skip } = this.getOptions();\n    const ssrDisabled = ssr === false;\n    const fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    const ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client,\n      ...this.observableQueryFields(),\n    } as QueryResult<TData, TVariables>;\n\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previous.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    if (this.ssrInitiated()) {\n      const result = this.getQueryResult() || ssrLoading;\n      if (result.loading && !skip) {\n        this.context.renderPromises!.addQueryPromise(this, () => null);\n      }\n      return result;\n    }\n  }\n\n  private prepareObservableQueryOptions() {\n    const options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    const displayName = options.displayName || 'Query';\n\n    // Set the fetchPolicy to cache-first for network-only and cache-and-network\n    // fetches for server side renders.\n    if (\n      this.ssrInitiated() &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return {\n      ...options,\n      displayName,\n      context: options.context,\n    };\n  }\n\n  private initializeObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    if (this.ssrInitiated()) {\n      this.currentObservable = this.context!.renderPromises!.getSSRObservable(\n        this.getOptions()\n      );\n    }\n\n    if (!this.currentObservable) {\n      const observableQueryOptions = this.prepareObservableQueryOptions();\n\n      this.previous.observableQueryOptions = {\n        ...observableQueryOptions,\n        children: null\n      };\n      this.currentObservable = this.refreshClient().client.watchQuery({\n        ...observableQueryOptions\n      });\n\n      if (this.ssrInitiated()) {\n        this.context!.renderPromises!.registerSSRObservable(\n          this.currentObservable,\n          observableQueryOptions\n        );\n      }\n    }\n  }\n\n  private updateObservableQuery() {\n    // If we skipped initially, we may not have yet created the observable\n    if (!this.currentObservable) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    if (this.getOptions().skip) return;\n\n    const newObservableQueryOptions = {\n      ...this.prepareObservableQueryOptions(),\n      children: null\n    };\n\n    if (\n      !equal(\n        newObservableQueryOptions,\n        this.previous.observableQueryOptions\n      )\n    ) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable\n        .setOptions(newObservableQueryOptions)\n        // The error will be passed to the child container, so we don't\n        // need to log it here. We could conceivably log something if\n        // an option was set. OTOH we don't log errors w/ the original\n        // query. See https://github.com/apollostack/react-apollo/issues/404\n        .catch(() => {});\n    }\n  }\n\n  // Setup a subscription to watch for Apollo Client `ObservableQuery` changes.\n  // When new data is received, and it doesn't match the data that was used\n  // during the last `QueryData.execute` call (and ultimately the last query\n  // component render), trigger the `onNewData` callback. If not specified,\n  // `onNewData` will fallback to the default `QueryData.onNewData` function\n  // (which usually leads to a query component re-render).\n  private startQuerySubscription(onNewData: () => void = this.onNewData) {\n    if (this.currentSubscription || this.getOptions().skip) return;\n\n    this.currentSubscription = this.currentObservable!.subscribe({\n      next: ({ loading, networkStatus, data }) => {\n        const previousResult = this.previous.result;\n\n        // Make sure we're not attempting to re-render similar results\n        if (\n          previousResult &&\n          previousResult.loading === loading &&\n          previousResult.networkStatus === networkStatus &&\n          equal(previousResult.data, data)\n        ) {\n          return;\n        }\n\n        onNewData();\n      },\n      error: error => {\n        this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n\n        const previousResult = this.previous.result;\n        if (\n          (previousResult && previousResult.loading) ||\n          !equal(error, this.previous.error)\n        ) {\n          this.previous.error = error;\n          onNewData();\n        }\n      }\n    });\n  }\n\n  private resubscribeToQuery() {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `observableQuery` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const { currentObservable } = this;\n    if (currentObservable) {\n      const lastError = currentObservable.getLastError();\n      const lastResult = currentObservable.getLastResult();\n      currentObservable.resetLastResults();\n      this.startQuerySubscription();\n      Object.assign(currentObservable, {\n        lastError,\n        lastResult\n      });\n    }\n  }\n\n  private getQueryResult = (): QueryResult<TData, TVariables> => {\n    let result = this.observableQueryFields() as QueryResult<TData, TVariables>;\n    const options = this.getOptions();\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    //\n    // NOTE: We no longer think this is the correct behavior. Skipping should\n    // not automatically set `data` to `undefined`, but instead leave the\n    // previous data in place. In other words, skipping should not mandate\n    // that previously received data is all of a sudden removed. Unfortunately,\n    // changing this is breaking, so we'll have to wait until Apollo Client\n    // 4.0 to address this.\n    if (options.skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false,\n        networkStatus: NetworkStatus.ready,\n        called: true,\n      };\n    } else if (this.currentObservable) {\n      // Fetch the current result (if any) from the store.\n      const currentResult = this.currentObservable.getCurrentResult();\n      const { data, loading, partial, networkStatus, errors } = currentResult;\n      let { error } = currentResult;\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      result = {\n        ...result,\n        data,\n        loading,\n        networkStatus,\n        error,\n        called: true\n      };\n\n      if (loading) {\n        // Fall through without modifying result...\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.getLastResult() || ({} as any))\n            .data\n        });\n      } else {\n        const { fetchPolicy } = this.currentObservable.options;\n        const { partialRefetch } = options;\n        if (\n          partialRefetch &&\n          partial &&\n          (!data || Object.keys(data).length === 0) &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as `undefined` since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n      }\n    }\n\n    result.client = this.client;\n    // Store options as this.previousOptions.\n    this.setOptions(options, true);\n\n    const previousResult = this.previous.result;\n\n    this.previous.loading =\n      previousResult && previousResult.loading || false;\n\n    // Ensure the returned result contains previousData as a separate\n    // property, to give developers the flexibility of leveraging outdated\n    // data while new data is loading from the network. Falling back to\n    // previousResult.previousData when previousResult.data is falsy here\n    // allows result.previousData to persist across multiple results.\n    result.previousData = previousResult &&\n      (previousResult.data || previousResult.previousData);\n\n    this.previous.result = result;\n\n    // Any query errors that exist are now available in `result`, so we'll\n    // remove the original errors from the `ObservableQuery` query store to\n    // make sure they aren't re-displayed on subsequent (potentially error\n    // free) requests/responses.\n    this.currentObservable && this.currentObservable.resetQueryStoreErrors();\n\n    return result;\n  }\n\n  private handleErrorOrCompleted() {\n    if (!this.currentObservable || !this.previous.result) return;\n\n    const { data, loading, error } = this.previous.result;\n\n    if (!loading) {\n      const {\n        query,\n        variables,\n        onCompleted,\n        onError,\n        skip\n      } = this.getOptions();\n\n      // No changes, so we won't call onError/onCompleted.\n      if (\n        this.previousOptions &&\n        !this.previous.loading &&\n        equal(this.previousOptions.query, query) &&\n        equal(this.previousOptions.variables, variables)\n      ) {\n        return;\n      }\n\n      if (onCompleted && !error && !skip) {\n        onCompleted(data as TData);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  }\n\n  private removeQuerySubscription() {\n    if (this.currentSubscription) {\n      this.currentSubscription.unsubscribe();\n      delete this.currentSubscription;\n    }\n  }\n\n  private removeObservable(andDelete: boolean) {\n    if (this.currentObservable) {\n      this.currentObservable[\"tearDownQuery\"]();\n      if (andDelete) {\n        delete this.currentObservable;\n      }\n    }\n  }\n\n  private obsRefetch = (variables?: Partial<TVariables>) =>\n    this.currentObservable?.refetch(variables);\n\n  private obsFetchMore = <K extends keyof TVariables>(\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, K, TData> &\n      FetchMoreOptions<TData, TVariables>\n  ) => this.currentObservable!.fetchMore(fetchMoreOptions);\n\n  private obsUpdateQuery = <TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVars>\n    ) => TData\n  ) => this.currentObservable!.updateQuery(mapFn);\n\n  private obsStartPolling = (pollInterval: number) => {\n    this.currentObservable?.startPolling(pollInterval);\n  };\n\n  private obsStopPolling = () => {\n    this.currentObservable?.stopPolling();\n  };\n\n  private obsSubscribeToMore = <\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) => this.currentObservable!.subscribeToMore(options);\n\n  private observableQueryFields() {\n    return {\n      variables: this.currentObservable?.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    } as ObservableQueryFields<TData, TVariables>;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}