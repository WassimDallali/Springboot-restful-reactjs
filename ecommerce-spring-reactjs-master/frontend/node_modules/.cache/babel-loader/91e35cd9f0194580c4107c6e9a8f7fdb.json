{"ast":null,"code":"/**\n * Returns a number indicating whether a reference string comes before, or after,\n * or is the same as the given string in natural sort order.\n *\n * See: https://en.wikipedia.org/wiki/Natural_sort_order\n *\n */\nexport default function naturalCompare(aStr, bStr) {\n  var aIdx = 0;\n  var bIdx = 0;\n\n  while (aIdx < aStr.length && bIdx < bStr.length) {\n    var aChar = aStr.charCodeAt(aIdx);\n    var bChar = bStr.charCodeAt(bIdx);\n\n    if (isDigit(aChar) && isDigit(bChar)) {\n      var aNum = 0;\n\n      do {\n        ++aIdx;\n        aNum = aNum * 10 + aChar - DIGIT_0;\n        aChar = aStr.charCodeAt(aIdx);\n      } while (isDigit(aChar) && aNum > 0);\n\n      var bNum = 0;\n\n      do {\n        ++bIdx;\n        bNum = bNum * 10 + bChar - DIGIT_0;\n        bChar = bStr.charCodeAt(bIdx);\n      } while (isDigit(bChar) && bNum > 0);\n\n      if (aNum < bNum) {\n        return -1;\n      }\n\n      if (aNum > bNum) {\n        return 1;\n      }\n    } else {\n      if (aChar < bChar) {\n        return -1;\n      }\n\n      if (aChar > bChar) {\n        return 1;\n      }\n\n      ++aIdx;\n      ++bIdx;\n    }\n  }\n\n  return aStr.length - bStr.length;\n}\nvar DIGIT_0 = 48;\nvar DIGIT_9 = 57;\n\nfunction isDigit(code) {\n  return !isNaN(code) && DIGIT_0 <= code && code <= DIGIT_9;\n}","map":{"version":3,"sources":["C:/Users/HP/Desktop/project/ecommerce-spring-reactjs-master/frontend/node_modules/graphql/jsutils/naturalCompare.mjs"],"names":["naturalCompare","aStr","bStr","aIdx","bIdx","length","aChar","charCodeAt","bChar","isDigit","aNum","DIGIT_0","bNum","DIGIT_9","code","isNaN"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,cAAT,CAAwBC,IAAxB,EAA8BC,IAA9B,EAAoC;AACjD,MAAIC,IAAI,GAAG,CAAX;AACA,MAAIC,IAAI,GAAG,CAAX;;AAEA,SAAOD,IAAI,GAAGF,IAAI,CAACI,MAAZ,IAAsBD,IAAI,GAAGF,IAAI,CAACG,MAAzC,EAAiD;AAC/C,QAAIC,KAAK,GAAGL,IAAI,CAACM,UAAL,CAAgBJ,IAAhB,CAAZ;AACA,QAAIK,KAAK,GAAGN,IAAI,CAACK,UAAL,CAAgBH,IAAhB,CAAZ;;AAEA,QAAIK,OAAO,CAACH,KAAD,CAAP,IAAkBG,OAAO,CAACD,KAAD,CAA7B,EAAsC;AACpC,UAAIE,IAAI,GAAG,CAAX;;AAEA,SAAG;AACD,UAAEP,IAAF;AACAO,QAAAA,IAAI,GAAGA,IAAI,GAAG,EAAP,GAAYJ,KAAZ,GAAoBK,OAA3B;AACAL,QAAAA,KAAK,GAAGL,IAAI,CAACM,UAAL,CAAgBJ,IAAhB,CAAR;AACD,OAJD,QAISM,OAAO,CAACH,KAAD,CAAP,IAAkBI,IAAI,GAAG,CAJlC;;AAMA,UAAIE,IAAI,GAAG,CAAX;;AAEA,SAAG;AACD,UAAER,IAAF;AACAQ,QAAAA,IAAI,GAAGA,IAAI,GAAG,EAAP,GAAYJ,KAAZ,GAAoBG,OAA3B;AACAH,QAAAA,KAAK,GAAGN,IAAI,CAACK,UAAL,CAAgBH,IAAhB,CAAR;AACD,OAJD,QAISK,OAAO,CAACD,KAAD,CAAP,IAAkBI,IAAI,GAAG,CAJlC;;AAMA,UAAIF,IAAI,GAAGE,IAAX,EAAiB;AACf,eAAO,CAAC,CAAR;AACD;;AAED,UAAIF,IAAI,GAAGE,IAAX,EAAiB;AACf,eAAO,CAAP;AACD;AACF,KAxBD,MAwBO;AACL,UAAIN,KAAK,GAAGE,KAAZ,EAAmB;AACjB,eAAO,CAAC,CAAR;AACD;;AAED,UAAIF,KAAK,GAAGE,KAAZ,EAAmB;AACjB,eAAO,CAAP;AACD;;AAED,QAAEL,IAAF;AACA,QAAEC,IAAF;AACD;AACF;;AAED,SAAOH,IAAI,CAACI,MAAL,GAAcH,IAAI,CAACG,MAA1B;AACD;AACD,IAAIM,OAAO,GAAG,EAAd;AACA,IAAIE,OAAO,GAAG,EAAd;;AAEA,SAASJ,OAAT,CAAiBK,IAAjB,EAAuB;AACrB,SAAO,CAACC,KAAK,CAACD,IAAD,CAAN,IAAgBH,OAAO,IAAIG,IAA3B,IAAmCA,IAAI,IAAID,OAAlD;AACD","sourcesContent":["/**\n * Returns a number indicating whether a reference string comes before, or after,\n * or is the same as the given string in natural sort order.\n *\n * See: https://en.wikipedia.org/wiki/Natural_sort_order\n *\n */\nexport default function naturalCompare(aStr, bStr) {\n  var aIdx = 0;\n  var bIdx = 0;\n\n  while (aIdx < aStr.length && bIdx < bStr.length) {\n    var aChar = aStr.charCodeAt(aIdx);\n    var bChar = bStr.charCodeAt(bIdx);\n\n    if (isDigit(aChar) && isDigit(bChar)) {\n      var aNum = 0;\n\n      do {\n        ++aIdx;\n        aNum = aNum * 10 + aChar - DIGIT_0;\n        aChar = aStr.charCodeAt(aIdx);\n      } while (isDigit(aChar) && aNum > 0);\n\n      var bNum = 0;\n\n      do {\n        ++bIdx;\n        bNum = bNum * 10 + bChar - DIGIT_0;\n        bChar = bStr.charCodeAt(bIdx);\n      } while (isDigit(bChar) && bNum > 0);\n\n      if (aNum < bNum) {\n        return -1;\n      }\n\n      if (aNum > bNum) {\n        return 1;\n      }\n    } else {\n      if (aChar < bChar) {\n        return -1;\n      }\n\n      if (aChar > bChar) {\n        return 1;\n      }\n\n      ++aIdx;\n      ++bIdx;\n    }\n  }\n\n  return aStr.length - bStr.length;\n}\nvar DIGIT_0 = 48;\nvar DIGIT_9 = 57;\n\nfunction isDigit(code) {\n  return !isNaN(code) && DIGIT_0 <= code && code <= DIGIT_9;\n}\n"]},"metadata":{},"sourceType":"module"}