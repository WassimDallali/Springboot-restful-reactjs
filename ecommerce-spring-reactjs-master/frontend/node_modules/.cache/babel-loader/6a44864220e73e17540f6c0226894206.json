{"ast":null,"code":"import { BYTE } from './byte';\n/**\n * Frame class represents a STOMP frame.\n *\n * @internal\n */\n\nexport class FrameImpl {\n  /**\n   * Frame constructor. `command`, `headers` and `body` are available as properties.\n   *\n   * @internal\n   */\n  constructor(params) {\n    const {\n      command,\n      headers,\n      body,\n      binaryBody,\n      escapeHeaderValues,\n      skipContentLengthHeader\n    } = params;\n    this.command = command;\n    this.headers = Object.assign({}, headers || {});\n\n    if (binaryBody) {\n      this._binaryBody = binaryBody;\n      this.isBinaryBody = true;\n    } else {\n      this._body = body || '';\n      this.isBinaryBody = false;\n    }\n\n    this.escapeHeaderValues = escapeHeaderValues || false;\n    this.skipContentLengthHeader = skipContentLengthHeader || false;\n  }\n  /**\n   * body of the frame\n   */\n\n\n  get body() {\n    if (!this._body && this.isBinaryBody) {\n      this._body = new TextDecoder().decode(this._binaryBody);\n    }\n\n    return this._body;\n  }\n  /**\n   * body as Uint8Array\n   */\n\n\n  get binaryBody() {\n    if (!this._binaryBody && !this.isBinaryBody) {\n      this._binaryBody = new TextEncoder().encode(this._body);\n    }\n\n    return this._binaryBody;\n  }\n  /**\n   * deserialize a STOMP Frame from raw data.\n   *\n   * @internal\n   */\n\n\n  static fromRawFrame(rawFrame, escapeHeaderValues) {\n    const headers = {};\n\n    const trim = str => str.replace(/^\\s+|\\s+$/g, ''); // In case of repeated headers, as per standards, first value need to be used\n\n\n    for (const header of rawFrame.headers.reverse()) {\n      const idx = header.indexOf(':');\n      const key = trim(header[0]);\n      let value = trim(header[1]);\n\n      if (escapeHeaderValues && rawFrame.command !== 'CONNECT' && rawFrame.command !== 'CONNECTED') {\n        value = FrameImpl.hdrValueUnEscape(value);\n      }\n\n      headers[key] = value;\n    }\n\n    return new FrameImpl({\n      command: rawFrame.command,\n      headers,\n      binaryBody: rawFrame.binaryBody,\n      escapeHeaderValues\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  toString() {\n    return this.serializeCmdAndHeaders();\n  }\n  /**\n   * serialize this Frame in a format suitable to be passed to WebSocket.\n   * If the body is string the output will be string.\n   * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\n   *\n   * @internal\n   */\n\n\n  serialize() {\n    const cmdAndHeaders = this.serializeCmdAndHeaders();\n\n    if (this.isBinaryBody) {\n      return FrameImpl.toUnit8Array(cmdAndHeaders, this._binaryBody).buffer;\n    } else {\n      return cmdAndHeaders + this._body + BYTE.NULL;\n    }\n  }\n\n  serializeCmdAndHeaders() {\n    const lines = [this.command];\n\n    if (this.skipContentLengthHeader) {\n      delete this.headers['content-length'];\n    }\n\n    for (const name of Object.keys(this.headers || {})) {\n      const value = this.headers[name];\n\n      if (this.escapeHeaderValues && this.command !== 'CONNECT' && this.command !== 'CONNECTED') {\n        lines.push(`${name}:${FrameImpl.hdrValueEscape(`${value}`)}`);\n      } else {\n        lines.push(`${name}:${value}`);\n      }\n    }\n\n    if (this.isBinaryBody || !this.isBodyEmpty() && !this.skipContentLengthHeader) {\n      lines.push(`content-length:${this.bodyLength()}`);\n    }\n\n    return lines.join(BYTE.LF) + BYTE.LF + BYTE.LF;\n  }\n\n  isBodyEmpty() {\n    return this.bodyLength() === 0;\n  }\n\n  bodyLength() {\n    const binaryBody = this.binaryBody;\n    return binaryBody ? binaryBody.length : 0;\n  }\n  /**\n   * Compute the size of a UTF-8 string by counting its number of bytes\n   * (and not the number of characters composing the string)\n   */\n\n\n  static sizeOfUTF8(s) {\n    return s ? new TextEncoder().encode(s).length : 0;\n  }\n\n  static toUnit8Array(cmdAndHeaders, binaryBody) {\n    const uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n    const nullTerminator = new Uint8Array([0]);\n    const uint8Frame = new Uint8Array(uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length);\n    uint8Frame.set(uint8CmdAndHeaders);\n    uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\n    uint8Frame.set(nullTerminator, uint8CmdAndHeaders.length + binaryBody.length);\n    return uint8Frame;\n  }\n  /**\n   * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n   *\n   * @internal\n   */\n\n\n  static marshall(params) {\n    const frame = new FrameImpl(params);\n    return frame.serialize();\n  }\n  /**\n   *  Escape header values\n   */\n\n\n  static hdrValueEscape(str) {\n    return str.replace(/\\\\/g, '\\\\\\\\').replace(/\\r/g, '\\\\r').replace(/\\n/g, '\\\\n').replace(/:/g, '\\\\c');\n  }\n  /**\n   * UnEscape header values\n   */\n\n\n  static hdrValueUnEscape(str) {\n    return str.replace(/\\\\r/g, '\\r').replace(/\\\\n/g, '\\n').replace(/\\\\c/g, ':').replace(/\\\\\\\\/g, '\\\\');\n  }\n\n}","map":{"version":3,"sources":["../src/frame-impl.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { BYTE } from './byte';\n/**\n * Frame class represents a STOMP frame.\n *\n * @internal\n */\nexport class FrameImpl {\n    /**\n     * Frame constructor. `command`, `headers` and `body` are available as properties.\n     *\n     * @internal\n     */\n    constructor(params) {\n        const { command, headers, body, binaryBody, escapeHeaderValues, skipContentLengthHeader, } = params;\n        this.command = command;\n        this.headers = Object.assign({}, headers || {});\n        if (binaryBody) {\n            this._binaryBody = binaryBody;\n            this.isBinaryBody = true;\n        }\n        else {\n            this._body = body || '';\n            this.isBinaryBody = false;\n        }\n        this.escapeHeaderValues = escapeHeaderValues || false;\n        this.skipContentLengthHeader = skipContentLengthHeader || false;\n    }\n    /**\n     * body of the frame\n     */\n    get body() {\n        if (!this._body && this.isBinaryBody) {\n            this._body = new TextDecoder().decode(this._binaryBody);\n        }\n        return this._body;\n    }\n    /**\n     * body as Uint8Array\n     */\n    get binaryBody() {\n        if (!this._binaryBody && !this.isBinaryBody) {\n            this._binaryBody = new TextEncoder().encode(this._body);\n        }\n        return this._binaryBody;\n    }\n    /**\n     * deserialize a STOMP Frame from raw data.\n     *\n     * @internal\n     */\n    static fromRawFrame(rawFrame, escapeHeaderValues) {\n        const headers = {};\n        const trim = (str) => str.replace(/^\\s+|\\s+$/g, '');\n        // In case of repeated headers, as per standards, first value need to be used\n        for (const header of rawFrame.headers.reverse()) {\n            const idx = header.indexOf(':');\n            const key = trim(header[0]);\n            let value = trim(header[1]);\n            if (escapeHeaderValues &&\n                rawFrame.command !== 'CONNECT' &&\n                rawFrame.command !== 'CONNECTED') {\n                value = FrameImpl.hdrValueUnEscape(value);\n            }\n            headers[key] = value;\n        }\n        return new FrameImpl({\n            command: rawFrame.command,\n            headers,\n            binaryBody: rawFrame.binaryBody,\n            escapeHeaderValues,\n        });\n    }\n    /**\n     * @internal\n     */\n    toString() {\n        return this.serializeCmdAndHeaders();\n    }\n    /**\n     * serialize this Frame in a format suitable to be passed to WebSocket.\n     * If the body is string the output will be string.\n     * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\n     *\n     * @internal\n     */\n    serialize() {\n        const cmdAndHeaders = this.serializeCmdAndHeaders();\n        if (this.isBinaryBody) {\n            return FrameImpl.toUnit8Array(cmdAndHeaders, this._binaryBody).buffer;\n        }\n        else {\n            return cmdAndHeaders + this._body + BYTE.NULL;\n        }\n    }\n    serializeCmdAndHeaders() {\n        const lines = [this.command];\n        if (this.skipContentLengthHeader) {\n            delete this.headers['content-length'];\n        }\n        for (const name of Object.keys(this.headers || {})) {\n            const value = this.headers[name];\n            if (this.escapeHeaderValues &&\n                this.command !== 'CONNECT' &&\n                this.command !== 'CONNECTED') {\n                lines.push(`${name}:${FrameImpl.hdrValueEscape(`${value}`)}`);\n            }\n            else {\n                lines.push(`${name}:${value}`);\n            }\n        }\n        if (this.isBinaryBody ||\n            (!this.isBodyEmpty() && !this.skipContentLengthHeader)) {\n            lines.push(`content-length:${this.bodyLength()}`);\n        }\n        return lines.join(BYTE.LF) + BYTE.LF + BYTE.LF;\n    }\n    isBodyEmpty() {\n        return this.bodyLength() === 0;\n    }\n    bodyLength() {\n        const binaryBody = this.binaryBody;\n        return binaryBody ? binaryBody.length : 0;\n    }\n    /**\n     * Compute the size of a UTF-8 string by counting its number of bytes\n     * (and not the number of characters composing the string)\n     */\n    static sizeOfUTF8(s) {\n        return s ? new TextEncoder().encode(s).length : 0;\n    }\n    static toUnit8Array(cmdAndHeaders, binaryBody) {\n        const uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n        const nullTerminator = new Uint8Array([0]);\n        const uint8Frame = new Uint8Array(uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length);\n        uint8Frame.set(uint8CmdAndHeaders);\n        uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\n        uint8Frame.set(nullTerminator, uint8CmdAndHeaders.length + binaryBody.length);\n        return uint8Frame;\n    }\n    /**\n     * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n     *\n     * @internal\n     */\n    static marshall(params) {\n        const frame = new FrameImpl(params);\n        return frame.serialize();\n    }\n    /**\n     *  Escape header values\n     */\n    static hdrValueEscape(str) {\n        return str\n            .replace(/\\\\/g, '\\\\\\\\')\n            .replace(/\\r/g, '\\\\r')\n            .replace(/\\n/g, '\\\\n')\n            .replace(/:/g, '\\\\c');\n    }\n    /**\n     * UnEscape header values\n     */\n    static hdrValueUnEscape(str) {\n        return str\n            .replace(/\\\\r/g, '\\r')\n            .replace(/\\\\n/g, '\\n')\n            .replace(/\\\\c/g, ':')\n            .replace(/\\\\\\\\/g, '\\\\');\n    }\n}\n//# sourceMappingURL=frame-impl.js.map"]},"metadata":{},"sourceType":"module"}