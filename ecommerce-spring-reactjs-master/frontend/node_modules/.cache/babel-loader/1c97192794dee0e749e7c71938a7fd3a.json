{"ast":null,"code":"import { calculateCartPriceSuccess, clearCartSuccess, fetchCartSuccess, loadingCart, stopLoadingCart } from \"../actions/cart-actions\";\nimport RequestService from '../../utils/request-service';\nexport const fetchCart = data => async dispatch => {\n  dispatch(loadingCart());\n  const response = await RequestService.post(\"/users/cart\", data);\n  const perfumes = new Map(JSON.parse(localStorage.getItem(\"perfumes\")));\n  let total = 0;\n  perfumes.forEach((value, key) => {\n    const perfume = response.data.find(perfume => perfume.id === key);\n    total += perfume.price * value;\n  });\n  dispatch(fetchCartSuccess(response.data));\n  dispatch(calculateCartPriceSuccess(total));\n};\nexport const calculateCartPrice = perfumes => dispatch => {\n  const perfumesFromLocalStorage = new Map(JSON.parse(localStorage.getItem(\"perfumes\")));\n  let total = 0;\n  perfumesFromLocalStorage.forEach((value, key) => {\n    const perfume = perfumes.find(perfume => perfume.id === key);\n    total += perfume.price * value;\n  });\n  dispatch(calculateCartPriceSuccess(total));\n};\nexport const clearCart = () => dispatch => {\n  dispatch(clearCartSuccess());\n};\nexport const loadCart = () => dispatch => {\n  dispatch(stopLoadingCart());\n};","map":{"version":3,"sources":["C:/Users/HP/Desktop/project/ecommerce-spring-reactjs-master/frontend/src/redux/thunks/cart-thunks.ts"],"names":["calculateCartPriceSuccess","clearCartSuccess","fetchCartSuccess","loadingCart","stopLoadingCart","RequestService","fetchCart","data","dispatch","response","post","perfumes","Map","JSON","parse","localStorage","getItem","total","forEach","value","key","perfume","find","id","price","calculateCartPrice","perfumesFromLocalStorage","clearCart","loadCart"],"mappings":"AACA,SACIA,yBADJ,EAEIC,gBAFJ,EAGIC,gBAHJ,EAIIC,WAJJ,EAKIC,eALJ,QAMO,yBANP;AAQA,OAAOC,cAAP,MAA2B,6BAA3B;AAEA,OAAO,MAAMC,SAAS,GAAIC,IAAD,IAAyB,MAAOC,QAAP,IAA8B;AAC5EA,EAAAA,QAAQ,CAACL,WAAW,EAAZ,CAAR;AACA,QAAMM,QAAQ,GAAG,MAAMJ,cAAc,CAACK,IAAf,CAAoB,aAApB,EAAmCH,IAAnC,CAAvB;AACA,QAAMI,QAA6B,GAAG,IAAIC,GAAJ,CAAQC,IAAI,CAACC,KAAL,CAAmBC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAnB,CAAR,CAAtC;AACA,MAAIC,KAAa,GAAG,CAApB;AAEAN,EAAAA,QAAQ,CAACO,OAAT,CAAiB,CAACC,KAAD,EAAgBC,GAAhB,KAAgC;AAC7C,UAAMC,OAAgB,GAAGZ,QAAQ,CAACF,IAAT,CAAce,IAAd,CAAoBD,OAAD,IAA8BA,OAAO,CAACE,EAAR,KAAeH,GAAhE,CAAzB;AACAH,IAAAA,KAAK,IAAKI,OAAO,CAACG,KAAR,GAAgBL,KAA1B;AACH,GAHD;AAIAX,EAAAA,QAAQ,CAACN,gBAAgB,CAACO,QAAQ,CAACF,IAAV,CAAjB,CAAR;AACAC,EAAAA,QAAQ,CAACR,yBAAyB,CAACiB,KAAD,CAA1B,CAAR;AACH,CAZM;AAcP,OAAO,MAAMQ,kBAAkB,GAAId,QAAD,IAAqCH,QAAD,IAAwB;AAC1F,QAAMkB,wBAA6C,GAAG,IAAId,GAAJ,CAAQC,IAAI,CAACC,KAAL,CAAmBC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAnB,CAAR,CAAtD;AACA,MAAIC,KAAa,GAAG,CAApB;AAEAS,EAAAA,wBAAwB,CAACR,OAAzB,CAAiC,CAACC,KAAD,EAAgBC,GAAhB,KAAgC;AAC7D,UAAMC,OAAgB,GAAGV,QAAQ,CAACW,IAAT,CAAeD,OAAD,IAA8BA,OAAO,CAACE,EAAR,KAAeH,GAA3D,CAAzB;AACAH,IAAAA,KAAK,IAAII,OAAO,CAACG,KAAR,GAAgBL,KAAzB;AACH,GAHD;AAIAX,EAAAA,QAAQ,CAACR,yBAAyB,CAACiB,KAAD,CAA1B,CAAR;AACH,CATM;AAWP,OAAO,MAAMU,SAAS,GAAG,MAAOnB,QAAD,IAAwB;AACnDA,EAAAA,QAAQ,CAACP,gBAAgB,EAAjB,CAAR;AACH,CAFM;AAIP,OAAO,MAAM2B,QAAQ,GAAG,MAAOpB,QAAD,IAAwB;AAClDA,EAAAA,QAAQ,CAACJ,eAAe,EAAhB,CAAR;AACH,CAFM","sourcesContent":["import {Perfume} from \"../../types/types\";\nimport {\n    calculateCartPriceSuccess,\n    clearCartSuccess,\n    fetchCartSuccess,\n    loadingCart,\n    stopLoadingCart\n} from \"../actions/cart-actions\";\nimport {Dispatch} from \"redux\";\nimport RequestService from '../../utils/request-service';\n\nexport const fetchCart = (data: Array<number>) => async (dispatch: Dispatch) => {\n    dispatch(loadingCart());\n    const response = await RequestService.post(\"/users/cart\", data);\n    const perfumes: Map<number, number> = new Map(JSON.parse(<string>localStorage.getItem(\"perfumes\")));\n    let total: number = 0;\n\n    perfumes.forEach((value: number, key: number) => {\n        const perfume: Perfume = response.data.find((perfume: { id: number; }) => perfume.id === key);\n        total += (perfume.price * value);\n    });\n    dispatch(fetchCartSuccess(response.data));\n    dispatch(calculateCartPriceSuccess(total));\n};\n\nexport const calculateCartPrice = (perfumes: Array<Perfume> | any) => (dispatch: Dispatch) => {\n    const perfumesFromLocalStorage: Map<number, number> = new Map(JSON.parse(<string>localStorage.getItem(\"perfumes\")));\n    let total: number = 0;\n\n    perfumesFromLocalStorage.forEach((value: number, key: number) => {\n        const perfume: Perfume = perfumes.find((perfume: { id: number; }) => perfume.id === key);\n        total += perfume.price * value;\n    });\n    dispatch(calculateCartPriceSuccess(total));\n};\n\nexport const clearCart = () => (dispatch: Dispatch) => {\n    dispatch(clearCartSuccess());\n};\n\nexport const loadCart = () => (dispatch: Dispatch) => {\n    dispatch(stopLoadingCart());\n};\n"]},"metadata":{},"sourceType":"module"}