{"ast":null,"code":"import objectValues from \"../polyfills/objectValues.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport devAssert from \"../jsutils/devAssert.mjs\";\nimport keyValMap from \"../jsutils/keyValMap.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport { parseValue } from \"../language/parser.mjs\";\nimport { GraphQLSchema } from \"../type/schema.mjs\";\nimport { GraphQLDirective } from \"../type/directives.mjs\";\nimport { specifiedScalarTypes } from \"../type/scalars.mjs\";\nimport { introspectionTypes, TypeKind } from \"../type/introspection.mjs\";\nimport { isInputType, isOutputType, GraphQLList, GraphQLNonNull, GraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, assertNullableType, assertObjectType, assertInterfaceType } from \"../type/definition.mjs\";\nimport { valueFromAST } from \"./valueFromAST.mjs\";\n/**\n * Build a GraphQLSchema for use by client tools.\n *\n * Given the result of a client running the introspection query, creates and\n * returns a GraphQLSchema instance which can be then used with all graphql-js\n * tools, but cannot be used to execute a query, as introspection does not\n * represent the \"resolver\", \"parse\" or \"serialize\" functions or any other\n * server-internal mechanisms.\n *\n * This function expects a complete introspection result. Don't forget to check\n * the \"errors\" field of a server response before calling this function.\n */\n\nexport function buildClientSchema(introspection, options) {\n  isObjectLike(introspection) && isObjectLike(introspection.__schema) || devAssert(0, \"Invalid or incomplete introspection result. Ensure that you are passing \\\"data\\\" property of introspection response and no \\\"errors\\\" was returned alongside: \".concat(inspect(introspection), \".\")); // Get the schema from the introspection result.\n\n  var schemaIntrospection = introspection.__schema; // Iterate through all types, getting the type definition for each.\n\n  var typeMap = keyValMap(schemaIntrospection.types, function (typeIntrospection) {\n    return typeIntrospection.name;\n  }, function (typeIntrospection) {\n    return buildType(typeIntrospection);\n  }); // Include standard types only if they are used.\n\n  for (var _i2 = 0, _ref2 = [].concat(specifiedScalarTypes, introspectionTypes); _i2 < _ref2.length; _i2++) {\n    var stdType = _ref2[_i2];\n\n    if (typeMap[stdType.name]) {\n      typeMap[stdType.name] = stdType;\n    }\n  } // Get the root Query, Mutation, and Subscription types.\n\n\n  var queryType = schemaIntrospection.queryType ? getObjectType(schemaIntrospection.queryType) : null;\n  var mutationType = schemaIntrospection.mutationType ? getObjectType(schemaIntrospection.mutationType) : null;\n  var subscriptionType = schemaIntrospection.subscriptionType ? getObjectType(schemaIntrospection.subscriptionType) : null; // Get the directives supported by Introspection, assuming empty-set if\n  // directives were not queried for.\n\n  var directives = schemaIntrospection.directives ? schemaIntrospection.directives.map(buildDirective) : []; // Then produce and return a Schema with these types.\n\n  return new GraphQLSchema({\n    description: schemaIntrospection.description,\n    query: queryType,\n    mutation: mutationType,\n    subscription: subscriptionType,\n    types: objectValues(typeMap),\n    directives: directives,\n    assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid\n  }); // Given a type reference in introspection, return the GraphQLType instance.\n  // preferring cached instances before building new instances.\n\n  function getType(typeRef) {\n    if (typeRef.kind === TypeKind.LIST) {\n      var itemRef = typeRef.ofType;\n\n      if (!itemRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n\n      return new GraphQLList(getType(itemRef));\n    }\n\n    if (typeRef.kind === TypeKind.NON_NULL) {\n      var nullableRef = typeRef.ofType;\n\n      if (!nullableRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n\n      var nullableType = getType(nullableRef);\n      return new GraphQLNonNull(assertNullableType(nullableType));\n    }\n\n    return getNamedType(typeRef);\n  }\n\n  function getNamedType(typeRef) {\n    var typeName = typeRef.name;\n\n    if (!typeName) {\n      throw new Error(\"Unknown type reference: \".concat(inspect(typeRef), \".\"));\n    }\n\n    var type = typeMap[typeName];\n\n    if (!type) {\n      throw new Error(\"Invalid or incomplete schema, unknown type: \".concat(typeName, \". Ensure that a full introspection query is used in order to build a client schema.\"));\n    }\n\n    return type;\n  }\n\n  function getObjectType(typeRef) {\n    return assertObjectType(getNamedType(typeRef));\n  }\n\n  function getInterfaceType(typeRef) {\n    return assertInterfaceType(getNamedType(typeRef));\n  } // Given a type's introspection result, construct the correct\n  // GraphQLType instance.\n\n\n  function buildType(type) {\n    if (type != null && type.name != null && type.kind != null) {\n      switch (type.kind) {\n        case TypeKind.SCALAR:\n          return buildScalarDef(type);\n\n        case TypeKind.OBJECT:\n          return buildObjectDef(type);\n\n        case TypeKind.INTERFACE:\n          return buildInterfaceDef(type);\n\n        case TypeKind.UNION:\n          return buildUnionDef(type);\n\n        case TypeKind.ENUM:\n          return buildEnumDef(type);\n\n        case TypeKind.INPUT_OBJECT:\n          return buildInputObjectDef(type);\n      }\n    }\n\n    var typeStr = inspect(type);\n    throw new Error(\"Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: \".concat(typeStr, \".\"));\n  }\n\n  function buildScalarDef(scalarIntrospection) {\n    return new GraphQLScalarType({\n      name: scalarIntrospection.name,\n      description: scalarIntrospection.description,\n      specifiedByUrl: scalarIntrospection.specifiedByUrl\n    });\n  }\n\n  function buildImplementationsList(implementingIntrospection) {\n    // TODO: Temporary workaround until GraphQL ecosystem will fully support\n    // 'interfaces' on interface types.\n    if (implementingIntrospection.interfaces === null && implementingIntrospection.kind === TypeKind.INTERFACE) {\n      return [];\n    }\n\n    if (!implementingIntrospection.interfaces) {\n      var implementingIntrospectionStr = inspect(implementingIntrospection);\n      throw new Error(\"Introspection result missing interfaces: \".concat(implementingIntrospectionStr, \".\"));\n    }\n\n    return implementingIntrospection.interfaces.map(getInterfaceType);\n  }\n\n  function buildObjectDef(objectIntrospection) {\n    return new GraphQLObjectType({\n      name: objectIntrospection.name,\n      description: objectIntrospection.description,\n      interfaces: function interfaces() {\n        return buildImplementationsList(objectIntrospection);\n      },\n      fields: function fields() {\n        return buildFieldDefMap(objectIntrospection);\n      }\n    });\n  }\n\n  function buildInterfaceDef(interfaceIntrospection) {\n    return new GraphQLInterfaceType({\n      name: interfaceIntrospection.name,\n      description: interfaceIntrospection.description,\n      interfaces: function interfaces() {\n        return buildImplementationsList(interfaceIntrospection);\n      },\n      fields: function fields() {\n        return buildFieldDefMap(interfaceIntrospection);\n      }\n    });\n  }\n\n  function buildUnionDef(unionIntrospection) {\n    if (!unionIntrospection.possibleTypes) {\n      var unionIntrospectionStr = inspect(unionIntrospection);\n      throw new Error(\"Introspection result missing possibleTypes: \".concat(unionIntrospectionStr, \".\"));\n    }\n\n    return new GraphQLUnionType({\n      name: unionIntrospection.name,\n      description: unionIntrospection.description,\n      types: function types() {\n        return unionIntrospection.possibleTypes.map(getObjectType);\n      }\n    });\n  }\n\n  function buildEnumDef(enumIntrospection) {\n    if (!enumIntrospection.enumValues) {\n      var enumIntrospectionStr = inspect(enumIntrospection);\n      throw new Error(\"Introspection result missing enumValues: \".concat(enumIntrospectionStr, \".\"));\n    }\n\n    return new GraphQLEnumType({\n      name: enumIntrospection.name,\n      description: enumIntrospection.description,\n      values: keyValMap(enumIntrospection.enumValues, function (valueIntrospection) {\n        return valueIntrospection.name;\n      }, function (valueIntrospection) {\n        return {\n          description: valueIntrospection.description,\n          deprecationReason: valueIntrospection.deprecationReason\n        };\n      })\n    });\n  }\n\n  function buildInputObjectDef(inputObjectIntrospection) {\n    if (!inputObjectIntrospection.inputFields) {\n      var inputObjectIntrospectionStr = inspect(inputObjectIntrospection);\n      throw new Error(\"Introspection result missing inputFields: \".concat(inputObjectIntrospectionStr, \".\"));\n    }\n\n    return new GraphQLInputObjectType({\n      name: inputObjectIntrospection.name,\n      description: inputObjectIntrospection.description,\n      fields: function fields() {\n        return buildInputValueDefMap(inputObjectIntrospection.inputFields);\n      }\n    });\n  }\n\n  function buildFieldDefMap(typeIntrospection) {\n    if (!typeIntrospection.fields) {\n      throw new Error(\"Introspection result missing fields: \".concat(inspect(typeIntrospection), \".\"));\n    }\n\n    return keyValMap(typeIntrospection.fields, function (fieldIntrospection) {\n      return fieldIntrospection.name;\n    }, buildField);\n  }\n\n  function buildField(fieldIntrospection) {\n    var type = getType(fieldIntrospection.type);\n\n    if (!isOutputType(type)) {\n      var typeStr = inspect(type);\n      throw new Error(\"Introspection must provide output type for fields, but received: \".concat(typeStr, \".\"));\n    }\n\n    if (!fieldIntrospection.args) {\n      var fieldIntrospectionStr = inspect(fieldIntrospection);\n      throw new Error(\"Introspection result missing field args: \".concat(fieldIntrospectionStr, \".\"));\n    }\n\n    return {\n      description: fieldIntrospection.description,\n      deprecationReason: fieldIntrospection.deprecationReason,\n      type: type,\n      args: buildInputValueDefMap(fieldIntrospection.args)\n    };\n  }\n\n  function buildInputValueDefMap(inputValueIntrospections) {\n    return keyValMap(inputValueIntrospections, function (inputValue) {\n      return inputValue.name;\n    }, buildInputValue);\n  }\n\n  function buildInputValue(inputValueIntrospection) {\n    var type = getType(inputValueIntrospection.type);\n\n    if (!isInputType(type)) {\n      var typeStr = inspect(type);\n      throw new Error(\"Introspection must provide input type for arguments, but received: \".concat(typeStr, \".\"));\n    }\n\n    var defaultValue = inputValueIntrospection.defaultValue != null ? valueFromAST(parseValue(inputValueIntrospection.defaultValue), type) : undefined;\n    return {\n      description: inputValueIntrospection.description,\n      type: type,\n      defaultValue: defaultValue,\n      deprecationReason: inputValueIntrospection.deprecationReason\n    };\n  }\n\n  function buildDirective(directiveIntrospection) {\n    if (!directiveIntrospection.args) {\n      var directiveIntrospectionStr = inspect(directiveIntrospection);\n      throw new Error(\"Introspection result missing directive args: \".concat(directiveIntrospectionStr, \".\"));\n    }\n\n    if (!directiveIntrospection.locations) {\n      var _directiveIntrospectionStr = inspect(directiveIntrospection);\n\n      throw new Error(\"Introspection result missing directive locations: \".concat(_directiveIntrospectionStr, \".\"));\n    }\n\n    return new GraphQLDirective({\n      name: directiveIntrospection.name,\n      description: directiveIntrospection.description,\n      isRepeatable: directiveIntrospection.isRepeatable,\n      locations: directiveIntrospection.locations.slice(),\n      args: buildInputValueDefMap(directiveIntrospection.args)\n    });\n  }\n}","map":{"version":3,"sources":["C:/Users/HP/Desktop/project/ecommerce-spring-reactjs-master/frontend/node_modules/graphql/utilities/buildClientSchema.mjs"],"names":["objectValues","inspect","devAssert","keyValMap","isObjectLike","parseValue","GraphQLSchema","GraphQLDirective","specifiedScalarTypes","introspectionTypes","TypeKind","isInputType","isOutputType","GraphQLList","GraphQLNonNull","GraphQLScalarType","GraphQLObjectType","GraphQLInterfaceType","GraphQLUnionType","GraphQLEnumType","GraphQLInputObjectType","assertNullableType","assertObjectType","assertInterfaceType","valueFromAST","buildClientSchema","introspection","options","__schema","concat","schemaIntrospection","typeMap","types","typeIntrospection","name","buildType","_i2","_ref2","length","stdType","queryType","getObjectType","mutationType","subscriptionType","directives","map","buildDirective","description","query","mutation","subscription","assumeValid","getType","typeRef","kind","LIST","itemRef","ofType","Error","NON_NULL","nullableRef","nullableType","getNamedType","typeName","type","getInterfaceType","SCALAR","buildScalarDef","OBJECT","buildObjectDef","INTERFACE","buildInterfaceDef","UNION","buildUnionDef","ENUM","buildEnumDef","INPUT_OBJECT","buildInputObjectDef","typeStr","scalarIntrospection","specifiedByUrl","buildImplementationsList","implementingIntrospection","interfaces","implementingIntrospectionStr","objectIntrospection","fields","buildFieldDefMap","interfaceIntrospection","unionIntrospection","possibleTypes","unionIntrospectionStr","enumIntrospection","enumValues","enumIntrospectionStr","values","valueIntrospection","deprecationReason","inputObjectIntrospection","inputFields","inputObjectIntrospectionStr","buildInputValueDefMap","fieldIntrospection","buildField","args","fieldIntrospectionStr","inputValueIntrospections","inputValue","buildInputValue","inputValueIntrospection","defaultValue","undefined","directiveIntrospection","directiveIntrospectionStr","locations","_directiveIntrospectionStr","isRepeatable","slice"],"mappings":"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","sourcesContent":["import objectValues from \"../polyfills/objectValues.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport devAssert from \"../jsutils/devAssert.mjs\";\nimport keyValMap from \"../jsutils/keyValMap.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport { parseValue } from \"../language/parser.mjs\";\nimport { GraphQLSchema } from \"../type/schema.mjs\";\nimport { GraphQLDirective } from \"../type/directives.mjs\";\nimport { specifiedScalarTypes } from \"../type/scalars.mjs\";\nimport { introspectionTypes, TypeKind } from \"../type/introspection.mjs\";\nimport { isInputType, isOutputType, GraphQLList, GraphQLNonNull, GraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, assertNullableType, assertObjectType, assertInterfaceType } from \"../type/definition.mjs\";\nimport { valueFromAST } from \"./valueFromAST.mjs\";\n/**\n * Build a GraphQLSchema for use by client tools.\n *\n * Given the result of a client running the introspection query, creates and\n * returns a GraphQLSchema instance which can be then used with all graphql-js\n * tools, but cannot be used to execute a query, as introspection does not\n * represent the \"resolver\", \"parse\" or \"serialize\" functions or any other\n * server-internal mechanisms.\n *\n * This function expects a complete introspection result. Don't forget to check\n * the \"errors\" field of a server response before calling this function.\n */\n\nexport function buildClientSchema(introspection, options) {\n  isObjectLike(introspection) && isObjectLike(introspection.__schema) || devAssert(0, \"Invalid or incomplete introspection result. Ensure that you are passing \\\"data\\\" property of introspection response and no \\\"errors\\\" was returned alongside: \".concat(inspect(introspection), \".\")); // Get the schema from the introspection result.\n\n  var schemaIntrospection = introspection.__schema; // Iterate through all types, getting the type definition for each.\n\n  var typeMap = keyValMap(schemaIntrospection.types, function (typeIntrospection) {\n    return typeIntrospection.name;\n  }, function (typeIntrospection) {\n    return buildType(typeIntrospection);\n  }); // Include standard types only if they are used.\n\n  for (var _i2 = 0, _ref2 = [].concat(specifiedScalarTypes, introspectionTypes); _i2 < _ref2.length; _i2++) {\n    var stdType = _ref2[_i2];\n\n    if (typeMap[stdType.name]) {\n      typeMap[stdType.name] = stdType;\n    }\n  } // Get the root Query, Mutation, and Subscription types.\n\n\n  var queryType = schemaIntrospection.queryType ? getObjectType(schemaIntrospection.queryType) : null;\n  var mutationType = schemaIntrospection.mutationType ? getObjectType(schemaIntrospection.mutationType) : null;\n  var subscriptionType = schemaIntrospection.subscriptionType ? getObjectType(schemaIntrospection.subscriptionType) : null; // Get the directives supported by Introspection, assuming empty-set if\n  // directives were not queried for.\n\n  var directives = schemaIntrospection.directives ? schemaIntrospection.directives.map(buildDirective) : []; // Then produce and return a Schema with these types.\n\n  return new GraphQLSchema({\n    description: schemaIntrospection.description,\n    query: queryType,\n    mutation: mutationType,\n    subscription: subscriptionType,\n    types: objectValues(typeMap),\n    directives: directives,\n    assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid\n  }); // Given a type reference in introspection, return the GraphQLType instance.\n  // preferring cached instances before building new instances.\n\n  function getType(typeRef) {\n    if (typeRef.kind === TypeKind.LIST) {\n      var itemRef = typeRef.ofType;\n\n      if (!itemRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n\n      return new GraphQLList(getType(itemRef));\n    }\n\n    if (typeRef.kind === TypeKind.NON_NULL) {\n      var nullableRef = typeRef.ofType;\n\n      if (!nullableRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n\n      var nullableType = getType(nullableRef);\n      return new GraphQLNonNull(assertNullableType(nullableType));\n    }\n\n    return getNamedType(typeRef);\n  }\n\n  function getNamedType(typeRef) {\n    var typeName = typeRef.name;\n\n    if (!typeName) {\n      throw new Error(\"Unknown type reference: \".concat(inspect(typeRef), \".\"));\n    }\n\n    var type = typeMap[typeName];\n\n    if (!type) {\n      throw new Error(\"Invalid or incomplete schema, unknown type: \".concat(typeName, \". Ensure that a full introspection query is used in order to build a client schema.\"));\n    }\n\n    return type;\n  }\n\n  function getObjectType(typeRef) {\n    return assertObjectType(getNamedType(typeRef));\n  }\n\n  function getInterfaceType(typeRef) {\n    return assertInterfaceType(getNamedType(typeRef));\n  } // Given a type's introspection result, construct the correct\n  // GraphQLType instance.\n\n\n  function buildType(type) {\n    if (type != null && type.name != null && type.kind != null) {\n      switch (type.kind) {\n        case TypeKind.SCALAR:\n          return buildScalarDef(type);\n\n        case TypeKind.OBJECT:\n          return buildObjectDef(type);\n\n        case TypeKind.INTERFACE:\n          return buildInterfaceDef(type);\n\n        case TypeKind.UNION:\n          return buildUnionDef(type);\n\n        case TypeKind.ENUM:\n          return buildEnumDef(type);\n\n        case TypeKind.INPUT_OBJECT:\n          return buildInputObjectDef(type);\n      }\n    }\n\n    var typeStr = inspect(type);\n    throw new Error(\"Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: \".concat(typeStr, \".\"));\n  }\n\n  function buildScalarDef(scalarIntrospection) {\n    return new GraphQLScalarType({\n      name: scalarIntrospection.name,\n      description: scalarIntrospection.description,\n      specifiedByUrl: scalarIntrospection.specifiedByUrl\n    });\n  }\n\n  function buildImplementationsList(implementingIntrospection) {\n    // TODO: Temporary workaround until GraphQL ecosystem will fully support\n    // 'interfaces' on interface types.\n    if (implementingIntrospection.interfaces === null && implementingIntrospection.kind === TypeKind.INTERFACE) {\n      return [];\n    }\n\n    if (!implementingIntrospection.interfaces) {\n      var implementingIntrospectionStr = inspect(implementingIntrospection);\n      throw new Error(\"Introspection result missing interfaces: \".concat(implementingIntrospectionStr, \".\"));\n    }\n\n    return implementingIntrospection.interfaces.map(getInterfaceType);\n  }\n\n  function buildObjectDef(objectIntrospection) {\n    return new GraphQLObjectType({\n      name: objectIntrospection.name,\n      description: objectIntrospection.description,\n      interfaces: function interfaces() {\n        return buildImplementationsList(objectIntrospection);\n      },\n      fields: function fields() {\n        return buildFieldDefMap(objectIntrospection);\n      }\n    });\n  }\n\n  function buildInterfaceDef(interfaceIntrospection) {\n    return new GraphQLInterfaceType({\n      name: interfaceIntrospection.name,\n      description: interfaceIntrospection.description,\n      interfaces: function interfaces() {\n        return buildImplementationsList(interfaceIntrospection);\n      },\n      fields: function fields() {\n        return buildFieldDefMap(interfaceIntrospection);\n      }\n    });\n  }\n\n  function buildUnionDef(unionIntrospection) {\n    if (!unionIntrospection.possibleTypes) {\n      var unionIntrospectionStr = inspect(unionIntrospection);\n      throw new Error(\"Introspection result missing possibleTypes: \".concat(unionIntrospectionStr, \".\"));\n    }\n\n    return new GraphQLUnionType({\n      name: unionIntrospection.name,\n      description: unionIntrospection.description,\n      types: function types() {\n        return unionIntrospection.possibleTypes.map(getObjectType);\n      }\n    });\n  }\n\n  function buildEnumDef(enumIntrospection) {\n    if (!enumIntrospection.enumValues) {\n      var enumIntrospectionStr = inspect(enumIntrospection);\n      throw new Error(\"Introspection result missing enumValues: \".concat(enumIntrospectionStr, \".\"));\n    }\n\n    return new GraphQLEnumType({\n      name: enumIntrospection.name,\n      description: enumIntrospection.description,\n      values: keyValMap(enumIntrospection.enumValues, function (valueIntrospection) {\n        return valueIntrospection.name;\n      }, function (valueIntrospection) {\n        return {\n          description: valueIntrospection.description,\n          deprecationReason: valueIntrospection.deprecationReason\n        };\n      })\n    });\n  }\n\n  function buildInputObjectDef(inputObjectIntrospection) {\n    if (!inputObjectIntrospection.inputFields) {\n      var inputObjectIntrospectionStr = inspect(inputObjectIntrospection);\n      throw new Error(\"Introspection result missing inputFields: \".concat(inputObjectIntrospectionStr, \".\"));\n    }\n\n    return new GraphQLInputObjectType({\n      name: inputObjectIntrospection.name,\n      description: inputObjectIntrospection.description,\n      fields: function fields() {\n        return buildInputValueDefMap(inputObjectIntrospection.inputFields);\n      }\n    });\n  }\n\n  function buildFieldDefMap(typeIntrospection) {\n    if (!typeIntrospection.fields) {\n      throw new Error(\"Introspection result missing fields: \".concat(inspect(typeIntrospection), \".\"));\n    }\n\n    return keyValMap(typeIntrospection.fields, function (fieldIntrospection) {\n      return fieldIntrospection.name;\n    }, buildField);\n  }\n\n  function buildField(fieldIntrospection) {\n    var type = getType(fieldIntrospection.type);\n\n    if (!isOutputType(type)) {\n      var typeStr = inspect(type);\n      throw new Error(\"Introspection must provide output type for fields, but received: \".concat(typeStr, \".\"));\n    }\n\n    if (!fieldIntrospection.args) {\n      var fieldIntrospectionStr = inspect(fieldIntrospection);\n      throw new Error(\"Introspection result missing field args: \".concat(fieldIntrospectionStr, \".\"));\n    }\n\n    return {\n      description: fieldIntrospection.description,\n      deprecationReason: fieldIntrospection.deprecationReason,\n      type: type,\n      args: buildInputValueDefMap(fieldIntrospection.args)\n    };\n  }\n\n  function buildInputValueDefMap(inputValueIntrospections) {\n    return keyValMap(inputValueIntrospections, function (inputValue) {\n      return inputValue.name;\n    }, buildInputValue);\n  }\n\n  function buildInputValue(inputValueIntrospection) {\n    var type = getType(inputValueIntrospection.type);\n\n    if (!isInputType(type)) {\n      var typeStr = inspect(type);\n      throw new Error(\"Introspection must provide input type for arguments, but received: \".concat(typeStr, \".\"));\n    }\n\n    var defaultValue = inputValueIntrospection.defaultValue != null ? valueFromAST(parseValue(inputValueIntrospection.defaultValue), type) : undefined;\n    return {\n      description: inputValueIntrospection.description,\n      type: type,\n      defaultValue: defaultValue,\n      deprecationReason: inputValueIntrospection.deprecationReason\n    };\n  }\n\n  function buildDirective(directiveIntrospection) {\n    if (!directiveIntrospection.args) {\n      var directiveIntrospectionStr = inspect(directiveIntrospection);\n      throw new Error(\"Introspection result missing directive args: \".concat(directiveIntrospectionStr, \".\"));\n    }\n\n    if (!directiveIntrospection.locations) {\n      var _directiveIntrospectionStr = inspect(directiveIntrospection);\n\n      throw new Error(\"Introspection result missing directive locations: \".concat(_directiveIntrospectionStr, \".\"));\n    }\n\n    return new GraphQLDirective({\n      name: directiveIntrospection.name,\n      description: directiveIntrospection.description,\n      isRepeatable: directiveIntrospection.isRepeatable,\n      locations: directiveIntrospection.locations.slice(),\n      args: buildInputValueDefMap(directiveIntrospection.args)\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}