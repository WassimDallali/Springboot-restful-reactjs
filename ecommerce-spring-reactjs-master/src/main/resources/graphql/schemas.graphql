schema {
    query: Query
}

type Query {
    perfumes: [Perfume]
    perfumesIds(ids: [ID]): [Perfume]
    perfume(id: ID): Perfume
    orders: [Order]
    ordersByEmail(email: String): [Order]
    users: [User]
    user(id: ID): User
}

type Perfume {
    id: Int
    perfumeTitle: String
    perfumer: String
    year: Int
    country: String
    perfumeGender: String
    fragranceTopNotes: String
    fragranceMiddleNotes: String
    fragranceBaseNotes: String
    description: String
    filename: String
    price: Int
    volume: String
    type: String
    perfumeRating: Float
    reviews: [Review]
}

type Review {
    id: Int
    author: String
    message: String
    date: String
    rating: Int
}

type Order {
    id: Int
    totalPrice: Float
    date: String
    firstName: String
    lastName: String
    city: String
    address: String
    email: String
    phoneNumber: String
    postIndex: Int
    orderItems: [OrderItem]
}

type OrderItem {
    id: Int
    amount: Int
    quantity: Int
    perfume: Perfume
}

type User {
    id: Int
    email: String
    password: String
    firstName: String
    lastName: String
    city: String
    address: String
    phoneNumber: String
    postIndex: String
    activationCode: String
    passwordResetCode: String
    active: Boolean
    provider: String
    roles: [String]
}
